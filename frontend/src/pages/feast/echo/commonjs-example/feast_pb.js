/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck


goog.provide('proto.PushRequest');
goog.provide('proto.PushResponse');
goog.provide('proto.WriteToOnlineStoreRequest');
goog.provide('proto.WriteToOnlineStoreResponse');
goog.provide('proto.feast.core.Aggregation');
goog.provide('proto.feast.core.DataSource');
goog.provide('proto.feast.core.DataSource.AthenaOptions');
goog.provide('proto.feast.core.DataSource.BigQueryOptions');
goog.provide('proto.feast.core.DataSource.CustomSourceOptions');
goog.provide('proto.feast.core.DataSource.FileOptions');
goog.provide('proto.feast.core.DataSource.KafkaOptions');
goog.provide('proto.feast.core.DataSource.KinesisOptions');
goog.provide('proto.feast.core.DataSource.OptionsCase');
goog.provide('proto.feast.core.DataSource.PushOptions');
goog.provide('proto.feast.core.DataSource.RedshiftOptions');
goog.provide('proto.feast.core.DataSource.RequestDataOptions');
goog.provide('proto.feast.core.DataSource.SnowflakeOptions');
goog.provide('proto.feast.core.DataSource.SourceMeta');
goog.provide('proto.feast.core.DataSource.SourceType');
goog.provide('proto.feast.core.DataSource.SparkOptions');
goog.provide('proto.feast.core.DataSource.TrinoOptions');
goog.provide('proto.feast.core.DatastoreTable');
goog.provide('proto.feast.core.DynamoDBTable');
goog.provide('proto.feast.core.Entity');
goog.provide('proto.feast.core.EntityMeta');
goog.provide('proto.feast.core.EntitySpecV2');
goog.provide('proto.feast.core.FeatureService');
goog.provide('proto.feast.core.FeatureServiceMeta');
goog.provide('proto.feast.core.FeatureServiceSpec');
goog.provide('proto.feast.core.FeatureSpecV2');
goog.provide('proto.feast.core.FeatureTable');
goog.provide('proto.feast.core.FeatureTableMeta');
goog.provide('proto.feast.core.FeatureTableSpec');
goog.provide('proto.feast.core.FeatureTransformationV2');
goog.provide('proto.feast.core.FeatureTransformationV2.TransformationCase');
goog.provide('proto.feast.core.FeatureView');
goog.provide('proto.feast.core.FeatureViewMeta');
goog.provide('proto.feast.core.FeatureViewProjection');
goog.provide('proto.feast.core.FeatureViewSpec');
goog.provide('proto.feast.core.FileFormat');
goog.provide('proto.feast.core.FileFormat.DeltaFormat');
goog.provide('proto.feast.core.FileFormat.FormatCase');
goog.provide('proto.feast.core.FileFormat.ParquetFormat');
goog.provide('proto.feast.core.GEValidationProfile');
goog.provide('proto.feast.core.GEValidationProfiler');
goog.provide('proto.feast.core.GEValidationProfiler.UserDefinedProfiler');
goog.provide('proto.feast.core.Infra');
goog.provide('proto.feast.core.InfraObject');
goog.provide('proto.feast.core.InfraObject.CustomInfra');
goog.provide('proto.feast.core.InfraObject.InfraObjectCase');
goog.provide('proto.feast.core.LoggingConfig');
goog.provide('proto.feast.core.LoggingConfig.AthenaDestination');
goog.provide('proto.feast.core.LoggingConfig.BigQueryDestination');
goog.provide('proto.feast.core.LoggingConfig.CustomDestination');
goog.provide('proto.feast.core.LoggingConfig.DestinationCase');
goog.provide('proto.feast.core.LoggingConfig.FileDestination');
goog.provide('proto.feast.core.LoggingConfig.RedshiftDestination');
goog.provide('proto.feast.core.LoggingConfig.SnowflakeDestination');
goog.provide('proto.feast.core.MaterializationInterval');
goog.provide('proto.feast.core.OnDemandFeatureView');
goog.provide('proto.feast.core.OnDemandFeatureViewMeta');
goog.provide('proto.feast.core.OnDemandFeatureViewSpec');
goog.provide('proto.feast.core.OnDemandSource');
goog.provide('proto.feast.core.OnDemandSource.SourceCase');
goog.provide('proto.feast.core.ProjectMetadata');
goog.provide('proto.feast.core.Registry');
goog.provide('proto.feast.core.SavedDataset');
goog.provide('proto.feast.core.SavedDatasetMeta');
goog.provide('proto.feast.core.SavedDatasetSpec');
goog.provide('proto.feast.core.SavedDatasetStorage');
goog.provide('proto.feast.core.SavedDatasetStorage.KindCase');
goog.provide('proto.feast.core.SqliteTable');
goog.provide('proto.feast.core.Store');
goog.provide('proto.feast.core.Store.ConfigCase');
goog.provide('proto.feast.core.Store.RedisClusterConfig');
goog.provide('proto.feast.core.Store.RedisClusterConfig.ReadFrom');
goog.provide('proto.feast.core.Store.RedisConfig');
goog.provide('proto.feast.core.Store.StoreType');
goog.provide('proto.feast.core.Store.Subscription');
goog.provide('proto.feast.core.StreamFeatureView');
goog.provide('proto.feast.core.StreamFeatureViewSpec');
goog.provide('proto.feast.core.StreamFormat');
goog.provide('proto.feast.core.StreamFormat.AvroFormat');
goog.provide('proto.feast.core.StreamFormat.FormatCase');
goog.provide('proto.feast.core.StreamFormat.JsonFormat');
goog.provide('proto.feast.core.StreamFormat.ProtoFormat');
goog.provide('proto.feast.core.SubstraitTransformationV2');
goog.provide('proto.feast.core.UserDefinedFunction');
goog.provide('proto.feast.core.UserDefinedFunctionV2');
goog.provide('proto.feast.core.ValidationReference');
goog.provide('proto.feast.core.ValidationReference.CachedProfileCase');
goog.provide('proto.feast.core.ValidationReference.ProfilerCase');
goog.provide('proto.feast.registry.ApplyDataSourceRequest');
goog.provide('proto.feast.registry.ApplyEntityRequest');
goog.provide('proto.feast.registry.ApplyFeatureServiceRequest');
goog.provide('proto.feast.registry.ApplyFeatureViewRequest');
goog.provide('proto.feast.registry.ApplyFeatureViewRequest.BaseFeatureViewCase');
goog.provide('proto.feast.registry.ApplyMaterializationRequest');
goog.provide('proto.feast.registry.ApplySavedDatasetRequest');
goog.provide('proto.feast.registry.ApplyValidationReferenceRequest');
goog.provide('proto.feast.registry.DeleteDataSourceRequest');
goog.provide('proto.feast.registry.DeleteEntityRequest');
goog.provide('proto.feast.registry.DeleteFeatureServiceRequest');
goog.provide('proto.feast.registry.DeleteFeatureViewRequest');
goog.provide('proto.feast.registry.DeleteSavedDatasetRequest');
goog.provide('proto.feast.registry.DeleteValidationReferenceRequest');
goog.provide('proto.feast.registry.GetDataSourceRequest');
goog.provide('proto.feast.registry.GetEntityRequest');
goog.provide('proto.feast.registry.GetFeatureServiceRequest');
goog.provide('proto.feast.registry.GetFeatureViewRequest');
goog.provide('proto.feast.registry.GetInfraRequest');
goog.provide('proto.feast.registry.GetOnDemandFeatureViewRequest');
goog.provide('proto.feast.registry.GetSavedDatasetRequest');
goog.provide('proto.feast.registry.GetStreamFeatureViewRequest');
goog.provide('proto.feast.registry.GetValidationReferenceRequest');
goog.provide('proto.feast.registry.ListDataSourcesRequest');
goog.provide('proto.feast.registry.ListDataSourcesResponse');
goog.provide('proto.feast.registry.ListEntitiesRequest');
goog.provide('proto.feast.registry.ListEntitiesResponse');
goog.provide('proto.feast.registry.ListFeatureServicesRequest');
goog.provide('proto.feast.registry.ListFeatureServicesResponse');
goog.provide('proto.feast.registry.ListFeatureViewsRequest');
goog.provide('proto.feast.registry.ListFeatureViewsResponse');
goog.provide('proto.feast.registry.ListOnDemandFeatureViewsRequest');
goog.provide('proto.feast.registry.ListOnDemandFeatureViewsResponse');
goog.provide('proto.feast.registry.ListProjectMetadataRequest');
goog.provide('proto.feast.registry.ListProjectMetadataResponse');
goog.provide('proto.feast.registry.ListSavedDatasetsRequest');
goog.provide('proto.feast.registry.ListSavedDatasetsResponse');
goog.provide('proto.feast.registry.ListStreamFeatureViewsRequest');
goog.provide('proto.feast.registry.ListStreamFeatureViewsResponse');
goog.provide('proto.feast.registry.ListValidationReferencesRequest');
goog.provide('proto.feast.registry.ListValidationReferencesResponse');
goog.provide('proto.feast.registry.RefreshRequest');
goog.provide('proto.feast.registry.UpdateInfraRequest');
goog.provide('proto.feast.serving.FeatureList');
goog.provide('proto.feast.serving.FeatureReferenceV2');
goog.provide('proto.feast.serving.FieldStatus');
goog.provide('proto.feast.serving.GetFeastServingInfoRequest');
goog.provide('proto.feast.serving.GetFeastServingInfoResponse');
goog.provide('proto.feast.serving.GetOnlineFeaturesRequest');
goog.provide('proto.feast.serving.GetOnlineFeaturesRequest.KindCase');
goog.provide('proto.feast.serving.GetOnlineFeaturesRequestV2');
goog.provide('proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow');
goog.provide('proto.feast.serving.GetOnlineFeaturesResponse');
goog.provide('proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector');
goog.provide('proto.feast.serving.GetOnlineFeaturesResponseMetadata');
goog.provide('proto.feast.serving.GetTransformationServiceInfoRequest');
goog.provide('proto.feast.serving.GetTransformationServiceInfoResponse');
goog.provide('proto.feast.serving.TransformFeaturesRequest');
goog.provide('proto.feast.serving.TransformFeaturesResponse');
goog.provide('proto.feast.serving.TransformationServiceType');
goog.provide('proto.feast.serving.ValueType');
goog.provide('proto.feast.serving.ValueType.ValueCase');
goog.provide('proto.feast.storage.RedisKeyV2');
goog.provide('proto.feast.types.BoolList');
goog.provide('proto.feast.types.BytesList');
goog.provide('proto.feast.types.DoubleList');
goog.provide('proto.feast.types.EntityKey');
goog.provide('proto.feast.types.Field');
goog.provide('proto.feast.types.FloatList');
goog.provide('proto.feast.types.Int32List');
goog.provide('proto.feast.types.Int64List');
goog.provide('proto.feast.types.Null');
goog.provide('proto.feast.types.RepeatedValue');
goog.provide('proto.feast.types.StringList');
goog.provide('proto.feast.types.Value');
goog.provide('proto.feast.types.Value.ValCase');
goog.provide('proto.feast.types.ValueType');
goog.provide('proto.feast.types.ValueType.Enum');
goog.provide('proto.grpc.connector.ConnectorFeature');
goog.provide('proto.grpc.connector.ConnectorFeatureList');
goog.provide('proto.grpc.connector.OnlineReadRequest');
goog.provide('proto.grpc.connector.OnlineReadResponse');
goog.provide('proto.grpc.health.v1.HealthCheckRequest');
goog.provide('proto.grpc.health.v1.HealthCheckResponse');
goog.provide('proto.grpc.health.v1.ServingStatus');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.google.protobuf.Duration');
goog.require('proto.google.protobuf.StringValue');
goog.require('proto.google.protobuf.Timestamp');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.Aggregation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.Aggregation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.Aggregation.displayName = 'proto.feast.core.Aggregation';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.Aggregation.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.Aggregation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.Aggregation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Aggregation.toObject = function(includeInstance, msg) {
  var f, obj = {
    column: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pb_function: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timeWindow: (f = msg.getTimeWindow()) && proto.google.protobuf.Duration.toObject(includeInstance, f),
    slideInterval: (f = msg.getSlideInterval()) && proto.google.protobuf.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.Aggregation}
 */
proto.feast.core.Aggregation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.Aggregation;
  return proto.feast.core.Aggregation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.Aggregation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.Aggregation}
 */
proto.feast.core.Aggregation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunction(value);
      break;
    case 3:
      var value = new proto.google.protobuf.Duration;
      reader.readMessage(value,proto.google.protobuf.Duration.deserializeBinaryFromReader);
      msg.setTimeWindow(value);
      break;
    case 4:
      var value = new proto.google.protobuf.Duration;
      reader.readMessage(value,proto.google.protobuf.Duration.deserializeBinaryFromReader);
      msg.setSlideInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.Aggregation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.Aggregation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.Aggregation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Aggregation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFunction();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimeWindow();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.google.protobuf.Duration.serializeBinaryToWriter
    );
  }
  f = message.getSlideInterval();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.google.protobuf.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string column = 1;
 * @return {string}
 */
proto.feast.core.Aggregation.prototype.getColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Aggregation} returns this
 */
proto.feast.core.Aggregation.prototype.setColumn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string function = 2;
 * @return {string}
 */
proto.feast.core.Aggregation.prototype.getFunction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Aggregation} returns this
 */
proto.feast.core.Aggregation.prototype.setFunction = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Duration time_window = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.feast.core.Aggregation.prototype.getTimeWindow = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Duration, 3));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.feast.core.Aggregation} returns this
*/
proto.feast.core.Aggregation.prototype.setTimeWindow = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.Aggregation} returns this
 */
proto.feast.core.Aggregation.prototype.clearTimeWindow = function() {
  return this.setTimeWindow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.Aggregation.prototype.hasTimeWindow = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Duration slide_interval = 4;
 * @return {?proto.google.protobuf.Duration}
 */
proto.feast.core.Aggregation.prototype.getSlideInterval = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Duration, 4));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.feast.core.Aggregation} returns this
*/
proto.feast.core.Aggregation.prototype.setSlideInterval = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.Aggregation} returns this
 */
proto.feast.core.Aggregation.prototype.clearSlideInterval = function() {
  return this.setSlideInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.Aggregation.prototype.hasSlideInterval = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FileFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.FileFormat.oneofGroups_);
};
goog.inherits(proto.feast.core.FileFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FileFormat.displayName = 'proto.feast.core.FileFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FileFormat.ParquetFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.FileFormat.ParquetFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FileFormat.ParquetFormat.displayName = 'proto.feast.core.FileFormat.ParquetFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FileFormat.DeltaFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.FileFormat.DeltaFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FileFormat.DeltaFormat.displayName = 'proto.feast.core.FileFormat.DeltaFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.StreamFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.StreamFormat.oneofGroups_);
};
goog.inherits(proto.feast.core.StreamFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.StreamFormat.displayName = 'proto.feast.core.StreamFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.StreamFormat.ProtoFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.StreamFormat.ProtoFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.StreamFormat.ProtoFormat.displayName = 'proto.feast.core.StreamFormat.ProtoFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.StreamFormat.AvroFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.StreamFormat.AvroFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.StreamFormat.AvroFormat.displayName = 'proto.feast.core.StreamFormat.AvroFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.StreamFormat.JsonFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.StreamFormat.JsonFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.StreamFormat.JsonFormat.displayName = 'proto.feast.core.StreamFormat.JsonFormat';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.FileFormat.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.feast.core.FileFormat.FormatCase = {
  FORMAT_NOT_SET: 0,
  PARQUET_FORMAT: 1,
  DELTA_FORMAT: 2
};

/**
 * @return {proto.feast.core.FileFormat.FormatCase}
 */
proto.feast.core.FileFormat.prototype.getFormatCase = function() {
  return /** @type {proto.feast.core.FileFormat.FormatCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.FileFormat.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FileFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FileFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FileFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FileFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    parquetFormat: (f = msg.getParquetFormat()) && proto.feast.core.FileFormat.ParquetFormat.toObject(includeInstance, f),
    deltaFormat: (f = msg.getDeltaFormat()) && proto.feast.core.FileFormat.DeltaFormat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FileFormat}
 */
proto.feast.core.FileFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FileFormat;
  return proto.feast.core.FileFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FileFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FileFormat}
 */
proto.feast.core.FileFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.FileFormat.ParquetFormat;
      reader.readMessage(value,proto.feast.core.FileFormat.ParquetFormat.deserializeBinaryFromReader);
      msg.setParquetFormat(value);
      break;
    case 2:
      var value = new proto.feast.core.FileFormat.DeltaFormat;
      reader.readMessage(value,proto.feast.core.FileFormat.DeltaFormat.deserializeBinaryFromReader);
      msg.setDeltaFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FileFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FileFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FileFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FileFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParquetFormat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.FileFormat.ParquetFormat.serializeBinaryToWriter
    );
  }
  f = message.getDeltaFormat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.FileFormat.DeltaFormat.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FileFormat.ParquetFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FileFormat.ParquetFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FileFormat.ParquetFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FileFormat.ParquetFormat.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FileFormat.ParquetFormat}
 */
proto.feast.core.FileFormat.ParquetFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FileFormat.ParquetFormat;
  return proto.feast.core.FileFormat.ParquetFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FileFormat.ParquetFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FileFormat.ParquetFormat}
 */
proto.feast.core.FileFormat.ParquetFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FileFormat.ParquetFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FileFormat.ParquetFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FileFormat.ParquetFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FileFormat.ParquetFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FileFormat.DeltaFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FileFormat.DeltaFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FileFormat.DeltaFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FileFormat.DeltaFormat.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FileFormat.DeltaFormat}
 */
proto.feast.core.FileFormat.DeltaFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FileFormat.DeltaFormat;
  return proto.feast.core.FileFormat.DeltaFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FileFormat.DeltaFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FileFormat.DeltaFormat}
 */
proto.feast.core.FileFormat.DeltaFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FileFormat.DeltaFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FileFormat.DeltaFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FileFormat.DeltaFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FileFormat.DeltaFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional ParquetFormat parquet_format = 1;
 * @return {?proto.feast.core.FileFormat.ParquetFormat}
 */
proto.feast.core.FileFormat.prototype.getParquetFormat = function() {
  return /** @type{?proto.feast.core.FileFormat.ParquetFormat} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FileFormat.ParquetFormat, 1));
};


/**
 * @param {?proto.feast.core.FileFormat.ParquetFormat|undefined} value
 * @return {!proto.feast.core.FileFormat} returns this
*/
proto.feast.core.FileFormat.prototype.setParquetFormat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.feast.core.FileFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FileFormat} returns this
 */
proto.feast.core.FileFormat.prototype.clearParquetFormat = function() {
  return this.setParquetFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FileFormat.prototype.hasParquetFormat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeltaFormat delta_format = 2;
 * @return {?proto.feast.core.FileFormat.DeltaFormat}
 */
proto.feast.core.FileFormat.prototype.getDeltaFormat = function() {
  return /** @type{?proto.feast.core.FileFormat.DeltaFormat} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FileFormat.DeltaFormat, 2));
};


/**
 * @param {?proto.feast.core.FileFormat.DeltaFormat|undefined} value
 * @return {!proto.feast.core.FileFormat} returns this
*/
proto.feast.core.FileFormat.prototype.setDeltaFormat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.feast.core.FileFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FileFormat} returns this
 */
proto.feast.core.FileFormat.prototype.clearDeltaFormat = function() {
  return this.setDeltaFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FileFormat.prototype.hasDeltaFormat = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.StreamFormat.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.feast.core.StreamFormat.FormatCase = {
  FORMAT_NOT_SET: 0,
  AVRO_FORMAT: 1,
  PROTO_FORMAT: 2,
  JSON_FORMAT: 3
};

/**
 * @return {proto.feast.core.StreamFormat.FormatCase}
 */
proto.feast.core.StreamFormat.prototype.getFormatCase = function() {
  return /** @type {proto.feast.core.StreamFormat.FormatCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.StreamFormat.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.StreamFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.StreamFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.StreamFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    avroFormat: (f = msg.getAvroFormat()) && proto.feast.core.StreamFormat.AvroFormat.toObject(includeInstance, f),
    protoFormat: (f = msg.getProtoFormat()) && proto.feast.core.StreamFormat.ProtoFormat.toObject(includeInstance, f),
    jsonFormat: (f = msg.getJsonFormat()) && proto.feast.core.StreamFormat.JsonFormat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.StreamFormat}
 */
proto.feast.core.StreamFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.StreamFormat;
  return proto.feast.core.StreamFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.StreamFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.StreamFormat}
 */
proto.feast.core.StreamFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.StreamFormat.AvroFormat;
      reader.readMessage(value,proto.feast.core.StreamFormat.AvroFormat.deserializeBinaryFromReader);
      msg.setAvroFormat(value);
      break;
    case 2:
      var value = new proto.feast.core.StreamFormat.ProtoFormat;
      reader.readMessage(value,proto.feast.core.StreamFormat.ProtoFormat.deserializeBinaryFromReader);
      msg.setProtoFormat(value);
      break;
    case 3:
      var value = new proto.feast.core.StreamFormat.JsonFormat;
      reader.readMessage(value,proto.feast.core.StreamFormat.JsonFormat.deserializeBinaryFromReader);
      msg.setJsonFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.StreamFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.StreamFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.StreamFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAvroFormat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.StreamFormat.AvroFormat.serializeBinaryToWriter
    );
  }
  f = message.getProtoFormat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.StreamFormat.ProtoFormat.serializeBinaryToWriter
    );
  }
  f = message.getJsonFormat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feast.core.StreamFormat.JsonFormat.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.StreamFormat.ProtoFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.StreamFormat.ProtoFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.StreamFormat.ProtoFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.ProtoFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    classPath: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.StreamFormat.ProtoFormat}
 */
proto.feast.core.StreamFormat.ProtoFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.StreamFormat.ProtoFormat;
  return proto.feast.core.StreamFormat.ProtoFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.StreamFormat.ProtoFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.StreamFormat.ProtoFormat}
 */
proto.feast.core.StreamFormat.ProtoFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.StreamFormat.ProtoFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.StreamFormat.ProtoFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.StreamFormat.ProtoFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.ProtoFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string class_path = 1;
 * @return {string}
 */
proto.feast.core.StreamFormat.ProtoFormat.prototype.getClassPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.StreamFormat.ProtoFormat} returns this
 */
proto.feast.core.StreamFormat.ProtoFormat.prototype.setClassPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.StreamFormat.AvroFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.StreamFormat.AvroFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.StreamFormat.AvroFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.AvroFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    schemaJson: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.StreamFormat.AvroFormat}
 */
proto.feast.core.StreamFormat.AvroFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.StreamFormat.AvroFormat;
  return proto.feast.core.StreamFormat.AvroFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.StreamFormat.AvroFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.StreamFormat.AvroFormat}
 */
proto.feast.core.StreamFormat.AvroFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.StreamFormat.AvroFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.StreamFormat.AvroFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.StreamFormat.AvroFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.AvroFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchemaJson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string schema_json = 1;
 * @return {string}
 */
proto.feast.core.StreamFormat.AvroFormat.prototype.getSchemaJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.StreamFormat.AvroFormat} returns this
 */
proto.feast.core.StreamFormat.AvroFormat.prototype.setSchemaJson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.StreamFormat.JsonFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.StreamFormat.JsonFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.StreamFormat.JsonFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.JsonFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    schemaJson: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.StreamFormat.JsonFormat}
 */
proto.feast.core.StreamFormat.JsonFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.StreamFormat.JsonFormat;
  return proto.feast.core.StreamFormat.JsonFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.StreamFormat.JsonFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.StreamFormat.JsonFormat}
 */
proto.feast.core.StreamFormat.JsonFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.StreamFormat.JsonFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.StreamFormat.JsonFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.StreamFormat.JsonFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.JsonFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchemaJson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string schema_json = 1;
 * @return {string}
 */
proto.feast.core.StreamFormat.JsonFormat.prototype.getSchemaJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.StreamFormat.JsonFormat} returns this
 */
proto.feast.core.StreamFormat.JsonFormat.prototype.setSchemaJson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AvroFormat avro_format = 1;
 * @return {?proto.feast.core.StreamFormat.AvroFormat}
 */
proto.feast.core.StreamFormat.prototype.getAvroFormat = function() {
  return /** @type{?proto.feast.core.StreamFormat.AvroFormat} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.StreamFormat.AvroFormat, 1));
};


/**
 * @param {?proto.feast.core.StreamFormat.AvroFormat|undefined} value
 * @return {!proto.feast.core.StreamFormat} returns this
*/
proto.feast.core.StreamFormat.prototype.setAvroFormat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.feast.core.StreamFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.StreamFormat} returns this
 */
proto.feast.core.StreamFormat.prototype.clearAvroFormat = function() {
  return this.setAvroFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.StreamFormat.prototype.hasAvroFormat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProtoFormat proto_format = 2;
 * @return {?proto.feast.core.StreamFormat.ProtoFormat}
 */
proto.feast.core.StreamFormat.prototype.getProtoFormat = function() {
  return /** @type{?proto.feast.core.StreamFormat.ProtoFormat} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.StreamFormat.ProtoFormat, 2));
};


/**
 * @param {?proto.feast.core.StreamFormat.ProtoFormat|undefined} value
 * @return {!proto.feast.core.StreamFormat} returns this
*/
proto.feast.core.StreamFormat.prototype.setProtoFormat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.feast.core.StreamFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.StreamFormat} returns this
 */
proto.feast.core.StreamFormat.prototype.clearProtoFormat = function() {
  return this.setProtoFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.StreamFormat.prototype.hasProtoFormat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional JsonFormat json_format = 3;
 * @return {?proto.feast.core.StreamFormat.JsonFormat}
 */
proto.feast.core.StreamFormat.prototype.getJsonFormat = function() {
  return /** @type{?proto.feast.core.StreamFormat.JsonFormat} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.StreamFormat.JsonFormat, 3));
};


/**
 * @param {?proto.feast.core.StreamFormat.JsonFormat|undefined} value
 * @return {!proto.feast.core.StreamFormat} returns this
*/
proto.feast.core.StreamFormat.prototype.setJsonFormat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.feast.core.StreamFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.StreamFormat} returns this
 */
proto.feast.core.StreamFormat.prototype.clearJsonFormat = function() {
  return this.setJsonFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.StreamFormat.prototype.hasJsonFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.ValueType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.types.ValueType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.ValueType.displayName = 'proto.feast.types.ValueType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.types.Value.oneofGroups_);
};
goog.inherits(proto.feast.types.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.Value.displayName = 'proto.feast.types.Value';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.BytesList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.BytesList.repeatedFields_, null);
};
goog.inherits(proto.feast.types.BytesList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.BytesList.displayName = 'proto.feast.types.BytesList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.StringList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.StringList.repeatedFields_, null);
};
goog.inherits(proto.feast.types.StringList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.StringList.displayName = 'proto.feast.types.StringList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.Int32List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.Int32List.repeatedFields_, null);
};
goog.inherits(proto.feast.types.Int32List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.Int32List.displayName = 'proto.feast.types.Int32List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.Int64List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.Int64List.repeatedFields_, null);
};
goog.inherits(proto.feast.types.Int64List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.Int64List.displayName = 'proto.feast.types.Int64List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.DoubleList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.DoubleList.repeatedFields_, null);
};
goog.inherits(proto.feast.types.DoubleList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.DoubleList.displayName = 'proto.feast.types.DoubleList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.FloatList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.FloatList.repeatedFields_, null);
};
goog.inherits(proto.feast.types.FloatList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.FloatList.displayName = 'proto.feast.types.FloatList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.BoolList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.BoolList.repeatedFields_, null);
};
goog.inherits(proto.feast.types.BoolList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.BoolList.displayName = 'proto.feast.types.BoolList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.RepeatedValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.RepeatedValue.repeatedFields_, null);
};
goog.inherits(proto.feast.types.RepeatedValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.RepeatedValue.displayName = 'proto.feast.types.RepeatedValue';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.ValueType.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.ValueType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.ValueType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.ValueType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.ValueType}
 */
proto.feast.types.ValueType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.ValueType;
  return proto.feast.types.ValueType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.ValueType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.ValueType}
 */
proto.feast.types.ValueType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.ValueType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.ValueType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.ValueType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.ValueType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.feast.types.ValueType.Enum = {
  INVALID: 0,
  BYTES: 1,
  STRING: 2,
  INT32: 3,
  INT64: 4,
  DOUBLE: 5,
  FLOAT: 6,
  BOOL: 7,
  UNIX_TIMESTAMP: 8,
  BYTES_LIST: 11,
  STRING_LIST: 12,
  INT32_LIST: 13,
  INT64_LIST: 14,
  DOUBLE_LIST: 15,
  FLOAT_LIST: 16,
  BOOL_LIST: 17,
  UNIX_TIMESTAMP_LIST: 18,
  NULL: 19
};


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.types.Value.oneofGroups_ = [[1,2,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19]];

/**
 * @enum {number}
 */
proto.feast.types.Value.ValCase = {
  VAL_NOT_SET: 0,
  BYTES_VAL: 1,
  STRING_VAL: 2,
  INT32_VAL: 3,
  INT64_VAL: 4,
  DOUBLE_VAL: 5,
  FLOAT_VAL: 6,
  BOOL_VAL: 7,
  UNIX_TIMESTAMP_VAL: 8,
  BYTES_LIST_VAL: 11,
  STRING_LIST_VAL: 12,
  INT32_LIST_VAL: 13,
  INT64_LIST_VAL: 14,
  DOUBLE_LIST_VAL: 15,
  FLOAT_LIST_VAL: 16,
  BOOL_LIST_VAL: 17,
  UNIX_TIMESTAMP_LIST_VAL: 18,
  NULL_VAL: 19
};

/**
 * @return {proto.feast.types.Value.ValCase}
 */
proto.feast.types.Value.prototype.getValCase = function() {
  return /** @type {proto.feast.types.Value.ValCase} */(jspb.Message.computeOneofCase(this, proto.feast.types.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytesVal: msg.getBytesVal_asB64(),
    stringVal: jspb.Message.getFieldWithDefault(msg, 2, ""),
    int32Val: jspb.Message.getFieldWithDefault(msg, 3, 0),
    int64Val: jspb.Message.getFieldWithDefault(msg, 4, 0),
    doubleVal: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    floatVal: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    boolVal: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    unixTimestampVal: jspb.Message.getFieldWithDefault(msg, 8, 0),
    bytesListVal: (f = msg.getBytesListVal()) && proto.feast.types.BytesList.toObject(includeInstance, f),
    stringListVal: (f = msg.getStringListVal()) && proto.feast.types.StringList.toObject(includeInstance, f),
    int32ListVal: (f = msg.getInt32ListVal()) && proto.feast.types.Int32List.toObject(includeInstance, f),
    int64ListVal: (f = msg.getInt64ListVal()) && proto.feast.types.Int64List.toObject(includeInstance, f),
    doubleListVal: (f = msg.getDoubleListVal()) && proto.feast.types.DoubleList.toObject(includeInstance, f),
    floatListVal: (f = msg.getFloatListVal()) && proto.feast.types.FloatList.toObject(includeInstance, f),
    boolListVal: (f = msg.getBoolListVal()) && proto.feast.types.BoolList.toObject(includeInstance, f),
    unixTimestampListVal: (f = msg.getUnixTimestampListVal()) && proto.feast.types.Int64List.toObject(includeInstance, f),
    nullVal: jspb.Message.getFieldWithDefault(msg, 19, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.Value}
 */
proto.feast.types.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.Value;
  return proto.feast.types.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.Value}
 */
proto.feast.types.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesVal(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringVal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt32Val(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64Val(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleVal(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatVal(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolVal(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnixTimestampVal(value);
      break;
    case 11:
      var value = new proto.feast.types.BytesList;
      reader.readMessage(value,proto.feast.types.BytesList.deserializeBinaryFromReader);
      msg.setBytesListVal(value);
      break;
    case 12:
      var value = new proto.feast.types.StringList;
      reader.readMessage(value,proto.feast.types.StringList.deserializeBinaryFromReader);
      msg.setStringListVal(value);
      break;
    case 13:
      var value = new proto.feast.types.Int32List;
      reader.readMessage(value,proto.feast.types.Int32List.deserializeBinaryFromReader);
      msg.setInt32ListVal(value);
      break;
    case 14:
      var value = new proto.feast.types.Int64List;
      reader.readMessage(value,proto.feast.types.Int64List.deserializeBinaryFromReader);
      msg.setInt64ListVal(value);
      break;
    case 15:
      var value = new proto.feast.types.DoubleList;
      reader.readMessage(value,proto.feast.types.DoubleList.deserializeBinaryFromReader);
      msg.setDoubleListVal(value);
      break;
    case 16:
      var value = new proto.feast.types.FloatList;
      reader.readMessage(value,proto.feast.types.FloatList.deserializeBinaryFromReader);
      msg.setFloatListVal(value);
      break;
    case 17:
      var value = new proto.feast.types.BoolList;
      reader.readMessage(value,proto.feast.types.BoolList.deserializeBinaryFromReader);
      msg.setBoolListVal(value);
      break;
    case 18:
      var value = new proto.feast.types.Int64List;
      reader.readMessage(value,proto.feast.types.Int64List.deserializeBinaryFromReader);
      msg.setUnixTimestampListVal(value);
      break;
    case 19:
      var value = /** @type {!proto.feast.types.Null} */ (reader.readEnum());
      msg.setNullVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getBytesListVal();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.feast.types.BytesList.serializeBinaryToWriter
    );
  }
  f = message.getStringListVal();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.feast.types.StringList.serializeBinaryToWriter
    );
  }
  f = message.getInt32ListVal();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.feast.types.Int32List.serializeBinaryToWriter
    );
  }
  f = message.getInt64ListVal();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.feast.types.Int64List.serializeBinaryToWriter
    );
  }
  f = message.getDoubleListVal();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.feast.types.DoubleList.serializeBinaryToWriter
    );
  }
  f = message.getFloatListVal();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.feast.types.FloatList.serializeBinaryToWriter
    );
  }
  f = message.getBoolListVal();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.feast.types.BoolList.serializeBinaryToWriter
    );
  }
  f = message.getUnixTimestampListVal();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.feast.types.Int64List.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.feast.types.Null} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeEnum(
      19,
      f
    );
  }
};


/**
 * optional bytes bytes_val = 1;
 * @return {!(string|Uint8Array)}
 */
proto.feast.types.Value.prototype.getBytesVal = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytes_val = 1;
 * This is a type-conversion wrapper around `getBytesVal()`
 * @return {string}
 */
proto.feast.types.Value.prototype.getBytesVal_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesVal()));
};


/**
 * optional bytes bytes_val = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesVal()`
 * @return {!Uint8Array}
 */
proto.feast.types.Value.prototype.getBytesVal_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesVal()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setBytesVal = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearBytesVal = function() {
  return jspb.Message.setOneofField(this, 1, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasBytesVal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string string_val = 2;
 * @return {string}
 */
proto.feast.types.Value.prototype.getStringVal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setStringVal = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearStringVal = function() {
  return jspb.Message.setOneofField(this, 2, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasStringVal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 int32_val = 3;
 * @return {number}
 */
proto.feast.types.Value.prototype.getInt32Val = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setInt32Val = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearInt32Val = function() {
  return jspb.Message.setOneofField(this, 3, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasInt32Val = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 int64_val = 4;
 * @return {number}
 */
proto.feast.types.Value.prototype.getInt64Val = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setInt64Val = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearInt64Val = function() {
  return jspb.Message.setOneofField(this, 4, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasInt64Val = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double double_val = 5;
 * @return {number}
 */
proto.feast.types.Value.prototype.getDoubleVal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setDoubleVal = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearDoubleVal = function() {
  return jspb.Message.setOneofField(this, 5, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasDoubleVal = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float float_val = 6;
 * @return {number}
 */
proto.feast.types.Value.prototype.getFloatVal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setFloatVal = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearFloatVal = function() {
  return jspb.Message.setOneofField(this, 6, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasFloatVal = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool bool_val = 7;
 * @return {boolean}
 */
proto.feast.types.Value.prototype.getBoolVal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setBoolVal = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearBoolVal = function() {
  return jspb.Message.setOneofField(this, 7, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasBoolVal = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 unix_timestamp_val = 8;
 * @return {number}
 */
proto.feast.types.Value.prototype.getUnixTimestampVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setUnixTimestampVal = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearUnixTimestampVal = function() {
  return jspb.Message.setOneofField(this, 8, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasUnixTimestampVal = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional BytesList bytes_list_val = 11;
 * @return {?proto.feast.types.BytesList}
 */
proto.feast.types.Value.prototype.getBytesListVal = function() {
  return /** @type{?proto.feast.types.BytesList} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.BytesList, 11));
};


/**
 * @param {?proto.feast.types.BytesList|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setBytesListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearBytesListVal = function() {
  return this.setBytesListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasBytesListVal = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional StringList string_list_val = 12;
 * @return {?proto.feast.types.StringList}
 */
proto.feast.types.Value.prototype.getStringListVal = function() {
  return /** @type{?proto.feast.types.StringList} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.StringList, 12));
};


/**
 * @param {?proto.feast.types.StringList|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setStringListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearStringListVal = function() {
  return this.setStringListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasStringListVal = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Int32List int32_list_val = 13;
 * @return {?proto.feast.types.Int32List}
 */
proto.feast.types.Value.prototype.getInt32ListVal = function() {
  return /** @type{?proto.feast.types.Int32List} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.Int32List, 13));
};


/**
 * @param {?proto.feast.types.Int32List|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setInt32ListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearInt32ListVal = function() {
  return this.setInt32ListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasInt32ListVal = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Int64List int64_list_val = 14;
 * @return {?proto.feast.types.Int64List}
 */
proto.feast.types.Value.prototype.getInt64ListVal = function() {
  return /** @type{?proto.feast.types.Int64List} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.Int64List, 14));
};


/**
 * @param {?proto.feast.types.Int64List|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setInt64ListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearInt64ListVal = function() {
  return this.setInt64ListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasInt64ListVal = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional DoubleList double_list_val = 15;
 * @return {?proto.feast.types.DoubleList}
 */
proto.feast.types.Value.prototype.getDoubleListVal = function() {
  return /** @type{?proto.feast.types.DoubleList} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.DoubleList, 15));
};


/**
 * @param {?proto.feast.types.DoubleList|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setDoubleListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearDoubleListVal = function() {
  return this.setDoubleListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasDoubleListVal = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional FloatList float_list_val = 16;
 * @return {?proto.feast.types.FloatList}
 */
proto.feast.types.Value.prototype.getFloatListVal = function() {
  return /** @type{?proto.feast.types.FloatList} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.FloatList, 16));
};


/**
 * @param {?proto.feast.types.FloatList|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setFloatListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearFloatListVal = function() {
  return this.setFloatListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasFloatListVal = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional BoolList bool_list_val = 17;
 * @return {?proto.feast.types.BoolList}
 */
proto.feast.types.Value.prototype.getBoolListVal = function() {
  return /** @type{?proto.feast.types.BoolList} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.BoolList, 17));
};


/**
 * @param {?proto.feast.types.BoolList|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setBoolListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearBoolListVal = function() {
  return this.setBoolListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasBoolListVal = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Int64List unix_timestamp_list_val = 18;
 * @return {?proto.feast.types.Int64List}
 */
proto.feast.types.Value.prototype.getUnixTimestampListVal = function() {
  return /** @type{?proto.feast.types.Int64List} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.Int64List, 18));
};


/**
 * @param {?proto.feast.types.Int64List|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setUnixTimestampListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearUnixTimestampListVal = function() {
  return this.setUnixTimestampListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasUnixTimestampListVal = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional Null null_val = 19;
 * @return {!proto.feast.types.Null}
 */
proto.feast.types.Value.prototype.getNullVal = function() {
  return /** @type {!proto.feast.types.Null} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {!proto.feast.types.Null} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setNullVal = function(value) {
  return jspb.Message.setOneofField(this, 19, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearNullVal = function() {
  return jspb.Message.setOneofField(this, 19, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasNullVal = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.BytesList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.BytesList.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.BytesList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.BytesList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.BytesList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: msg.getValList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.BytesList}
 */
proto.feast.types.BytesList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.BytesList;
  return proto.feast.types.BytesList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.BytesList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.BytesList}
 */
proto.feast.types.BytesList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.BytesList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.BytesList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.BytesList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.BytesList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes val = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.feast.types.BytesList.prototype.getValList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes val = 1;
 * This is a type-conversion wrapper around `getValList()`
 * @return {!Array<string>}
 */
proto.feast.types.BytesList.prototype.getValList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getValList()));
};


/**
 * repeated bytes val = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValList()`
 * @return {!Array<!Uint8Array>}
 */
proto.feast.types.BytesList.prototype.getValList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getValList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.feast.types.BytesList} returns this
 */
proto.feast.types.BytesList.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.BytesList} returns this
 */
proto.feast.types.BytesList.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.BytesList} returns this
 */
proto.feast.types.BytesList.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.StringList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.StringList.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.StringList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.StringList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.StringList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.StringList}
 */
proto.feast.types.StringList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.StringList;
  return proto.feast.types.StringList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.StringList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.StringList}
 */
proto.feast.types.StringList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.StringList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.StringList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.StringList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.StringList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string val = 1;
 * @return {!Array<string>}
 */
proto.feast.types.StringList.prototype.getValList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.feast.types.StringList} returns this
 */
proto.feast.types.StringList.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.StringList} returns this
 */
proto.feast.types.StringList.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.StringList} returns this
 */
proto.feast.types.StringList.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.Int32List.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.Int32List.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.Int32List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.Int32List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Int32List.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.Int32List}
 */
proto.feast.types.Int32List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.Int32List;
  return proto.feast.types.Int32List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.Int32List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.Int32List}
 */
proto.feast.types.Int32List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVal(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.Int32List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.Int32List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.Int32List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Int32List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 val = 1;
 * @return {!Array<number>}
 */
proto.feast.types.Int32List.prototype.getValList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.feast.types.Int32List} returns this
 */
proto.feast.types.Int32List.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.Int32List} returns this
 */
proto.feast.types.Int32List.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.Int32List} returns this
 */
proto.feast.types.Int32List.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.Int64List.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.Int64List.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.Int64List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.Int64List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Int64List.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.Int64List}
 */
proto.feast.types.Int64List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.Int64List;
  return proto.feast.types.Int64List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.Int64List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.Int64List}
 */
proto.feast.types.Int64List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVal(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.Int64List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.Int64List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.Int64List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Int64List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 val = 1;
 * @return {!Array<number>}
 */
proto.feast.types.Int64List.prototype.getValList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.feast.types.Int64List} returns this
 */
proto.feast.types.Int64List.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.Int64List} returns this
 */
proto.feast.types.Int64List.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.Int64List} returns this
 */
proto.feast.types.Int64List.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.DoubleList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.DoubleList.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.DoubleList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.DoubleList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.DoubleList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.DoubleList}
 */
proto.feast.types.DoubleList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.DoubleList;
  return proto.feast.types.DoubleList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.DoubleList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.DoubleList}
 */
proto.feast.types.DoubleList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVal(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.DoubleList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.DoubleList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.DoubleList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.DoubleList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double val = 1;
 * @return {!Array<number>}
 */
proto.feast.types.DoubleList.prototype.getValList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.feast.types.DoubleList} returns this
 */
proto.feast.types.DoubleList.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.DoubleList} returns this
 */
proto.feast.types.DoubleList.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.DoubleList} returns this
 */
proto.feast.types.DoubleList.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.FloatList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.FloatList.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.FloatList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.FloatList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.FloatList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.FloatList}
 */
proto.feast.types.FloatList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.FloatList;
  return proto.feast.types.FloatList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.FloatList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.FloatList}
 */
proto.feast.types.FloatList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVal(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.FloatList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.FloatList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.FloatList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.FloatList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float val = 1;
 * @return {!Array<number>}
 */
proto.feast.types.FloatList.prototype.getValList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.feast.types.FloatList} returns this
 */
proto.feast.types.FloatList.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.FloatList} returns this
 */
proto.feast.types.FloatList.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.FloatList} returns this
 */
proto.feast.types.FloatList.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.BoolList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.BoolList.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.BoolList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.BoolList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.BoolList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: (f = jspb.Message.getRepeatedBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.BoolList}
 */
proto.feast.types.BoolList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.BoolList;
  return proto.feast.types.BoolList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.BoolList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.BoolList}
 */
proto.feast.types.BoolList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVal(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.BoolList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.BoolList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.BoolList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.BoolList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writePackedBool(
      1,
      f
    );
  }
};


/**
 * repeated bool val = 1;
 * @return {!Array<boolean>}
 */
proto.feast.types.BoolList.prototype.getValList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 1));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.feast.types.BoolList} returns this
 */
proto.feast.types.BoolList.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.BoolList} returns this
 */
proto.feast.types.BoolList.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.BoolList} returns this
 */
proto.feast.types.BoolList.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.RepeatedValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.RepeatedValue.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.RepeatedValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.RepeatedValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.RepeatedValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: jspb.Message.toObjectList(msg.getValList(),
    proto.feast.types.Value.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.RepeatedValue}
 */
proto.feast.types.RepeatedValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.RepeatedValue;
  return proto.feast.types.RepeatedValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.RepeatedValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.RepeatedValue}
 */
proto.feast.types.RepeatedValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.types.Value;
      reader.readMessage(value,proto.feast.types.Value.deserializeBinaryFromReader);
      msg.addVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.RepeatedValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.RepeatedValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.RepeatedValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.RepeatedValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.types.Value.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Value val = 1;
 * @return {!Array<!proto.feast.types.Value>}
 */
proto.feast.types.RepeatedValue.prototype.getValList = function() {
  return /** @type{!Array<!proto.feast.types.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.types.Value, 1));
};


/**
 * @param {!Array<!proto.feast.types.Value>} value
 * @return {!proto.feast.types.RepeatedValue} returns this
*/
proto.feast.types.RepeatedValue.prototype.setValList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.types.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.types.Value}
 */
proto.feast.types.RepeatedValue.prototype.addVal = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.types.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.RepeatedValue} returns this
 */
proto.feast.types.RepeatedValue.prototype.clearValList = function() {
  return this.setValList([]);
};


/**
 * @enum {number}
 */
proto.feast.types.Null = {
  NULL: 0
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureSpecV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.FeatureSpecV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureSpecV2.displayName = 'proto.feast.core.FeatureSpecV2';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureSpecV2.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureSpecV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureSpecV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureSpecV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valueType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    description: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureSpecV2}
 */
proto.feast.core.FeatureSpecV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureSpecV2;
  return proto.feast.core.FeatureSpecV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureSpecV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureSpecV2}
 */
proto.feast.core.FeatureSpecV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.feast.types.ValueType.Enum} */ (reader.readEnum());
      msg.setValueType(value);
      break;
    case 3:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureSpecV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureSpecV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureSpecV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureSpecV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValueType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.FeatureSpecV2.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureSpecV2} returns this
 */
proto.feast.core.FeatureSpecV2.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional feast.types.ValueType.Enum value_type = 2;
 * @return {!proto.feast.types.ValueType.Enum}
 */
proto.feast.core.FeatureSpecV2.prototype.getValueType = function() {
  return /** @type {!proto.feast.types.ValueType.Enum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.feast.types.ValueType.Enum} value
 * @return {!proto.feast.core.FeatureSpecV2} returns this
 */
proto.feast.core.FeatureSpecV2.prototype.setValueType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * map<string, string> tags = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.FeatureSpecV2.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.FeatureSpecV2} returns this
 */
proto.feast.core.FeatureSpecV2.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.feast.core.FeatureSpecV2.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureSpecV2} returns this
 */
proto.feast.core.FeatureSpecV2.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.DataSource.oneofGroups_);
};
goog.inherits(proto.feast.core.DataSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.displayName = 'proto.feast.core.DataSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.SourceMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.SourceMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.SourceMeta.displayName = 'proto.feast.core.DataSource.SourceMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.FileOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.FileOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.FileOptions.displayName = 'proto.feast.core.DataSource.FileOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.BigQueryOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.BigQueryOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.BigQueryOptions.displayName = 'proto.feast.core.DataSource.BigQueryOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.TrinoOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.TrinoOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.TrinoOptions.displayName = 'proto.feast.core.DataSource.TrinoOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.KafkaOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.KafkaOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.KafkaOptions.displayName = 'proto.feast.core.DataSource.KafkaOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.KinesisOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.KinesisOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.KinesisOptions.displayName = 'proto.feast.core.DataSource.KinesisOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.RedshiftOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.RedshiftOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.RedshiftOptions.displayName = 'proto.feast.core.DataSource.RedshiftOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.AthenaOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.AthenaOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.AthenaOptions.displayName = 'proto.feast.core.DataSource.AthenaOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.SnowflakeOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.SnowflakeOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.SnowflakeOptions.displayName = 'proto.feast.core.DataSource.SnowflakeOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.SparkOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.SparkOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.SparkOptions.displayName = 'proto.feast.core.DataSource.SparkOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.CustomSourceOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.CustomSourceOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.CustomSourceOptions.displayName = 'proto.feast.core.DataSource.CustomSourceOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.RequestDataOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.DataSource.RequestDataOptions.repeatedFields_, null);
};
goog.inherits(proto.feast.core.DataSource.RequestDataOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.RequestDataOptions.displayName = 'proto.feast.core.DataSource.RequestDataOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.PushOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.PushOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.PushOptions.displayName = 'proto.feast.core.DataSource.PushOptions';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.DataSource.oneofGroups_ = [[11,12,13,14,15,18,16,19,22,27,30,35]];

/**
 * @enum {number}
 */
proto.feast.core.DataSource.OptionsCase = {
  OPTIONS_NOT_SET: 0,
  FILE_OPTIONS: 11,
  BIGQUERY_OPTIONS: 12,
  KAFKA_OPTIONS: 13,
  KINESIS_OPTIONS: 14,
  REDSHIFT_OPTIONS: 15,
  REQUEST_DATA_OPTIONS: 18,
  CUSTOM_OPTIONS: 16,
  SNOWFLAKE_OPTIONS: 19,
  PUSH_OPTIONS: 22,
  SPARK_OPTIONS: 27,
  TRINO_OPTIONS: 30,
  ATHENA_OPTIONS: 35
};

/**
 * @return {proto.feast.core.DataSource.OptionsCase}
 */
proto.feast.core.DataSource.prototype.getOptionsCase = function() {
  return /** @type {proto.feast.core.DataSource.OptionsCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.DataSource.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 20, ""),
    project: jspb.Message.getFieldWithDefault(msg, 21, ""),
    description: jspb.Message.getFieldWithDefault(msg, 23, ""),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    owner: jspb.Message.getFieldWithDefault(msg, 25, ""),
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fieldMappingMap: (f = msg.getFieldMappingMap()) ? f.toObject(includeInstance, undefined) : [],
    timestampField: jspb.Message.getFieldWithDefault(msg, 3, ""),
    datePartitionColumn: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdTimestampColumn: jspb.Message.getFieldWithDefault(msg, 5, ""),
    dataSourceClassType: jspb.Message.getFieldWithDefault(msg, 17, ""),
    batchSource: (f = msg.getBatchSource()) && proto.feast.core.DataSource.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.feast.core.DataSource.SourceMeta.toObject(includeInstance, f),
    fileOptions: (f = msg.getFileOptions()) && proto.feast.core.DataSource.FileOptions.toObject(includeInstance, f),
    bigqueryOptions: (f = msg.getBigqueryOptions()) && proto.feast.core.DataSource.BigQueryOptions.toObject(includeInstance, f),
    kafkaOptions: (f = msg.getKafkaOptions()) && proto.feast.core.DataSource.KafkaOptions.toObject(includeInstance, f),
    kinesisOptions: (f = msg.getKinesisOptions()) && proto.feast.core.DataSource.KinesisOptions.toObject(includeInstance, f),
    redshiftOptions: (f = msg.getRedshiftOptions()) && proto.feast.core.DataSource.RedshiftOptions.toObject(includeInstance, f),
    requestDataOptions: (f = msg.getRequestDataOptions()) && proto.feast.core.DataSource.RequestDataOptions.toObject(includeInstance, f),
    customOptions: (f = msg.getCustomOptions()) && proto.feast.core.DataSource.CustomSourceOptions.toObject(includeInstance, f),
    snowflakeOptions: (f = msg.getSnowflakeOptions()) && proto.feast.core.DataSource.SnowflakeOptions.toObject(includeInstance, f),
    pushOptions: (f = msg.getPushOptions()) && proto.feast.core.DataSource.PushOptions.toObject(includeInstance, f),
    sparkOptions: (f = msg.getSparkOptions()) && proto.feast.core.DataSource.SparkOptions.toObject(includeInstance, f),
    trinoOptions: (f = msg.getTrinoOptions()) && proto.feast.core.DataSource.TrinoOptions.toObject(includeInstance, f),
    athenaOptions: (f = msg.getAthenaOptions()) && proto.feast.core.DataSource.AthenaOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource}
 */
proto.feast.core.DataSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource;
  return proto.feast.core.DataSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource}
 */
proto.feast.core.DataSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 24:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 1:
      var value = /** @type {!proto.feast.core.DataSource.SourceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = msg.getFieldMappingMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestampField(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatePartitionColumn(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedTimestampColumn(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataSourceClassType(value);
      break;
    case 26:
      var value = new proto.feast.core.DataSource;
      reader.readMessage(value,proto.feast.core.DataSource.deserializeBinaryFromReader);
      msg.setBatchSource(value);
      break;
    case 50:
      var value = new proto.feast.core.DataSource.SourceMeta;
      reader.readMessage(value,proto.feast.core.DataSource.SourceMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 11:
      var value = new proto.feast.core.DataSource.FileOptions;
      reader.readMessage(value,proto.feast.core.DataSource.FileOptions.deserializeBinaryFromReader);
      msg.setFileOptions(value);
      break;
    case 12:
      var value = new proto.feast.core.DataSource.BigQueryOptions;
      reader.readMessage(value,proto.feast.core.DataSource.BigQueryOptions.deserializeBinaryFromReader);
      msg.setBigqueryOptions(value);
      break;
    case 13:
      var value = new proto.feast.core.DataSource.KafkaOptions;
      reader.readMessage(value,proto.feast.core.DataSource.KafkaOptions.deserializeBinaryFromReader);
      msg.setKafkaOptions(value);
      break;
    case 14:
      var value = new proto.feast.core.DataSource.KinesisOptions;
      reader.readMessage(value,proto.feast.core.DataSource.KinesisOptions.deserializeBinaryFromReader);
      msg.setKinesisOptions(value);
      break;
    case 15:
      var value = new proto.feast.core.DataSource.RedshiftOptions;
      reader.readMessage(value,proto.feast.core.DataSource.RedshiftOptions.deserializeBinaryFromReader);
      msg.setRedshiftOptions(value);
      break;
    case 18:
      var value = new proto.feast.core.DataSource.RequestDataOptions;
      reader.readMessage(value,proto.feast.core.DataSource.RequestDataOptions.deserializeBinaryFromReader);
      msg.setRequestDataOptions(value);
      break;
    case 16:
      var value = new proto.feast.core.DataSource.CustomSourceOptions;
      reader.readMessage(value,proto.feast.core.DataSource.CustomSourceOptions.deserializeBinaryFromReader);
      msg.setCustomOptions(value);
      break;
    case 19:
      var value = new proto.feast.core.DataSource.SnowflakeOptions;
      reader.readMessage(value,proto.feast.core.DataSource.SnowflakeOptions.deserializeBinaryFromReader);
      msg.setSnowflakeOptions(value);
      break;
    case 22:
      var value = new proto.feast.core.DataSource.PushOptions;
      reader.readMessage(value,proto.feast.core.DataSource.PushOptions.deserializeBinaryFromReader);
      msg.setPushOptions(value);
      break;
    case 27:
      var value = new proto.feast.core.DataSource.SparkOptions;
      reader.readMessage(value,proto.feast.core.DataSource.SparkOptions.deserializeBinaryFromReader);
      msg.setSparkOptions(value);
      break;
    case 30:
      var value = new proto.feast.core.DataSource.TrinoOptions;
      reader.readMessage(value,proto.feast.core.DataSource.TrinoOptions.deserializeBinaryFromReader);
      msg.setTrinoOptions(value);
      break;
    case 35:
      var value = new proto.feast.core.DataSource.AthenaOptions;
      reader.readMessage(value,proto.feast.core.DataSource.AthenaOptions.deserializeBinaryFromReader);
      msg.setAthenaOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(24, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFieldMappingMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getTimestampField();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDatePartitionColumn();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedTimestampColumn();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDataSourceClassType();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getBatchSource();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.feast.core.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      50,
      f,
      proto.feast.core.DataSource.SourceMeta.serializeBinaryToWriter
    );
  }
  f = message.getFileOptions();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.feast.core.DataSource.FileOptions.serializeBinaryToWriter
    );
  }
  f = message.getBigqueryOptions();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.feast.core.DataSource.BigQueryOptions.serializeBinaryToWriter
    );
  }
  f = message.getKafkaOptions();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.feast.core.DataSource.KafkaOptions.serializeBinaryToWriter
    );
  }
  f = message.getKinesisOptions();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.feast.core.DataSource.KinesisOptions.serializeBinaryToWriter
    );
  }
  f = message.getRedshiftOptions();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.feast.core.DataSource.RedshiftOptions.serializeBinaryToWriter
    );
  }
  f = message.getRequestDataOptions();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.feast.core.DataSource.RequestDataOptions.serializeBinaryToWriter
    );
  }
  f = message.getCustomOptions();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.feast.core.DataSource.CustomSourceOptions.serializeBinaryToWriter
    );
  }
  f = message.getSnowflakeOptions();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.feast.core.DataSource.SnowflakeOptions.serializeBinaryToWriter
    );
  }
  f = message.getPushOptions();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.feast.core.DataSource.PushOptions.serializeBinaryToWriter
    );
  }
  f = message.getSparkOptions();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.feast.core.DataSource.SparkOptions.serializeBinaryToWriter
    );
  }
  f = message.getTrinoOptions();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.feast.core.DataSource.TrinoOptions.serializeBinaryToWriter
    );
  }
  f = message.getAthenaOptions();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      proto.feast.core.DataSource.AthenaOptions.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.feast.core.DataSource.SourceType = {
  INVALID: 0,
  BATCH_FILE: 1,
  BATCH_SNOWFLAKE: 8,
  BATCH_BIGQUERY: 2,
  BATCH_REDSHIFT: 5,
  STREAM_KAFKA: 3,
  STREAM_KINESIS: 4,
  CUSTOM_SOURCE: 6,
  REQUEST_SOURCE: 7,
  PUSH_SOURCE: 9,
  BATCH_TRINO: 10,
  BATCH_SPARK: 11,
  BATCH_ATHENA: 12
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.SourceMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.SourceMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.SourceMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.SourceMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    earliesteventtimestamp: (f = msg.getEarliesteventtimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    latesteventtimestamp: (f = msg.getLatesteventtimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.SourceMeta}
 */
proto.feast.core.DataSource.SourceMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.SourceMeta;
  return proto.feast.core.DataSource.SourceMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.SourceMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.SourceMeta}
 */
proto.feast.core.DataSource.SourceMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setEarliesteventtimestamp(value);
      break;
    case 2:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setLatesteventtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.SourceMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.SourceMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.SourceMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.SourceMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEarliesteventtimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLatesteventtimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp earliestEventTimestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.DataSource.SourceMeta.prototype.getEarliesteventtimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.DataSource.SourceMeta} returns this
*/
proto.feast.core.DataSource.SourceMeta.prototype.setEarliesteventtimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource.SourceMeta} returns this
 */
proto.feast.core.DataSource.SourceMeta.prototype.clearEarliesteventtimestamp = function() {
  return this.setEarliesteventtimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.SourceMeta.prototype.hasEarliesteventtimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp latestEventTimestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.DataSource.SourceMeta.prototype.getLatesteventtimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.DataSource.SourceMeta} returns this
*/
proto.feast.core.DataSource.SourceMeta.prototype.setLatesteventtimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource.SourceMeta} returns this
 */
proto.feast.core.DataSource.SourceMeta.prototype.clearLatesteventtimestamp = function() {
  return this.setLatesteventtimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.SourceMeta.prototype.hasLatesteventtimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.FileOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.FileOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.FileOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.FileOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileFormat: (f = msg.getFileFormat()) && proto.feast.core.FileFormat.toObject(includeInstance, f),
    uri: jspb.Message.getFieldWithDefault(msg, 2, ""),
    s3EndpointOverride: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.FileOptions}
 */
proto.feast.core.DataSource.FileOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.FileOptions;
  return proto.feast.core.DataSource.FileOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.FileOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.FileOptions}
 */
proto.feast.core.DataSource.FileOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.FileFormat;
      reader.readMessage(value,proto.feast.core.FileFormat.deserializeBinaryFromReader);
      msg.setFileFormat(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3EndpointOverride(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.FileOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.FileOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.FileOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.FileOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileFormat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.FileFormat.serializeBinaryToWriter
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getS3EndpointOverride();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional FileFormat file_format = 1;
 * @return {?proto.feast.core.FileFormat}
 */
proto.feast.core.DataSource.FileOptions.prototype.getFileFormat = function() {
  return /** @type{?proto.feast.core.FileFormat} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FileFormat, 1));
};


/**
 * @param {?proto.feast.core.FileFormat|undefined} value
 * @return {!proto.feast.core.DataSource.FileOptions} returns this
*/
proto.feast.core.DataSource.FileOptions.prototype.setFileFormat = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource.FileOptions} returns this
 */
proto.feast.core.DataSource.FileOptions.prototype.clearFileFormat = function() {
  return this.setFileFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.FileOptions.prototype.hasFileFormat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string uri = 2;
 * @return {string}
 */
proto.feast.core.DataSource.FileOptions.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.FileOptions} returns this
 */
proto.feast.core.DataSource.FileOptions.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string s3_endpoint_override = 3;
 * @return {string}
 */
proto.feast.core.DataSource.FileOptions.prototype.getS3EndpointOverride = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.FileOptions} returns this
 */
proto.feast.core.DataSource.FileOptions.prototype.setS3EndpointOverride = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.BigQueryOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.BigQueryOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.BigQueryOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.BigQueryOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.BigQueryOptions}
 */
proto.feast.core.DataSource.BigQueryOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.BigQueryOptions;
  return proto.feast.core.DataSource.BigQueryOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.BigQueryOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.BigQueryOptions}
 */
proto.feast.core.DataSource.BigQueryOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.BigQueryOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.BigQueryOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.BigQueryOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.BigQueryOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string table = 1;
 * @return {string}
 */
proto.feast.core.DataSource.BigQueryOptions.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.BigQueryOptions} returns this
 */
proto.feast.core.DataSource.BigQueryOptions.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.feast.core.DataSource.BigQueryOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.BigQueryOptions} returns this
 */
proto.feast.core.DataSource.BigQueryOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.TrinoOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.TrinoOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.TrinoOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.TrinoOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.TrinoOptions}
 */
proto.feast.core.DataSource.TrinoOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.TrinoOptions;
  return proto.feast.core.DataSource.TrinoOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.TrinoOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.TrinoOptions}
 */
proto.feast.core.DataSource.TrinoOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.TrinoOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.TrinoOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.TrinoOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.TrinoOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string table = 1;
 * @return {string}
 */
proto.feast.core.DataSource.TrinoOptions.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.TrinoOptions} returns this
 */
proto.feast.core.DataSource.TrinoOptions.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.feast.core.DataSource.TrinoOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.TrinoOptions} returns this
 */
proto.feast.core.DataSource.TrinoOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.KafkaOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.KafkaOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.KafkaOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    kafkaBootstrapServers: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 2, ""),
    messageFormat: (f = msg.getMessageFormat()) && proto.feast.core.StreamFormat.toObject(includeInstance, f),
    watermarkDelayThreshold: (f = msg.getWatermarkDelayThreshold()) && proto.google.protobuf.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.KafkaOptions}
 */
proto.feast.core.DataSource.KafkaOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.KafkaOptions;
  return proto.feast.core.DataSource.KafkaOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.KafkaOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.KafkaOptions}
 */
proto.feast.core.DataSource.KafkaOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKafkaBootstrapServers(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 3:
      var value = new proto.feast.core.StreamFormat;
      reader.readMessage(value,proto.feast.core.StreamFormat.deserializeBinaryFromReader);
      msg.setMessageFormat(value);
      break;
    case 4:
      var value = new proto.google.protobuf.Duration;
      reader.readMessage(value,proto.google.protobuf.Duration.deserializeBinaryFromReader);
      msg.setWatermarkDelayThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.KafkaOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.KafkaOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.KafkaOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKafkaBootstrapServers();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessageFormat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feast.core.StreamFormat.serializeBinaryToWriter
    );
  }
  f = message.getWatermarkDelayThreshold();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.google.protobuf.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string kafka_bootstrap_servers = 1;
 * @return {string}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.getKafkaBootstrapServers = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.KafkaOptions} returns this
 */
proto.feast.core.DataSource.KafkaOptions.prototype.setKafkaBootstrapServers = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string topic = 2;
 * @return {string}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.KafkaOptions} returns this
 */
proto.feast.core.DataSource.KafkaOptions.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional StreamFormat message_format = 3;
 * @return {?proto.feast.core.StreamFormat}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.getMessageFormat = function() {
  return /** @type{?proto.feast.core.StreamFormat} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.StreamFormat, 3));
};


/**
 * @param {?proto.feast.core.StreamFormat|undefined} value
 * @return {!proto.feast.core.DataSource.KafkaOptions} returns this
*/
proto.feast.core.DataSource.KafkaOptions.prototype.setMessageFormat = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource.KafkaOptions} returns this
 */
proto.feast.core.DataSource.KafkaOptions.prototype.clearMessageFormat = function() {
  return this.setMessageFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.hasMessageFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Duration watermark_delay_threshold = 4;
 * @return {?proto.google.protobuf.Duration}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.getWatermarkDelayThreshold = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Duration, 4));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.feast.core.DataSource.KafkaOptions} returns this
*/
proto.feast.core.DataSource.KafkaOptions.prototype.setWatermarkDelayThreshold = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource.KafkaOptions} returns this
 */
proto.feast.core.DataSource.KafkaOptions.prototype.clearWatermarkDelayThreshold = function() {
  return this.setWatermarkDelayThreshold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.hasWatermarkDelayThreshold = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.KinesisOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.KinesisOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.KinesisOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.KinesisOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    region: jspb.Message.getFieldWithDefault(msg, 1, ""),
    streamName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    recordFormat: (f = msg.getRecordFormat()) && proto.feast.core.StreamFormat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.KinesisOptions}
 */
proto.feast.core.DataSource.KinesisOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.KinesisOptions;
  return proto.feast.core.DataSource.KinesisOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.KinesisOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.KinesisOptions}
 */
proto.feast.core.DataSource.KinesisOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamName(value);
      break;
    case 3:
      var value = new proto.feast.core.StreamFormat;
      reader.readMessage(value,proto.feast.core.StreamFormat.deserializeBinaryFromReader);
      msg.setRecordFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.KinesisOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.KinesisOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.KinesisOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.KinesisOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStreamName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRecordFormat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feast.core.StreamFormat.serializeBinaryToWriter
    );
  }
};


/**
 * optional string region = 1;
 * @return {string}
 */
proto.feast.core.DataSource.KinesisOptions.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.KinesisOptions} returns this
 */
proto.feast.core.DataSource.KinesisOptions.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string stream_name = 2;
 * @return {string}
 */
proto.feast.core.DataSource.KinesisOptions.prototype.getStreamName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.KinesisOptions} returns this
 */
proto.feast.core.DataSource.KinesisOptions.prototype.setStreamName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional StreamFormat record_format = 3;
 * @return {?proto.feast.core.StreamFormat}
 */
proto.feast.core.DataSource.KinesisOptions.prototype.getRecordFormat = function() {
  return /** @type{?proto.feast.core.StreamFormat} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.StreamFormat, 3));
};


/**
 * @param {?proto.feast.core.StreamFormat|undefined} value
 * @return {!proto.feast.core.DataSource.KinesisOptions} returns this
*/
proto.feast.core.DataSource.KinesisOptions.prototype.setRecordFormat = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource.KinesisOptions} returns this
 */
proto.feast.core.DataSource.KinesisOptions.prototype.clearRecordFormat = function() {
  return this.setRecordFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.KinesisOptions.prototype.hasRecordFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.RedshiftOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.RedshiftOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.RedshiftOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, ""),
    schema: jspb.Message.getFieldWithDefault(msg, 3, ""),
    database: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.RedshiftOptions}
 */
proto.feast.core.DataSource.RedshiftOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.RedshiftOptions;
  return proto.feast.core.DataSource.RedshiftOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.RedshiftOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.RedshiftOptions}
 */
proto.feast.core.DataSource.RedshiftOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchema(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.RedshiftOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.RedshiftOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.RedshiftOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSchema();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDatabase();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string table = 1;
 * @return {string}
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.RedshiftOptions} returns this
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.RedshiftOptions} returns this
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string schema = 3;
 * @return {string}
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.getSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.RedshiftOptions} returns this
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.setSchema = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string database = 4;
 * @return {string}
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.getDatabase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.RedshiftOptions} returns this
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.setDatabase = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.AthenaOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.AthenaOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.AthenaOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.AthenaOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, ""),
    database: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dataSource: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.AthenaOptions}
 */
proto.feast.core.DataSource.AthenaOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.AthenaOptions;
  return proto.feast.core.DataSource.AthenaOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.AthenaOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.AthenaOptions}
 */
proto.feast.core.DataSource.AthenaOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabase(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.AthenaOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.AthenaOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.AthenaOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.AthenaOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDatabase();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDataSource();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string table = 1;
 * @return {string}
 */
proto.feast.core.DataSource.AthenaOptions.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.AthenaOptions} returns this
 */
proto.feast.core.DataSource.AthenaOptions.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.feast.core.DataSource.AthenaOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.AthenaOptions} returns this
 */
proto.feast.core.DataSource.AthenaOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string database = 3;
 * @return {string}
 */
proto.feast.core.DataSource.AthenaOptions.prototype.getDatabase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.AthenaOptions} returns this
 */
proto.feast.core.DataSource.AthenaOptions.prototype.setDatabase = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string data_source = 4;
 * @return {string}
 */
proto.feast.core.DataSource.AthenaOptions.prototype.getDataSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.AthenaOptions} returns this
 */
proto.feast.core.DataSource.AthenaOptions.prototype.setDataSource = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.SnowflakeOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.SnowflakeOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.SnowflakeOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, ""),
    schema: jspb.Message.getFieldWithDefault(msg, 3, ""),
    database: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.SnowflakeOptions}
 */
proto.feast.core.DataSource.SnowflakeOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.SnowflakeOptions;
  return proto.feast.core.DataSource.SnowflakeOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.SnowflakeOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.SnowflakeOptions}
 */
proto.feast.core.DataSource.SnowflakeOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchema(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.SnowflakeOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.SnowflakeOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.SnowflakeOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSchema();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDatabase();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string table = 1;
 * @return {string}
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SnowflakeOptions} returns this
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SnowflakeOptions} returns this
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string schema = 3;
 * @return {string}
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.getSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SnowflakeOptions} returns this
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.setSchema = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string database = 4;
 * @return {string}
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.getDatabase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SnowflakeOptions} returns this
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.setDatabase = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.SparkOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.SparkOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.SparkOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.SparkOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, ""),
    path: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fileFormat: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.SparkOptions}
 */
proto.feast.core.DataSource.SparkOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.SparkOptions;
  return proto.feast.core.DataSource.SparkOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.SparkOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.SparkOptions}
 */
proto.feast.core.DataSource.SparkOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.SparkOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.SparkOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.SparkOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.SparkOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFileFormat();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string table = 1;
 * @return {string}
 */
proto.feast.core.DataSource.SparkOptions.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SparkOptions} returns this
 */
proto.feast.core.DataSource.SparkOptions.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.feast.core.DataSource.SparkOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SparkOptions} returns this
 */
proto.feast.core.DataSource.SparkOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string path = 3;
 * @return {string}
 */
proto.feast.core.DataSource.SparkOptions.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SparkOptions} returns this
 */
proto.feast.core.DataSource.SparkOptions.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string file_format = 4;
 * @return {string}
 */
proto.feast.core.DataSource.SparkOptions.prototype.getFileFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SparkOptions} returns this
 */
proto.feast.core.DataSource.SparkOptions.prototype.setFileFormat = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.CustomSourceOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.CustomSourceOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.CustomSourceOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.CustomSourceOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    configuration: msg.getConfiguration_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.CustomSourceOptions}
 */
proto.feast.core.DataSource.CustomSourceOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.CustomSourceOptions;
  return proto.feast.core.DataSource.CustomSourceOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.CustomSourceOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.CustomSourceOptions}
 */
proto.feast.core.DataSource.CustomSourceOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.CustomSourceOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.CustomSourceOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.CustomSourceOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.CustomSourceOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfiguration_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes configuration = 1;
 * @return {!(string|Uint8Array)}
 */
proto.feast.core.DataSource.CustomSourceOptions.prototype.getConfiguration = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes configuration = 1;
 * This is a type-conversion wrapper around `getConfiguration()`
 * @return {string}
 */
proto.feast.core.DataSource.CustomSourceOptions.prototype.getConfiguration_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfiguration()));
};


/**
 * optional bytes configuration = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConfiguration()`
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.CustomSourceOptions.prototype.getConfiguration_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfiguration()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.core.DataSource.CustomSourceOptions} returns this
 */
proto.feast.core.DataSource.CustomSourceOptions.prototype.setConfiguration = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.DataSource.RequestDataOptions.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.RequestDataOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.RequestDataOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.RequestDataOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    deprecatedSchemaMap: (f = msg.getDeprecatedSchemaMap()) ? f.toObject(includeInstance, undefined) : [],
    schemaList: jspb.Message.toObjectList(msg.getSchemaList(),
    proto.feast.core.FeatureSpecV2.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.RequestDataOptions}
 */
proto.feast.core.DataSource.RequestDataOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.RequestDataOptions;
  return proto.feast.core.DataSource.RequestDataOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.RequestDataOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.RequestDataOptions}
 */
proto.feast.core.DataSource.RequestDataOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = msg.getDeprecatedSchemaMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readEnum, null, "", 0);
         });
      break;
    case 3:
      var value = new proto.feast.core.FeatureSpecV2;
      reader.readMessage(value,proto.feast.core.FeatureSpecV2.deserializeBinaryFromReader);
      msg.addSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.RequestDataOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.RequestDataOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.RequestDataOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeprecatedSchemaMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getSchemaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.feast.core.FeatureSpecV2.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, feast.types.ValueType.Enum> deprecated_schema = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.feast.types.ValueType.Enum>}
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.getDeprecatedSchemaMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.feast.types.ValueType.Enum>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.DataSource.RequestDataOptions} returns this
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.clearDeprecatedSchemaMap = function() {
  this.getDeprecatedSchemaMap().clear();
  return this;
};


/**
 * repeated FeatureSpecV2 schema = 3;
 * @return {!Array<!proto.feast.core.FeatureSpecV2>}
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.getSchemaList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureSpecV2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureSpecV2, 3));
};


/**
 * @param {!Array<!proto.feast.core.FeatureSpecV2>} value
 * @return {!proto.feast.core.DataSource.RequestDataOptions} returns this
*/
proto.feast.core.DataSource.RequestDataOptions.prototype.setSchemaList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.feast.core.FeatureSpecV2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureSpecV2}
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.addSchema = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.feast.core.FeatureSpecV2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.DataSource.RequestDataOptions} returns this
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.clearSchemaList = function() {
  return this.setSchemaList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.PushOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.PushOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.PushOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.PushOptions.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.PushOptions}
 */
proto.feast.core.DataSource.PushOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.PushOptions;
  return proto.feast.core.DataSource.PushOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.PushOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.PushOptions}
 */
proto.feast.core.DataSource.PushOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.PushOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.PushOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.PushOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.PushOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional string name = 20;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string project = 21;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string description = 23;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * map<string, string> tags = 24;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.DataSource.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 24, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};


/**
 * optional string owner = 25;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * optional SourceType type = 1;
 * @return {!proto.feast.core.DataSource.SourceType}
 */
proto.feast.core.DataSource.prototype.getType = function() {
  return /** @type {!proto.feast.core.DataSource.SourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.feast.core.DataSource.SourceType} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * map<string, string> field_mapping = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.DataSource.prototype.getFieldMappingMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearFieldMappingMap = function() {
  this.getFieldMappingMap().clear();
  return this;
};


/**
 * optional string timestamp_field = 3;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getTimestampField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setTimestampField = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string date_partition_column = 4;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getDatePartitionColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setDatePartitionColumn = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string created_timestamp_column = 5;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getCreatedTimestampColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setCreatedTimestampColumn = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string data_source_class_type = 17;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getDataSourceClassType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setDataSourceClassType = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional DataSource batch_source = 26;
 * @return {?proto.feast.core.DataSource}
 */
proto.feast.core.DataSource.prototype.getBatchSource = function() {
  return /** @type{?proto.feast.core.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource, 26));
};


/**
 * @param {?proto.feast.core.DataSource|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setBatchSource = function(value) {
  return jspb.Message.setWrapperField(this, 26, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearBatchSource = function() {
  return this.setBatchSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasBatchSource = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional SourceMeta meta = 50;
 * @return {?proto.feast.core.DataSource.SourceMeta}
 */
proto.feast.core.DataSource.prototype.getMeta = function() {
  return /** @type{?proto.feast.core.DataSource.SourceMeta} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.SourceMeta, 50));
};


/**
 * @param {?proto.feast.core.DataSource.SourceMeta|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 50, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 50) != null;
};


/**
 * optional FileOptions file_options = 11;
 * @return {?proto.feast.core.DataSource.FileOptions}
 */
proto.feast.core.DataSource.prototype.getFileOptions = function() {
  return /** @type{?proto.feast.core.DataSource.FileOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.FileOptions, 11));
};


/**
 * @param {?proto.feast.core.DataSource.FileOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setFileOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearFileOptions = function() {
  return this.setFileOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasFileOptions = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional BigQueryOptions bigquery_options = 12;
 * @return {?proto.feast.core.DataSource.BigQueryOptions}
 */
proto.feast.core.DataSource.prototype.getBigqueryOptions = function() {
  return /** @type{?proto.feast.core.DataSource.BigQueryOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.BigQueryOptions, 12));
};


/**
 * @param {?proto.feast.core.DataSource.BigQueryOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setBigqueryOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearBigqueryOptions = function() {
  return this.setBigqueryOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasBigqueryOptions = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional KafkaOptions kafka_options = 13;
 * @return {?proto.feast.core.DataSource.KafkaOptions}
 */
proto.feast.core.DataSource.prototype.getKafkaOptions = function() {
  return /** @type{?proto.feast.core.DataSource.KafkaOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.KafkaOptions, 13));
};


/**
 * @param {?proto.feast.core.DataSource.KafkaOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setKafkaOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearKafkaOptions = function() {
  return this.setKafkaOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasKafkaOptions = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional KinesisOptions kinesis_options = 14;
 * @return {?proto.feast.core.DataSource.KinesisOptions}
 */
proto.feast.core.DataSource.prototype.getKinesisOptions = function() {
  return /** @type{?proto.feast.core.DataSource.KinesisOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.KinesisOptions, 14));
};


/**
 * @param {?proto.feast.core.DataSource.KinesisOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setKinesisOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearKinesisOptions = function() {
  return this.setKinesisOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasKinesisOptions = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional RedshiftOptions redshift_options = 15;
 * @return {?proto.feast.core.DataSource.RedshiftOptions}
 */
proto.feast.core.DataSource.prototype.getRedshiftOptions = function() {
  return /** @type{?proto.feast.core.DataSource.RedshiftOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.RedshiftOptions, 15));
};


/**
 * @param {?proto.feast.core.DataSource.RedshiftOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setRedshiftOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearRedshiftOptions = function() {
  return this.setRedshiftOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasRedshiftOptions = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional RequestDataOptions request_data_options = 18;
 * @return {?proto.feast.core.DataSource.RequestDataOptions}
 */
proto.feast.core.DataSource.prototype.getRequestDataOptions = function() {
  return /** @type{?proto.feast.core.DataSource.RequestDataOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.RequestDataOptions, 18));
};


/**
 * @param {?proto.feast.core.DataSource.RequestDataOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setRequestDataOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearRequestDataOptions = function() {
  return this.setRequestDataOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasRequestDataOptions = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional CustomSourceOptions custom_options = 16;
 * @return {?proto.feast.core.DataSource.CustomSourceOptions}
 */
proto.feast.core.DataSource.prototype.getCustomOptions = function() {
  return /** @type{?proto.feast.core.DataSource.CustomSourceOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.CustomSourceOptions, 16));
};


/**
 * @param {?proto.feast.core.DataSource.CustomSourceOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setCustomOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearCustomOptions = function() {
  return this.setCustomOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasCustomOptions = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional SnowflakeOptions snowflake_options = 19;
 * @return {?proto.feast.core.DataSource.SnowflakeOptions}
 */
proto.feast.core.DataSource.prototype.getSnowflakeOptions = function() {
  return /** @type{?proto.feast.core.DataSource.SnowflakeOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.SnowflakeOptions, 19));
};


/**
 * @param {?proto.feast.core.DataSource.SnowflakeOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setSnowflakeOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearSnowflakeOptions = function() {
  return this.setSnowflakeOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasSnowflakeOptions = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional PushOptions push_options = 22;
 * @return {?proto.feast.core.DataSource.PushOptions}
 */
proto.feast.core.DataSource.prototype.getPushOptions = function() {
  return /** @type{?proto.feast.core.DataSource.PushOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.PushOptions, 22));
};


/**
 * @param {?proto.feast.core.DataSource.PushOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setPushOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearPushOptions = function() {
  return this.setPushOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasPushOptions = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional SparkOptions spark_options = 27;
 * @return {?proto.feast.core.DataSource.SparkOptions}
 */
proto.feast.core.DataSource.prototype.getSparkOptions = function() {
  return /** @type{?proto.feast.core.DataSource.SparkOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.SparkOptions, 27));
};


/**
 * @param {?proto.feast.core.DataSource.SparkOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setSparkOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 27, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearSparkOptions = function() {
  return this.setSparkOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasSparkOptions = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional TrinoOptions trino_options = 30;
 * @return {?proto.feast.core.DataSource.TrinoOptions}
 */
proto.feast.core.DataSource.prototype.getTrinoOptions = function() {
  return /** @type{?proto.feast.core.DataSource.TrinoOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.TrinoOptions, 30));
};


/**
 * @param {?proto.feast.core.DataSource.TrinoOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setTrinoOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 30, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearTrinoOptions = function() {
  return this.setTrinoOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasTrinoOptions = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional AthenaOptions athena_options = 35;
 * @return {?proto.feast.core.DataSource.AthenaOptions}
 */
proto.feast.core.DataSource.prototype.getAthenaOptions = function() {
  return /** @type{?proto.feast.core.DataSource.AthenaOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.AthenaOptions, 35));
};


/**
 * @param {?proto.feast.core.DataSource.AthenaOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setAthenaOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 35, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearAthenaOptions = function() {
  return this.setAthenaOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasAthenaOptions = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DatastoreTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DatastoreTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DatastoreTable.displayName = 'proto.feast.core.DatastoreTable';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DatastoreTable.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DatastoreTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DatastoreTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DatastoreTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    projectId: (f = msg.getProjectId()) && proto.google.protobuf.StringValue.toObject(includeInstance, f),
    namespace: (f = msg.getNamespace()) && proto.google.protobuf.StringValue.toObject(includeInstance, f),
    database: (f = msg.getDatabase()) && proto.google.protobuf.StringValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DatastoreTable}
 */
proto.feast.core.DatastoreTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DatastoreTable;
  return proto.feast.core.DatastoreTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DatastoreTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DatastoreTable}
 */
proto.feast.core.DatastoreTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.google.protobuf.StringValue;
      reader.readMessage(value,proto.google.protobuf.StringValue.deserializeBinaryFromReader);
      msg.setProjectId(value);
      break;
    case 4:
      var value = new proto.google.protobuf.StringValue;
      reader.readMessage(value,proto.google.protobuf.StringValue.deserializeBinaryFromReader);
      msg.setNamespace(value);
      break;
    case 5:
      var value = new proto.google.protobuf.StringValue;
      reader.readMessage(value,proto.google.protobuf.StringValue.deserializeBinaryFromReader);
      msg.setDatabase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DatastoreTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DatastoreTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DatastoreTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DatastoreTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProjectId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.google.protobuf.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getNamespace();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.google.protobuf.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getDatabase();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.google.protobuf.StringValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.core.DatastoreTable.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DatastoreTable} returns this
 */
proto.feast.core.DatastoreTable.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.feast.core.DatastoreTable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DatastoreTable} returns this
 */
proto.feast.core.DatastoreTable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.StringValue project_id = 3;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.feast.core.DatastoreTable.prototype.getProjectId = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.StringValue, 3));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.feast.core.DatastoreTable} returns this
*/
proto.feast.core.DatastoreTable.prototype.setProjectId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DatastoreTable} returns this
 */
proto.feast.core.DatastoreTable.prototype.clearProjectId = function() {
  return this.setProjectId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DatastoreTable.prototype.hasProjectId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.StringValue namespace = 4;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.feast.core.DatastoreTable.prototype.getNamespace = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.StringValue, 4));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.feast.core.DatastoreTable} returns this
*/
proto.feast.core.DatastoreTable.prototype.setNamespace = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DatastoreTable} returns this
 */
proto.feast.core.DatastoreTable.prototype.clearNamespace = function() {
  return this.setNamespace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DatastoreTable.prototype.hasNamespace = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.StringValue database = 5;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.feast.core.DatastoreTable.prototype.getDatabase = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.StringValue, 5));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.feast.core.DatastoreTable} returns this
*/
proto.feast.core.DatastoreTable.prototype.setDatabase = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DatastoreTable} returns this
 */
proto.feast.core.DatastoreTable.prototype.clearDatabase = function() {
  return this.setDatabase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DatastoreTable.prototype.hasDatabase = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DynamoDBTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DynamoDBTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DynamoDBTable.displayName = 'proto.feast.core.DynamoDBTable';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DynamoDBTable.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DynamoDBTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DynamoDBTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DynamoDBTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    region: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DynamoDBTable}
 */
proto.feast.core.DynamoDBTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DynamoDBTable;
  return proto.feast.core.DynamoDBTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DynamoDBTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DynamoDBTable}
 */
proto.feast.core.DynamoDBTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DynamoDBTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DynamoDBTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DynamoDBTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DynamoDBTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.DynamoDBTable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DynamoDBTable} returns this
 */
proto.feast.core.DynamoDBTable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string region = 2;
 * @return {string}
 */
proto.feast.core.DynamoDBTable.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DynamoDBTable} returns this
 */
proto.feast.core.DynamoDBTable.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.Entity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.Entity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.Entity.displayName = 'proto.feast.core.Entity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.EntitySpecV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.EntitySpecV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.EntitySpecV2.displayName = 'proto.feast.core.EntitySpecV2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.EntityMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.EntityMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.EntityMeta.displayName = 'proto.feast.core.EntityMeta';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.Entity.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.Entity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.Entity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Entity.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.feast.core.EntitySpecV2.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.feast.core.EntityMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.Entity}
 */
proto.feast.core.Entity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.Entity;
  return proto.feast.core.Entity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.Entity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.Entity}
 */
proto.feast.core.Entity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.EntitySpecV2;
      reader.readMessage(value,proto.feast.core.EntitySpecV2.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.feast.core.EntityMeta;
      reader.readMessage(value,proto.feast.core.EntityMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.Entity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.Entity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.Entity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Entity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.EntitySpecV2.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.EntityMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional EntitySpecV2 spec = 1;
 * @return {?proto.feast.core.EntitySpecV2}
 */
proto.feast.core.Entity.prototype.getSpec = function() {
  return /** @type{?proto.feast.core.EntitySpecV2} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.EntitySpecV2, 1));
};


/**
 * @param {?proto.feast.core.EntitySpecV2|undefined} value
 * @return {!proto.feast.core.Entity} returns this
*/
proto.feast.core.Entity.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.Entity} returns this
 */
proto.feast.core.Entity.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.Entity.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EntityMeta meta = 2;
 * @return {?proto.feast.core.EntityMeta}
 */
proto.feast.core.Entity.prototype.getMeta = function() {
  return /** @type{?proto.feast.core.EntityMeta} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.EntityMeta, 2));
};


/**
 * @param {?proto.feast.core.EntityMeta|undefined} value
 * @return {!proto.feast.core.Entity} returns this
*/
proto.feast.core.Entity.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.Entity} returns this
 */
proto.feast.core.Entity.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.Entity.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.EntitySpecV2.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.EntitySpecV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.EntitySpecV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.EntitySpecV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 9, ""),
    valueType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    joinKey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    owner: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.EntitySpecV2}
 */
proto.feast.core.EntitySpecV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.EntitySpecV2;
  return proto.feast.core.EntitySpecV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.EntitySpecV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.EntitySpecV2}
 */
proto.feast.core.EntitySpecV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {!proto.feast.types.ValueType.Enum} */ (reader.readEnum());
      msg.setValueType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setJoinKey(value);
      break;
    case 8:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.EntitySpecV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.EntitySpecV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.EntitySpecV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.EntitySpecV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getValueType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getJoinKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.EntitySpecV2.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.EntitySpecV2} returns this
 */
proto.feast.core.EntitySpecV2.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 9;
 * @return {string}
 */
proto.feast.core.EntitySpecV2.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.EntitySpecV2} returns this
 */
proto.feast.core.EntitySpecV2.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional feast.types.ValueType.Enum value_type = 2;
 * @return {!proto.feast.types.ValueType.Enum}
 */
proto.feast.core.EntitySpecV2.prototype.getValueType = function() {
  return /** @type {!proto.feast.types.ValueType.Enum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.feast.types.ValueType.Enum} value
 * @return {!proto.feast.core.EntitySpecV2} returns this
 */
proto.feast.core.EntitySpecV2.prototype.setValueType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.feast.core.EntitySpecV2.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.EntitySpecV2} returns this
 */
proto.feast.core.EntitySpecV2.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string join_key = 4;
 * @return {string}
 */
proto.feast.core.EntitySpecV2.prototype.getJoinKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.EntitySpecV2} returns this
 */
proto.feast.core.EntitySpecV2.prototype.setJoinKey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, string> tags = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.EntitySpecV2.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.EntitySpecV2} returns this
 */
proto.feast.core.EntitySpecV2.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};


/**
 * optional string owner = 10;
 * @return {string}
 */
proto.feast.core.EntitySpecV2.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.EntitySpecV2} returns this
 */
proto.feast.core.EntitySpecV2.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.EntityMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.EntityMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.EntityMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.EntityMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdTimestamp: (f = msg.getCreatedTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    lastUpdatedTimestamp: (f = msg.getLastUpdatedTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.EntityMeta}
 */
proto.feast.core.EntityMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.EntityMeta;
  return proto.feast.core.EntityMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.EntityMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.EntityMeta}
 */
proto.feast.core.EntityMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedTimestamp(value);
      break;
    case 2:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdatedTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.EntityMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.EntityMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.EntityMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.EntityMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp created_timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.EntityMeta.prototype.getCreatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.EntityMeta} returns this
*/
proto.feast.core.EntityMeta.prototype.setCreatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.EntityMeta} returns this
 */
proto.feast.core.EntityMeta.prototype.clearCreatedTimestamp = function() {
  return this.setCreatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.EntityMeta.prototype.hasCreatedTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp last_updated_timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.EntityMeta.prototype.getLastUpdatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.EntityMeta} returns this
*/
proto.feast.core.EntityMeta.prototype.setLastUpdatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.EntityMeta} returns this
 */
proto.feast.core.EntityMeta.prototype.clearLastUpdatedTimestamp = function() {
  return this.setLastUpdatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.EntityMeta.prototype.hasLastUpdatedTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureViewProjection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.FeatureViewProjection.repeatedFields_, null);
};
goog.inherits(proto.feast.core.FeatureViewProjection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureViewProjection.displayName = 'proto.feast.core.FeatureViewProjection';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.FeatureViewProjection.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureViewProjection.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureViewProjection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureViewProjection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureViewProjection.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureViewName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    featureViewNameAlias: jspb.Message.getFieldWithDefault(msg, 3, ""),
    featureColumnsList: jspb.Message.toObjectList(msg.getFeatureColumnsList(),
    proto.feast.core.FeatureSpecV2.toObject, includeInstance),
    joinKeyMapMap: (f = msg.getJoinKeyMapMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureViewProjection}
 */
proto.feast.core.FeatureViewProjection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureViewProjection;
  return proto.feast.core.FeatureViewProjection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureViewProjection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureViewProjection}
 */
proto.feast.core.FeatureViewProjection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureViewName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureViewNameAlias(value);
      break;
    case 2:
      var value = new proto.feast.core.FeatureSpecV2;
      reader.readMessage(value,proto.feast.core.FeatureSpecV2.deserializeBinaryFromReader);
      msg.addFeatureColumns(value);
      break;
    case 4:
      var value = msg.getJoinKeyMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureViewProjection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureViewProjection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureViewProjection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureViewProjection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureViewName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeatureViewNameAlias();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFeatureColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.feast.core.FeatureSpecV2.serializeBinaryToWriter
    );
  }
  f = message.getJoinKeyMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string feature_view_name = 1;
 * @return {string}
 */
proto.feast.core.FeatureViewProjection.prototype.getFeatureViewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureViewProjection} returns this
 */
proto.feast.core.FeatureViewProjection.prototype.setFeatureViewName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string feature_view_name_alias = 3;
 * @return {string}
 */
proto.feast.core.FeatureViewProjection.prototype.getFeatureViewNameAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureViewProjection} returns this
 */
proto.feast.core.FeatureViewProjection.prototype.setFeatureViewNameAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated FeatureSpecV2 feature_columns = 2;
 * @return {!Array<!proto.feast.core.FeatureSpecV2>}
 */
proto.feast.core.FeatureViewProjection.prototype.getFeatureColumnsList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureSpecV2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureSpecV2, 2));
};


/**
 * @param {!Array<!proto.feast.core.FeatureSpecV2>} value
 * @return {!proto.feast.core.FeatureViewProjection} returns this
*/
proto.feast.core.FeatureViewProjection.prototype.setFeatureColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.feast.core.FeatureSpecV2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureSpecV2}
 */
proto.feast.core.FeatureViewProjection.prototype.addFeatureColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.feast.core.FeatureSpecV2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.FeatureViewProjection} returns this
 */
proto.feast.core.FeatureViewProjection.prototype.clearFeatureColumnsList = function() {
  return this.setFeatureColumnsList([]);
};


/**
 * map<string, string> join_key_map = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.FeatureViewProjection.prototype.getJoinKeyMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.FeatureViewProjection} returns this
 */
proto.feast.core.FeatureViewProjection.prototype.clearJoinKeyMapMap = function() {
  this.getJoinKeyMapMap().clear();
  return this;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.FeatureService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureService.displayName = 'proto.feast.core.FeatureService';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureServiceSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.FeatureServiceSpec.repeatedFields_, null);
};
goog.inherits(proto.feast.core.FeatureServiceSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureServiceSpec.displayName = 'proto.feast.core.FeatureServiceSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureServiceMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.FeatureServiceMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureServiceMeta.displayName = 'proto.feast.core.FeatureServiceMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.LoggingConfig.oneofGroups_);
};
goog.inherits(proto.feast.core.LoggingConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.displayName = 'proto.feast.core.LoggingConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig.FileDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.LoggingConfig.FileDestination.repeatedFields_, null);
};
goog.inherits(proto.feast.core.LoggingConfig.FileDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.FileDestination.displayName = 'proto.feast.core.LoggingConfig.FileDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig.BigQueryDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.LoggingConfig.BigQueryDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.BigQueryDestination.displayName = 'proto.feast.core.LoggingConfig.BigQueryDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig.RedshiftDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.LoggingConfig.RedshiftDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.RedshiftDestination.displayName = 'proto.feast.core.LoggingConfig.RedshiftDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig.AthenaDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.LoggingConfig.AthenaDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.AthenaDestination.displayName = 'proto.feast.core.LoggingConfig.AthenaDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig.SnowflakeDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.LoggingConfig.SnowflakeDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.SnowflakeDestination.displayName = 'proto.feast.core.LoggingConfig.SnowflakeDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig.CustomDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.LoggingConfig.CustomDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.CustomDestination.displayName = 'proto.feast.core.LoggingConfig.CustomDestination';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureService.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureService.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.feast.core.FeatureServiceSpec.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.feast.core.FeatureServiceMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureService}
 */
proto.feast.core.FeatureService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureService;
  return proto.feast.core.FeatureService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureService}
 */
proto.feast.core.FeatureService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.FeatureServiceSpec;
      reader.readMessage(value,proto.feast.core.FeatureServiceSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.feast.core.FeatureServiceMeta;
      reader.readMessage(value,proto.feast.core.FeatureServiceMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.FeatureServiceSpec.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.FeatureServiceMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeatureServiceSpec spec = 1;
 * @return {?proto.feast.core.FeatureServiceSpec}
 */
proto.feast.core.FeatureService.prototype.getSpec = function() {
  return /** @type{?proto.feast.core.FeatureServiceSpec} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureServiceSpec, 1));
};


/**
 * @param {?proto.feast.core.FeatureServiceSpec|undefined} value
 * @return {!proto.feast.core.FeatureService} returns this
*/
proto.feast.core.FeatureService.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureService} returns this
 */
proto.feast.core.FeatureService.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureService.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FeatureServiceMeta meta = 2;
 * @return {?proto.feast.core.FeatureServiceMeta}
 */
proto.feast.core.FeatureService.prototype.getMeta = function() {
  return /** @type{?proto.feast.core.FeatureServiceMeta} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureServiceMeta, 2));
};


/**
 * @param {?proto.feast.core.FeatureServiceMeta|undefined} value
 * @return {!proto.feast.core.FeatureService} returns this
*/
proto.feast.core.FeatureService.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureService} returns this
 */
proto.feast.core.FeatureService.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureService.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.FeatureServiceSpec.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureServiceSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureServiceSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureServiceSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureServiceSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto.feast.core.FeatureViewProjection.toObject, includeInstance),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 6, ""),
    loggingConfig: (f = msg.getLoggingConfig()) && proto.feast.core.LoggingConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureServiceSpec}
 */
proto.feast.core.FeatureServiceSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureServiceSpec;
  return proto.feast.core.FeatureServiceSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureServiceSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureServiceSpec}
 */
proto.feast.core.FeatureServiceSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = new proto.feast.core.FeatureViewProjection;
      reader.readMessage(value,proto.feast.core.FeatureViewProjection.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 4:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 7:
      var value = new proto.feast.core.LoggingConfig;
      reader.readMessage(value,proto.feast.core.LoggingConfig.deserializeBinaryFromReader);
      msg.setLoggingConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureServiceSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureServiceSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureServiceSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureServiceSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.feast.core.FeatureViewProjection.serializeBinaryToWriter
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLoggingConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.feast.core.LoggingConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.FeatureServiceSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.core.FeatureServiceSpec.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated FeatureViewProjection features = 3;
 * @return {!Array<!proto.feast.core.FeatureViewProjection>}
 */
proto.feast.core.FeatureServiceSpec.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureViewProjection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureViewProjection, 3));
};


/**
 * @param {!Array<!proto.feast.core.FeatureViewProjection>} value
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
*/
proto.feast.core.FeatureServiceSpec.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.feast.core.FeatureViewProjection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureViewProjection}
 */
proto.feast.core.FeatureServiceSpec.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.feast.core.FeatureViewProjection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * map<string, string> tags = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.FeatureServiceSpec.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.feast.core.FeatureServiceSpec.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string owner = 6;
 * @return {string}
 */
proto.feast.core.FeatureServiceSpec.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional LoggingConfig logging_config = 7;
 * @return {?proto.feast.core.LoggingConfig}
 */
proto.feast.core.FeatureServiceSpec.prototype.getLoggingConfig = function() {
  return /** @type{?proto.feast.core.LoggingConfig} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig, 7));
};


/**
 * @param {?proto.feast.core.LoggingConfig|undefined} value
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
*/
proto.feast.core.FeatureServiceSpec.prototype.setLoggingConfig = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.clearLoggingConfig = function() {
  return this.setLoggingConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureServiceSpec.prototype.hasLoggingConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureServiceMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureServiceMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureServiceMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureServiceMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdTimestamp: (f = msg.getCreatedTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    lastUpdatedTimestamp: (f = msg.getLastUpdatedTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureServiceMeta}
 */
proto.feast.core.FeatureServiceMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureServiceMeta;
  return proto.feast.core.FeatureServiceMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureServiceMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureServiceMeta}
 */
proto.feast.core.FeatureServiceMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedTimestamp(value);
      break;
    case 2:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdatedTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureServiceMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureServiceMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureServiceMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureServiceMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp created_timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.FeatureServiceMeta.prototype.getCreatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.FeatureServiceMeta} returns this
*/
proto.feast.core.FeatureServiceMeta.prototype.setCreatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureServiceMeta} returns this
 */
proto.feast.core.FeatureServiceMeta.prototype.clearCreatedTimestamp = function() {
  return this.setCreatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureServiceMeta.prototype.hasCreatedTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp last_updated_timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.FeatureServiceMeta.prototype.getLastUpdatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.FeatureServiceMeta} returns this
*/
proto.feast.core.FeatureServiceMeta.prototype.setLastUpdatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureServiceMeta} returns this
 */
proto.feast.core.FeatureServiceMeta.prototype.clearLastUpdatedTimestamp = function() {
  return this.setLastUpdatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureServiceMeta.prototype.hasLastUpdatedTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.LoggingConfig.oneofGroups_ = [[3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.feast.core.LoggingConfig.DestinationCase = {
  DESTINATION_NOT_SET: 0,
  FILE_DESTINATION: 3,
  BIGQUERY_DESTINATION: 4,
  REDSHIFT_DESTINATION: 5,
  SNOWFLAKE_DESTINATION: 6,
  CUSTOM_DESTINATION: 7,
  ATHENA_DESTINATION: 8
};

/**
 * @return {proto.feast.core.LoggingConfig.DestinationCase}
 */
proto.feast.core.LoggingConfig.prototype.getDestinationCase = function() {
  return /** @type {proto.feast.core.LoggingConfig.DestinationCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.LoggingConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    sampleRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    fileDestination: (f = msg.getFileDestination()) && proto.feast.core.LoggingConfig.FileDestination.toObject(includeInstance, f),
    bigqueryDestination: (f = msg.getBigqueryDestination()) && proto.feast.core.LoggingConfig.BigQueryDestination.toObject(includeInstance, f),
    redshiftDestination: (f = msg.getRedshiftDestination()) && proto.feast.core.LoggingConfig.RedshiftDestination.toObject(includeInstance, f),
    snowflakeDestination: (f = msg.getSnowflakeDestination()) && proto.feast.core.LoggingConfig.SnowflakeDestination.toObject(includeInstance, f),
    customDestination: (f = msg.getCustomDestination()) && proto.feast.core.LoggingConfig.CustomDestination.toObject(includeInstance, f),
    athenaDestination: (f = msg.getAthenaDestination()) && proto.feast.core.LoggingConfig.AthenaDestination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig}
 */
proto.feast.core.LoggingConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig;
  return proto.feast.core.LoggingConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig}
 */
proto.feast.core.LoggingConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSampleRate(value);
      break;
    case 3:
      var value = new proto.feast.core.LoggingConfig.FileDestination;
      reader.readMessage(value,proto.feast.core.LoggingConfig.FileDestination.deserializeBinaryFromReader);
      msg.setFileDestination(value);
      break;
    case 4:
      var value = new proto.feast.core.LoggingConfig.BigQueryDestination;
      reader.readMessage(value,proto.feast.core.LoggingConfig.BigQueryDestination.deserializeBinaryFromReader);
      msg.setBigqueryDestination(value);
      break;
    case 5:
      var value = new proto.feast.core.LoggingConfig.RedshiftDestination;
      reader.readMessage(value,proto.feast.core.LoggingConfig.RedshiftDestination.deserializeBinaryFromReader);
      msg.setRedshiftDestination(value);
      break;
    case 6:
      var value = new proto.feast.core.LoggingConfig.SnowflakeDestination;
      reader.readMessage(value,proto.feast.core.LoggingConfig.SnowflakeDestination.deserializeBinaryFromReader);
      msg.setSnowflakeDestination(value);
      break;
    case 7:
      var value = new proto.feast.core.LoggingConfig.CustomDestination;
      reader.readMessage(value,proto.feast.core.LoggingConfig.CustomDestination.deserializeBinaryFromReader);
      msg.setCustomDestination(value);
      break;
    case 8:
      var value = new proto.feast.core.LoggingConfig.AthenaDestination;
      reader.readMessage(value,proto.feast.core.LoggingConfig.AthenaDestination.deserializeBinaryFromReader);
      msg.setAthenaDestination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSampleRate();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getFileDestination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feast.core.LoggingConfig.FileDestination.serializeBinaryToWriter
    );
  }
  f = message.getBigqueryDestination();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.feast.core.LoggingConfig.BigQueryDestination.serializeBinaryToWriter
    );
  }
  f = message.getRedshiftDestination();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.feast.core.LoggingConfig.RedshiftDestination.serializeBinaryToWriter
    );
  }
  f = message.getSnowflakeDestination();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.feast.core.LoggingConfig.SnowflakeDestination.serializeBinaryToWriter
    );
  }
  f = message.getCustomDestination();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.feast.core.LoggingConfig.CustomDestination.serializeBinaryToWriter
    );
  }
  f = message.getAthenaDestination();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.feast.core.LoggingConfig.AthenaDestination.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.LoggingConfig.FileDestination.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.FileDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig.FileDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.FileDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    s3EndpointOverride: jspb.Message.getFieldWithDefault(msg, 2, ""),
    partitionByList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig.FileDestination}
 */
proto.feast.core.LoggingConfig.FileDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig.FileDestination;
  return proto.feast.core.LoggingConfig.FileDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig.FileDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig.FileDestination}
 */
proto.feast.core.LoggingConfig.FileDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3EndpointOverride(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPartitionBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.FileDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig.FileDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.FileDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getS3EndpointOverride();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPartitionByList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.FileDestination} returns this
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string s3_endpoint_override = 2;
 * @return {string}
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.getS3EndpointOverride = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.FileDestination} returns this
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.setS3EndpointOverride = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string partition_by = 3;
 * @return {!Array<string>}
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.getPartitionByList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.feast.core.LoggingConfig.FileDestination} returns this
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.setPartitionByList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.feast.core.LoggingConfig.FileDestination} returns this
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.addPartitionBy = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.LoggingConfig.FileDestination} returns this
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.clearPartitionByList = function() {
  return this.setPartitionByList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.BigQueryDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.BigQueryDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig.BigQueryDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.BigQueryDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableRef: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig.BigQueryDestination}
 */
proto.feast.core.LoggingConfig.BigQueryDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig.BigQueryDestination;
  return proto.feast.core.LoggingConfig.BigQueryDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig.BigQueryDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig.BigQueryDestination}
 */
proto.feast.core.LoggingConfig.BigQueryDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.BigQueryDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.BigQueryDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig.BigQueryDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.BigQueryDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_ref = 1;
 * @return {string}
 */
proto.feast.core.LoggingConfig.BigQueryDestination.prototype.getTableRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.BigQueryDestination} returns this
 */
proto.feast.core.LoggingConfig.BigQueryDestination.prototype.setTableRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.RedshiftDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.RedshiftDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig.RedshiftDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.RedshiftDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig.RedshiftDestination}
 */
proto.feast.core.LoggingConfig.RedshiftDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig.RedshiftDestination;
  return proto.feast.core.LoggingConfig.RedshiftDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig.RedshiftDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig.RedshiftDestination}
 */
proto.feast.core.LoggingConfig.RedshiftDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.RedshiftDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.RedshiftDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig.RedshiftDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.RedshiftDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.feast.core.LoggingConfig.RedshiftDestination.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.RedshiftDestination} returns this
 */
proto.feast.core.LoggingConfig.RedshiftDestination.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.AthenaDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.AthenaDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig.AthenaDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.AthenaDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig.AthenaDestination}
 */
proto.feast.core.LoggingConfig.AthenaDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig.AthenaDestination;
  return proto.feast.core.LoggingConfig.AthenaDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig.AthenaDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig.AthenaDestination}
 */
proto.feast.core.LoggingConfig.AthenaDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.AthenaDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.AthenaDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig.AthenaDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.AthenaDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.feast.core.LoggingConfig.AthenaDestination.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.AthenaDestination} returns this
 */
proto.feast.core.LoggingConfig.AthenaDestination.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.SnowflakeDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig.SnowflakeDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig.SnowflakeDestination}
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig.SnowflakeDestination;
  return proto.feast.core.LoggingConfig.SnowflakeDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig.SnowflakeDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig.SnowflakeDestination}
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.SnowflakeDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig.SnowflakeDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.SnowflakeDestination} returns this
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.CustomDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.CustomDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig.CustomDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.CustomDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, ""),
    configMap: (f = msg.getConfigMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig.CustomDestination}
 */
proto.feast.core.LoggingConfig.CustomDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig.CustomDestination;
  return proto.feast.core.LoggingConfig.CustomDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig.CustomDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig.CustomDestination}
 */
proto.feast.core.LoggingConfig.CustomDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 2:
      var value = msg.getConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.CustomDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.CustomDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig.CustomDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.CustomDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string kind = 1;
 * @return {string}
 */
proto.feast.core.LoggingConfig.CustomDestination.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.CustomDestination} returns this
 */
proto.feast.core.LoggingConfig.CustomDestination.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> config = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.LoggingConfig.CustomDestination.prototype.getConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.LoggingConfig.CustomDestination} returns this
 */
proto.feast.core.LoggingConfig.CustomDestination.prototype.clearConfigMap = function() {
  this.getConfigMap().clear();
  return this;
};


/**
 * optional float sample_rate = 1;
 * @return {number}
 */
proto.feast.core.LoggingConfig.prototype.getSampleRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.setSampleRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional FileDestination file_destination = 3;
 * @return {?proto.feast.core.LoggingConfig.FileDestination}
 */
proto.feast.core.LoggingConfig.prototype.getFileDestination = function() {
  return /** @type{?proto.feast.core.LoggingConfig.FileDestination} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig.FileDestination, 3));
};


/**
 * @param {?proto.feast.core.LoggingConfig.FileDestination|undefined} value
 * @return {!proto.feast.core.LoggingConfig} returns this
*/
proto.feast.core.LoggingConfig.prototype.setFileDestination = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.feast.core.LoggingConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.clearFileDestination = function() {
  return this.setFileDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.LoggingConfig.prototype.hasFileDestination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BigQueryDestination bigquery_destination = 4;
 * @return {?proto.feast.core.LoggingConfig.BigQueryDestination}
 */
proto.feast.core.LoggingConfig.prototype.getBigqueryDestination = function() {
  return /** @type{?proto.feast.core.LoggingConfig.BigQueryDestination} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig.BigQueryDestination, 4));
};


/**
 * @param {?proto.feast.core.LoggingConfig.BigQueryDestination|undefined} value
 * @return {!proto.feast.core.LoggingConfig} returns this
*/
proto.feast.core.LoggingConfig.prototype.setBigqueryDestination = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.feast.core.LoggingConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.clearBigqueryDestination = function() {
  return this.setBigqueryDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.LoggingConfig.prototype.hasBigqueryDestination = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RedshiftDestination redshift_destination = 5;
 * @return {?proto.feast.core.LoggingConfig.RedshiftDestination}
 */
proto.feast.core.LoggingConfig.prototype.getRedshiftDestination = function() {
  return /** @type{?proto.feast.core.LoggingConfig.RedshiftDestination} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig.RedshiftDestination, 5));
};


/**
 * @param {?proto.feast.core.LoggingConfig.RedshiftDestination|undefined} value
 * @return {!proto.feast.core.LoggingConfig} returns this
*/
proto.feast.core.LoggingConfig.prototype.setRedshiftDestination = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.feast.core.LoggingConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.clearRedshiftDestination = function() {
  return this.setRedshiftDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.LoggingConfig.prototype.hasRedshiftDestination = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SnowflakeDestination snowflake_destination = 6;
 * @return {?proto.feast.core.LoggingConfig.SnowflakeDestination}
 */
proto.feast.core.LoggingConfig.prototype.getSnowflakeDestination = function() {
  return /** @type{?proto.feast.core.LoggingConfig.SnowflakeDestination} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig.SnowflakeDestination, 6));
};


/**
 * @param {?proto.feast.core.LoggingConfig.SnowflakeDestination|undefined} value
 * @return {!proto.feast.core.LoggingConfig} returns this
*/
proto.feast.core.LoggingConfig.prototype.setSnowflakeDestination = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.feast.core.LoggingConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.clearSnowflakeDestination = function() {
  return this.setSnowflakeDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.LoggingConfig.prototype.hasSnowflakeDestination = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CustomDestination custom_destination = 7;
 * @return {?proto.feast.core.LoggingConfig.CustomDestination}
 */
proto.feast.core.LoggingConfig.prototype.getCustomDestination = function() {
  return /** @type{?proto.feast.core.LoggingConfig.CustomDestination} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig.CustomDestination, 7));
};


/**
 * @param {?proto.feast.core.LoggingConfig.CustomDestination|undefined} value
 * @return {!proto.feast.core.LoggingConfig} returns this
*/
proto.feast.core.LoggingConfig.prototype.setCustomDestination = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.feast.core.LoggingConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.clearCustomDestination = function() {
  return this.setCustomDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.LoggingConfig.prototype.hasCustomDestination = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional AthenaDestination athena_destination = 8;
 * @return {?proto.feast.core.LoggingConfig.AthenaDestination}
 */
proto.feast.core.LoggingConfig.prototype.getAthenaDestination = function() {
  return /** @type{?proto.feast.core.LoggingConfig.AthenaDestination} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig.AthenaDestination, 8));
};


/**
 * @param {?proto.feast.core.LoggingConfig.AthenaDestination|undefined} value
 * @return {!proto.feast.core.LoggingConfig} returns this
*/
proto.feast.core.LoggingConfig.prototype.setAthenaDestination = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.feast.core.LoggingConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.clearAthenaDestination = function() {
  return this.setAthenaDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.LoggingConfig.prototype.hasAthenaDestination = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.FeatureTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureTable.displayName = 'proto.feast.core.FeatureTable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureTableSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.FeatureTableSpec.repeatedFields_, null);
};
goog.inherits(proto.feast.core.FeatureTableSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureTableSpec.displayName = 'proto.feast.core.FeatureTableSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureTableMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.FeatureTableMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureTableMeta.displayName = 'proto.feast.core.FeatureTableMeta';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureTable.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.feast.core.FeatureTableSpec.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.feast.core.FeatureTableMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureTable}
 */
proto.feast.core.FeatureTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureTable;
  return proto.feast.core.FeatureTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureTable}
 */
proto.feast.core.FeatureTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.FeatureTableSpec;
      reader.readMessage(value,proto.feast.core.FeatureTableSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.feast.core.FeatureTableMeta;
      reader.readMessage(value,proto.feast.core.FeatureTableMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.FeatureTableSpec.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.FeatureTableMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeatureTableSpec spec = 1;
 * @return {?proto.feast.core.FeatureTableSpec}
 */
proto.feast.core.FeatureTable.prototype.getSpec = function() {
  return /** @type{?proto.feast.core.FeatureTableSpec} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureTableSpec, 1));
};


/**
 * @param {?proto.feast.core.FeatureTableSpec|undefined} value
 * @return {!proto.feast.core.FeatureTable} returns this
*/
proto.feast.core.FeatureTable.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureTable} returns this
 */
proto.feast.core.FeatureTable.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureTable.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FeatureTableMeta meta = 2;
 * @return {?proto.feast.core.FeatureTableMeta}
 */
proto.feast.core.FeatureTable.prototype.getMeta = function() {
  return /** @type{?proto.feast.core.FeatureTableMeta} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureTableMeta, 2));
};


/**
 * @param {?proto.feast.core.FeatureTableMeta|undefined} value
 * @return {!proto.feast.core.FeatureTable} returns this
*/
proto.feast.core.FeatureTable.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureTable} returns this
 */
proto.feast.core.FeatureTable.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureTable.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.FeatureTableSpec.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureTableSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureTableSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureTableSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureTableSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 9, ""),
    entitiesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto.feast.core.FeatureSpecV2.toObject, includeInstance),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    maxAge: (f = msg.getMaxAge()) && proto.google.protobuf.Duration.toObject(includeInstance, f),
    batchSource: (f = msg.getBatchSource()) && proto.feast.core.DataSource.toObject(includeInstance, f),
    streamSource: (f = msg.getStreamSource()) && proto.feast.core.DataSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureTableSpec}
 */
proto.feast.core.FeatureTableSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureTableSpec;
  return proto.feast.core.FeatureTableSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureTableSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureTableSpec}
 */
proto.feast.core.FeatureTableSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addEntities(value);
      break;
    case 4:
      var value = new proto.feast.core.FeatureSpecV2;
      reader.readMessage(value,proto.feast.core.FeatureSpecV2.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 5:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 6:
      var value = new proto.google.protobuf.Duration;
      reader.readMessage(value,proto.google.protobuf.Duration.deserializeBinaryFromReader);
      msg.setMaxAge(value);
      break;
    case 7:
      var value = new proto.feast.core.DataSource;
      reader.readMessage(value,proto.feast.core.DataSource.deserializeBinaryFromReader);
      msg.setBatchSource(value);
      break;
    case 8:
      var value = new proto.feast.core.DataSource;
      reader.readMessage(value,proto.feast.core.DataSource.deserializeBinaryFromReader);
      msg.setStreamSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureTableSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureTableSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureTableSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureTableSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.feast.core.FeatureSpecV2.serializeBinaryToWriter
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMaxAge();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.google.protobuf.Duration.serializeBinaryToWriter
    );
  }
  f = message.getBatchSource();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.feast.core.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getStreamSource();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.feast.core.DataSource.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.FeatureTableSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureTableSpec} returns this
 */
proto.feast.core.FeatureTableSpec.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 9;
 * @return {string}
 */
proto.feast.core.FeatureTableSpec.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureTableSpec} returns this
 */
proto.feast.core.FeatureTableSpec.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated string entities = 3;
 * @return {!Array<string>}
 */
proto.feast.core.FeatureTableSpec.prototype.getEntitiesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.feast.core.FeatureTableSpec} returns this
 */
proto.feast.core.FeatureTableSpec.prototype.setEntitiesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureTableSpec} returns this
 */
proto.feast.core.FeatureTableSpec.prototype.addEntities = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.FeatureTableSpec} returns this
 */
proto.feast.core.FeatureTableSpec.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * repeated FeatureSpecV2 features = 4;
 * @return {!Array<!proto.feast.core.FeatureSpecV2>}
 */
proto.feast.core.FeatureTableSpec.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureSpecV2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureSpecV2, 4));
};


/**
 * @param {!Array<!proto.feast.core.FeatureSpecV2>} value
 * @return {!proto.feast.core.FeatureTableSpec} returns this
*/
proto.feast.core.FeatureTableSpec.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.feast.core.FeatureSpecV2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureSpecV2}
 */
proto.feast.core.FeatureTableSpec.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.feast.core.FeatureSpecV2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.FeatureTableSpec} returns this
 */
proto.feast.core.FeatureTableSpec.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * map<string, string> labels = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.FeatureTableSpec.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.FeatureTableSpec} returns this
 */
proto.feast.core.FeatureTableSpec.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
  return this;
};


/**
 * optional google.protobuf.Duration max_age = 6;
 * @return {?proto.google.protobuf.Duration}
 */
proto.feast.core.FeatureTableSpec.prototype.getMaxAge = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Duration, 6));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.feast.core.FeatureTableSpec} returns this
*/
proto.feast.core.FeatureTableSpec.prototype.setMaxAge = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureTableSpec} returns this
 */
proto.feast.core.FeatureTableSpec.prototype.clearMaxAge = function() {
  return this.setMaxAge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureTableSpec.prototype.hasMaxAge = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DataSource batch_source = 7;
 * @return {?proto.feast.core.DataSource}
 */
proto.feast.core.FeatureTableSpec.prototype.getBatchSource = function() {
  return /** @type{?proto.feast.core.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource, 7));
};


/**
 * @param {?proto.feast.core.DataSource|undefined} value
 * @return {!proto.feast.core.FeatureTableSpec} returns this
*/
proto.feast.core.FeatureTableSpec.prototype.setBatchSource = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureTableSpec} returns this
 */
proto.feast.core.FeatureTableSpec.prototype.clearBatchSource = function() {
  return this.setBatchSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureTableSpec.prototype.hasBatchSource = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DataSource stream_source = 8;
 * @return {?proto.feast.core.DataSource}
 */
proto.feast.core.FeatureTableSpec.prototype.getStreamSource = function() {
  return /** @type{?proto.feast.core.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource, 8));
};


/**
 * @param {?proto.feast.core.DataSource|undefined} value
 * @return {!proto.feast.core.FeatureTableSpec} returns this
*/
proto.feast.core.FeatureTableSpec.prototype.setStreamSource = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureTableSpec} returns this
 */
proto.feast.core.FeatureTableSpec.prototype.clearStreamSource = function() {
  return this.setStreamSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureTableSpec.prototype.hasStreamSource = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureTableMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureTableMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureTableMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureTableMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdTimestamp: (f = msg.getCreatedTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    lastUpdatedTimestamp: (f = msg.getLastUpdatedTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    revision: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureTableMeta}
 */
proto.feast.core.FeatureTableMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureTableMeta;
  return proto.feast.core.FeatureTableMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureTableMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureTableMeta}
 */
proto.feast.core.FeatureTableMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedTimestamp(value);
      break;
    case 2:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdatedTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRevision(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureTableMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureTableMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureTableMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureTableMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRevision();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp created_timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.FeatureTableMeta.prototype.getCreatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.FeatureTableMeta} returns this
*/
proto.feast.core.FeatureTableMeta.prototype.setCreatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureTableMeta} returns this
 */
proto.feast.core.FeatureTableMeta.prototype.clearCreatedTimestamp = function() {
  return this.setCreatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureTableMeta.prototype.hasCreatedTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp last_updated_timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.FeatureTableMeta.prototype.getLastUpdatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.FeatureTableMeta} returns this
*/
proto.feast.core.FeatureTableMeta.prototype.setLastUpdatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureTableMeta} returns this
 */
proto.feast.core.FeatureTableMeta.prototype.clearLastUpdatedTimestamp = function() {
  return this.setLastUpdatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureTableMeta.prototype.hasLastUpdatedTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 revision = 3;
 * @return {number}
 */
proto.feast.core.FeatureTableMeta.prototype.getRevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.FeatureTableMeta} returns this
 */
proto.feast.core.FeatureTableMeta.prototype.setRevision = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string hash = 4;
 * @return {string}
 */
proto.feast.core.FeatureTableMeta.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureTableMeta} returns this
 */
proto.feast.core.FeatureTableMeta.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.FeatureView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureView.displayName = 'proto.feast.core.FeatureView';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureViewSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.FeatureViewSpec.repeatedFields_, null);
};
goog.inherits(proto.feast.core.FeatureViewSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureViewSpec.displayName = 'proto.feast.core.FeatureViewSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureViewMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.FeatureViewMeta.repeatedFields_, null);
};
goog.inherits(proto.feast.core.FeatureViewMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureViewMeta.displayName = 'proto.feast.core.FeatureViewMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.MaterializationInterval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.MaterializationInterval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.MaterializationInterval.displayName = 'proto.feast.core.MaterializationInterval';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureView.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureView.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.feast.core.FeatureViewSpec.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.feast.core.FeatureViewMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureView}
 */
proto.feast.core.FeatureView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureView;
  return proto.feast.core.FeatureView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureView}
 */
proto.feast.core.FeatureView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.FeatureViewSpec;
      reader.readMessage(value,proto.feast.core.FeatureViewSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.feast.core.FeatureViewMeta;
      reader.readMessage(value,proto.feast.core.FeatureViewMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.FeatureViewSpec.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.FeatureViewMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeatureViewSpec spec = 1;
 * @return {?proto.feast.core.FeatureViewSpec}
 */
proto.feast.core.FeatureView.prototype.getSpec = function() {
  return /** @type{?proto.feast.core.FeatureViewSpec} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureViewSpec, 1));
};


/**
 * @param {?proto.feast.core.FeatureViewSpec|undefined} value
 * @return {!proto.feast.core.FeatureView} returns this
*/
proto.feast.core.FeatureView.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureView} returns this
 */
proto.feast.core.FeatureView.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureView.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FeatureViewMeta meta = 2;
 * @return {?proto.feast.core.FeatureViewMeta}
 */
proto.feast.core.FeatureView.prototype.getMeta = function() {
  return /** @type{?proto.feast.core.FeatureViewMeta} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureViewMeta, 2));
};


/**
 * @param {?proto.feast.core.FeatureViewMeta|undefined} value
 * @return {!proto.feast.core.FeatureView} returns this
*/
proto.feast.core.FeatureView.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureView} returns this
 */
proto.feast.core.FeatureView.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureView.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.FeatureViewSpec.repeatedFields_ = [3,4,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureViewSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureViewSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureViewSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureViewSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entitiesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto.feast.core.FeatureSpecV2.toObject, includeInstance),
    entityColumnsList: jspb.Message.toObjectList(msg.getEntityColumnsList(),
    proto.feast.core.FeatureSpecV2.toObject, includeInstance),
    description: jspb.Message.getFieldWithDefault(msg, 10, ""),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    owner: jspb.Message.getFieldWithDefault(msg, 11, ""),
    ttl: (f = msg.getTtl()) && proto.google.protobuf.Duration.toObject(includeInstance, f),
    batchSource: (f = msg.getBatchSource()) && proto.feast.core.DataSource.toObject(includeInstance, f),
    streamSource: (f = msg.getStreamSource()) && proto.feast.core.DataSource.toObject(includeInstance, f),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureViewSpec}
 */
proto.feast.core.FeatureViewSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureViewSpec;
  return proto.feast.core.FeatureViewSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureViewSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureViewSpec}
 */
proto.feast.core.FeatureViewSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addEntities(value);
      break;
    case 4:
      var value = new proto.feast.core.FeatureSpecV2;
      reader.readMessage(value,proto.feast.core.FeatureSpecV2.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 12:
      var value = new proto.feast.core.FeatureSpecV2;
      reader.readMessage(value,proto.feast.core.FeatureSpecV2.deserializeBinaryFromReader);
      msg.addEntityColumns(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 6:
      var value = new proto.google.protobuf.Duration;
      reader.readMessage(value,proto.google.protobuf.Duration.deserializeBinaryFromReader);
      msg.setTtl(value);
      break;
    case 7:
      var value = new proto.feast.core.DataSource;
      reader.readMessage(value,proto.feast.core.DataSource.deserializeBinaryFromReader);
      msg.setBatchSource(value);
      break;
    case 9:
      var value = new proto.feast.core.DataSource;
      reader.readMessage(value,proto.feast.core.DataSource.deserializeBinaryFromReader);
      msg.setStreamSource(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureViewSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureViewSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureViewSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureViewSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.feast.core.FeatureSpecV2.serializeBinaryToWriter
    );
  }
  f = message.getEntityColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.feast.core.FeatureSpecV2.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTtl();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.google.protobuf.Duration.serializeBinaryToWriter
    );
  }
  f = message.getBatchSource();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.feast.core.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getStreamSource();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.feast.core.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.FeatureViewSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.core.FeatureViewSpec.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string entities = 3;
 * @return {!Array<string>}
 */
proto.feast.core.FeatureViewSpec.prototype.getEntitiesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.setEntitiesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.addEntities = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * repeated FeatureSpecV2 features = 4;
 * @return {!Array<!proto.feast.core.FeatureSpecV2>}
 */
proto.feast.core.FeatureViewSpec.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureSpecV2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureSpecV2, 4));
};


/**
 * @param {!Array<!proto.feast.core.FeatureSpecV2>} value
 * @return {!proto.feast.core.FeatureViewSpec} returns this
*/
proto.feast.core.FeatureViewSpec.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.feast.core.FeatureSpecV2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureSpecV2}
 */
proto.feast.core.FeatureViewSpec.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.feast.core.FeatureSpecV2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * repeated FeatureSpecV2 entity_columns = 12;
 * @return {!Array<!proto.feast.core.FeatureSpecV2>}
 */
proto.feast.core.FeatureViewSpec.prototype.getEntityColumnsList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureSpecV2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureSpecV2, 12));
};


/**
 * @param {!Array<!proto.feast.core.FeatureSpecV2>} value
 * @return {!proto.feast.core.FeatureViewSpec} returns this
*/
proto.feast.core.FeatureViewSpec.prototype.setEntityColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.feast.core.FeatureSpecV2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureSpecV2}
 */
proto.feast.core.FeatureViewSpec.prototype.addEntityColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.feast.core.FeatureSpecV2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.clearEntityColumnsList = function() {
  return this.setEntityColumnsList([]);
};


/**
 * optional string description = 10;
 * @return {string}
 */
proto.feast.core.FeatureViewSpec.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * map<string, string> tags = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.FeatureViewSpec.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};


/**
 * optional string owner = 11;
 * @return {string}
 */
proto.feast.core.FeatureViewSpec.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional google.protobuf.Duration ttl = 6;
 * @return {?proto.google.protobuf.Duration}
 */
proto.feast.core.FeatureViewSpec.prototype.getTtl = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Duration, 6));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.feast.core.FeatureViewSpec} returns this
*/
proto.feast.core.FeatureViewSpec.prototype.setTtl = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.clearTtl = function() {
  return this.setTtl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureViewSpec.prototype.hasTtl = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DataSource batch_source = 7;
 * @return {?proto.feast.core.DataSource}
 */
proto.feast.core.FeatureViewSpec.prototype.getBatchSource = function() {
  return /** @type{?proto.feast.core.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource, 7));
};


/**
 * @param {?proto.feast.core.DataSource|undefined} value
 * @return {!proto.feast.core.FeatureViewSpec} returns this
*/
proto.feast.core.FeatureViewSpec.prototype.setBatchSource = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.clearBatchSource = function() {
  return this.setBatchSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureViewSpec.prototype.hasBatchSource = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DataSource stream_source = 9;
 * @return {?proto.feast.core.DataSource}
 */
proto.feast.core.FeatureViewSpec.prototype.getStreamSource = function() {
  return /** @type{?proto.feast.core.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource, 9));
};


/**
 * @param {?proto.feast.core.DataSource|undefined} value
 * @return {!proto.feast.core.FeatureViewSpec} returns this
*/
proto.feast.core.FeatureViewSpec.prototype.setStreamSource = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.clearStreamSource = function() {
  return this.setStreamSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureViewSpec.prototype.hasStreamSource = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool online = 8;
 * @return {boolean}
 */
proto.feast.core.FeatureViewSpec.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.core.FeatureViewSpec} returns this
 */
proto.feast.core.FeatureViewSpec.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.FeatureViewMeta.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureViewMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureViewMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureViewMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureViewMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdTimestamp: (f = msg.getCreatedTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    lastUpdatedTimestamp: (f = msg.getLastUpdatedTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    materializationIntervalsList: jspb.Message.toObjectList(msg.getMaterializationIntervalsList(),
    proto.feast.core.MaterializationInterval.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureViewMeta}
 */
proto.feast.core.FeatureViewMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureViewMeta;
  return proto.feast.core.FeatureViewMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureViewMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureViewMeta}
 */
proto.feast.core.FeatureViewMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedTimestamp(value);
      break;
    case 2:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdatedTimestamp(value);
      break;
    case 3:
      var value = new proto.feast.core.MaterializationInterval;
      reader.readMessage(value,proto.feast.core.MaterializationInterval.deserializeBinaryFromReader);
      msg.addMaterializationIntervals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureViewMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureViewMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureViewMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureViewMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMaterializationIntervalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.feast.core.MaterializationInterval.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp created_timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.FeatureViewMeta.prototype.getCreatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.FeatureViewMeta} returns this
*/
proto.feast.core.FeatureViewMeta.prototype.setCreatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureViewMeta} returns this
 */
proto.feast.core.FeatureViewMeta.prototype.clearCreatedTimestamp = function() {
  return this.setCreatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureViewMeta.prototype.hasCreatedTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp last_updated_timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.FeatureViewMeta.prototype.getLastUpdatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.FeatureViewMeta} returns this
*/
proto.feast.core.FeatureViewMeta.prototype.setLastUpdatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureViewMeta} returns this
 */
proto.feast.core.FeatureViewMeta.prototype.clearLastUpdatedTimestamp = function() {
  return this.setLastUpdatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureViewMeta.prototype.hasLastUpdatedTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated MaterializationInterval materialization_intervals = 3;
 * @return {!Array<!proto.feast.core.MaterializationInterval>}
 */
proto.feast.core.FeatureViewMeta.prototype.getMaterializationIntervalsList = function() {
  return /** @type{!Array<!proto.feast.core.MaterializationInterval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.MaterializationInterval, 3));
};


/**
 * @param {!Array<!proto.feast.core.MaterializationInterval>} value
 * @return {!proto.feast.core.FeatureViewMeta} returns this
*/
proto.feast.core.FeatureViewMeta.prototype.setMaterializationIntervalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.feast.core.MaterializationInterval=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.MaterializationInterval}
 */
proto.feast.core.FeatureViewMeta.prototype.addMaterializationIntervals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.feast.core.MaterializationInterval, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.FeatureViewMeta} returns this
 */
proto.feast.core.FeatureViewMeta.prototype.clearMaterializationIntervalsList = function() {
  return this.setMaterializationIntervalsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.MaterializationInterval.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.MaterializationInterval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.MaterializationInterval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.MaterializationInterval.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTime: (f = msg.getStartTime()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    endTime: (f = msg.getEndTime()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.MaterializationInterval}
 */
proto.feast.core.MaterializationInterval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.MaterializationInterval;
  return proto.feast.core.MaterializationInterval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.MaterializationInterval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.MaterializationInterval}
 */
proto.feast.core.MaterializationInterval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setStartTime(value);
      break;
    case 2:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.MaterializationInterval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.MaterializationInterval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.MaterializationInterval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.MaterializationInterval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEndTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp start_time = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.MaterializationInterval.prototype.getStartTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.MaterializationInterval} returns this
*/
proto.feast.core.MaterializationInterval.prototype.setStartTime = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.MaterializationInterval} returns this
 */
proto.feast.core.MaterializationInterval.prototype.clearStartTime = function() {
  return this.setStartTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.MaterializationInterval.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp end_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.MaterializationInterval.prototype.getEndTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.MaterializationInterval} returns this
*/
proto.feast.core.MaterializationInterval.prototype.setEndTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.MaterializationInterval} returns this
 */
proto.feast.core.MaterializationInterval.prototype.clearEndTime = function() {
  return this.setEndTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.MaterializationInterval.prototype.hasEndTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.SqliteTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.SqliteTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.SqliteTable.displayName = 'proto.feast.core.SqliteTable';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.SqliteTable.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.SqliteTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.SqliteTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SqliteTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.SqliteTable}
 */
proto.feast.core.SqliteTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.SqliteTable;
  return proto.feast.core.SqliteTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.SqliteTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.SqliteTable}
 */
proto.feast.core.SqliteTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.SqliteTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.SqliteTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.SqliteTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SqliteTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.feast.core.SqliteTable.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.SqliteTable} returns this
 */
proto.feast.core.SqliteTable.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.feast.core.SqliteTable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.SqliteTable} returns this
 */
proto.feast.core.SqliteTable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.Infra = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.Infra.repeatedFields_, null);
};
goog.inherits(proto.feast.core.Infra, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.Infra.displayName = 'proto.feast.core.Infra';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.InfraObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.InfraObject.oneofGroups_);
};
goog.inherits(proto.feast.core.InfraObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.InfraObject.displayName = 'proto.feast.core.InfraObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.InfraObject.CustomInfra = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.InfraObject.CustomInfra, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.InfraObject.CustomInfra.displayName = 'proto.feast.core.InfraObject.CustomInfra';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.Infra.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.Infra.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.Infra.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.Infra} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Infra.toObject = function(includeInstance, msg) {
  var f, obj = {
    infraObjectsList: jspb.Message.toObjectList(msg.getInfraObjectsList(),
    proto.feast.core.InfraObject.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.Infra}
 */
proto.feast.core.Infra.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.Infra;
  return proto.feast.core.Infra.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.Infra} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.Infra}
 */
proto.feast.core.Infra.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.InfraObject;
      reader.readMessage(value,proto.feast.core.InfraObject.deserializeBinaryFromReader);
      msg.addInfraObjects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.Infra.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.Infra.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.Infra} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Infra.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfraObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.core.InfraObject.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InfraObject infra_objects = 1;
 * @return {!Array<!proto.feast.core.InfraObject>}
 */
proto.feast.core.Infra.prototype.getInfraObjectsList = function() {
  return /** @type{!Array<!proto.feast.core.InfraObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.InfraObject, 1));
};


/**
 * @param {!Array<!proto.feast.core.InfraObject>} value
 * @return {!proto.feast.core.Infra} returns this
*/
proto.feast.core.Infra.prototype.setInfraObjectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.core.InfraObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.InfraObject}
 */
proto.feast.core.Infra.prototype.addInfraObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.core.InfraObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.Infra} returns this
 */
proto.feast.core.Infra.prototype.clearInfraObjectsList = function() {
  return this.setInfraObjectsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.InfraObject.oneofGroups_ = [[2,3,4,100]];

/**
 * @enum {number}
 */
proto.feast.core.InfraObject.InfraObjectCase = {
  INFRA_OBJECT_NOT_SET: 0,
  DYNAMODB_TABLE: 2,
  DATASTORE_TABLE: 3,
  SQLITE_TABLE: 4,
  CUSTOM_INFRA: 100
};

/**
 * @return {proto.feast.core.InfraObject.InfraObjectCase}
 */
proto.feast.core.InfraObject.prototype.getInfraObjectCase = function() {
  return /** @type {proto.feast.core.InfraObject.InfraObjectCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.InfraObject.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.InfraObject.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.InfraObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.InfraObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.InfraObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    infraObjectClassType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dynamodbTable: (f = msg.getDynamodbTable()) && proto.feast.core.DynamoDBTable.toObject(includeInstance, f),
    datastoreTable: (f = msg.getDatastoreTable()) && proto.feast.core.DatastoreTable.toObject(includeInstance, f),
    sqliteTable: (f = msg.getSqliteTable()) && proto.feast.core.SqliteTable.toObject(includeInstance, f),
    customInfra: (f = msg.getCustomInfra()) && proto.feast.core.InfraObject.CustomInfra.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.InfraObject}
 */
proto.feast.core.InfraObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.InfraObject;
  return proto.feast.core.InfraObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.InfraObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.InfraObject}
 */
proto.feast.core.InfraObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfraObjectClassType(value);
      break;
    case 2:
      var value = new proto.feast.core.DynamoDBTable;
      reader.readMessage(value,proto.feast.core.DynamoDBTable.deserializeBinaryFromReader);
      msg.setDynamodbTable(value);
      break;
    case 3:
      var value = new proto.feast.core.DatastoreTable;
      reader.readMessage(value,proto.feast.core.DatastoreTable.deserializeBinaryFromReader);
      msg.setDatastoreTable(value);
      break;
    case 4:
      var value = new proto.feast.core.SqliteTable;
      reader.readMessage(value,proto.feast.core.SqliteTable.deserializeBinaryFromReader);
      msg.setSqliteTable(value);
      break;
    case 100:
      var value = new proto.feast.core.InfraObject.CustomInfra;
      reader.readMessage(value,proto.feast.core.InfraObject.CustomInfra.deserializeBinaryFromReader);
      msg.setCustomInfra(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.InfraObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.InfraObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.InfraObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.InfraObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfraObjectClassType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDynamodbTable();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.DynamoDBTable.serializeBinaryToWriter
    );
  }
  f = message.getDatastoreTable();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feast.core.DatastoreTable.serializeBinaryToWriter
    );
  }
  f = message.getSqliteTable();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.feast.core.SqliteTable.serializeBinaryToWriter
    );
  }
  f = message.getCustomInfra();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.feast.core.InfraObject.CustomInfra.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.InfraObject.CustomInfra.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.InfraObject.CustomInfra.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.InfraObject.CustomInfra} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.InfraObject.CustomInfra.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: msg.getField_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.InfraObject.CustomInfra}
 */
proto.feast.core.InfraObject.CustomInfra.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.InfraObject.CustomInfra;
  return proto.feast.core.InfraObject.CustomInfra.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.InfraObject.CustomInfra} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.InfraObject.CustomInfra}
 */
proto.feast.core.InfraObject.CustomInfra.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.InfraObject.CustomInfra.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.InfraObject.CustomInfra.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.InfraObject.CustomInfra} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.InfraObject.CustomInfra.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes field = 1;
 * @return {!(string|Uint8Array)}
 */
proto.feast.core.InfraObject.CustomInfra.prototype.getField = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes field = 1;
 * This is a type-conversion wrapper around `getField()`
 * @return {string}
 */
proto.feast.core.InfraObject.CustomInfra.prototype.getField_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getField()));
};


/**
 * optional bytes field = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getField()`
 * @return {!Uint8Array}
 */
proto.feast.core.InfraObject.CustomInfra.prototype.getField_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getField()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.core.InfraObject.CustomInfra} returns this
 */
proto.feast.core.InfraObject.CustomInfra.prototype.setField = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string infra_object_class_type = 1;
 * @return {string}
 */
proto.feast.core.InfraObject.prototype.getInfraObjectClassType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.InfraObject} returns this
 */
proto.feast.core.InfraObject.prototype.setInfraObjectClassType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DynamoDBTable dynamodb_table = 2;
 * @return {?proto.feast.core.DynamoDBTable}
 */
proto.feast.core.InfraObject.prototype.getDynamodbTable = function() {
  return /** @type{?proto.feast.core.DynamoDBTable} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DynamoDBTable, 2));
};


/**
 * @param {?proto.feast.core.DynamoDBTable|undefined} value
 * @return {!proto.feast.core.InfraObject} returns this
*/
proto.feast.core.InfraObject.prototype.setDynamodbTable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.feast.core.InfraObject.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.InfraObject} returns this
 */
proto.feast.core.InfraObject.prototype.clearDynamodbTable = function() {
  return this.setDynamodbTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.InfraObject.prototype.hasDynamodbTable = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DatastoreTable datastore_table = 3;
 * @return {?proto.feast.core.DatastoreTable}
 */
proto.feast.core.InfraObject.prototype.getDatastoreTable = function() {
  return /** @type{?proto.feast.core.DatastoreTable} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DatastoreTable, 3));
};


/**
 * @param {?proto.feast.core.DatastoreTable|undefined} value
 * @return {!proto.feast.core.InfraObject} returns this
*/
proto.feast.core.InfraObject.prototype.setDatastoreTable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.feast.core.InfraObject.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.InfraObject} returns this
 */
proto.feast.core.InfraObject.prototype.clearDatastoreTable = function() {
  return this.setDatastoreTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.InfraObject.prototype.hasDatastoreTable = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SqliteTable sqlite_table = 4;
 * @return {?proto.feast.core.SqliteTable}
 */
proto.feast.core.InfraObject.prototype.getSqliteTable = function() {
  return /** @type{?proto.feast.core.SqliteTable} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.SqliteTable, 4));
};


/**
 * @param {?proto.feast.core.SqliteTable|undefined} value
 * @return {!proto.feast.core.InfraObject} returns this
*/
proto.feast.core.InfraObject.prototype.setSqliteTable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.feast.core.InfraObject.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.InfraObject} returns this
 */
proto.feast.core.InfraObject.prototype.clearSqliteTable = function() {
  return this.setSqliteTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.InfraObject.prototype.hasSqliteTable = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CustomInfra custom_infra = 100;
 * @return {?proto.feast.core.InfraObject.CustomInfra}
 */
proto.feast.core.InfraObject.prototype.getCustomInfra = function() {
  return /** @type{?proto.feast.core.InfraObject.CustomInfra} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.InfraObject.CustomInfra, 100));
};


/**
 * @param {?proto.feast.core.InfraObject.CustomInfra|undefined} value
 * @return {!proto.feast.core.InfraObject} returns this
*/
proto.feast.core.InfraObject.prototype.setCustomInfra = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.feast.core.InfraObject.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.InfraObject} returns this
 */
proto.feast.core.InfraObject.prototype.clearCustomInfra = function() {
  return this.setCustomInfra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.InfraObject.prototype.hasCustomInfra = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.UserDefinedFunctionV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.UserDefinedFunctionV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.UserDefinedFunctionV2.displayName = 'proto.feast.core.UserDefinedFunctionV2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureTransformationV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.FeatureTransformationV2.oneofGroups_);
};
goog.inherits(proto.feast.core.FeatureTransformationV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureTransformationV2.displayName = 'proto.feast.core.FeatureTransformationV2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.SubstraitTransformationV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.SubstraitTransformationV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.SubstraitTransformationV2.displayName = 'proto.feast.core.SubstraitTransformationV2';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.UserDefinedFunctionV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.UserDefinedFunctionV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.UserDefinedFunctionV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: msg.getBody_asB64(),
    bodyText: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.UserDefinedFunctionV2}
 */
proto.feast.core.UserDefinedFunctionV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.UserDefinedFunctionV2;
  return proto.feast.core.UserDefinedFunctionV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.UserDefinedFunctionV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.UserDefinedFunctionV2}
 */
proto.feast.core.UserDefinedFunctionV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBodyText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.UserDefinedFunctionV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.UserDefinedFunctionV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.UserDefinedFunctionV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBodyText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.UserDefinedFunctionV2} returns this
 */
proto.feast.core.UserDefinedFunctionV2.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {!(string|Uint8Array)}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.core.UserDefinedFunctionV2} returns this
 */
proto.feast.core.UserDefinedFunctionV2.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string body_text = 3;
 * @return {string}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.getBodyText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.UserDefinedFunctionV2} returns this
 */
proto.feast.core.UserDefinedFunctionV2.prototype.setBodyText = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.FeatureTransformationV2.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.feast.core.FeatureTransformationV2.TransformationCase = {
  TRANSFORMATION_NOT_SET: 0,
  USER_DEFINED_FUNCTION: 1,
  SUBSTRAIT_TRANSFORMATION: 2
};

/**
 * @return {proto.feast.core.FeatureTransformationV2.TransformationCase}
 */
proto.feast.core.FeatureTransformationV2.prototype.getTransformationCase = function() {
  return /** @type {proto.feast.core.FeatureTransformationV2.TransformationCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.FeatureTransformationV2.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureTransformationV2.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureTransformationV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureTransformationV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureTransformationV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    userDefinedFunction: (f = msg.getUserDefinedFunction()) && proto.feast.core.UserDefinedFunctionV2.toObject(includeInstance, f),
    substraitTransformation: (f = msg.getSubstraitTransformation()) && proto.feast.core.SubstraitTransformationV2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureTransformationV2}
 */
proto.feast.core.FeatureTransformationV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureTransformationV2;
  return proto.feast.core.FeatureTransformationV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureTransformationV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureTransformationV2}
 */
proto.feast.core.FeatureTransformationV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.UserDefinedFunctionV2;
      reader.readMessage(value,proto.feast.core.UserDefinedFunctionV2.deserializeBinaryFromReader);
      msg.setUserDefinedFunction(value);
      break;
    case 2:
      var value = new proto.feast.core.SubstraitTransformationV2;
      reader.readMessage(value,proto.feast.core.SubstraitTransformationV2.deserializeBinaryFromReader);
      msg.setSubstraitTransformation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureTransformationV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureTransformationV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureTransformationV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureTransformationV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserDefinedFunction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.UserDefinedFunctionV2.serializeBinaryToWriter
    );
  }
  f = message.getSubstraitTransformation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.SubstraitTransformationV2.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserDefinedFunctionV2 user_defined_function = 1;
 * @return {?proto.feast.core.UserDefinedFunctionV2}
 */
proto.feast.core.FeatureTransformationV2.prototype.getUserDefinedFunction = function() {
  return /** @type{?proto.feast.core.UserDefinedFunctionV2} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.UserDefinedFunctionV2, 1));
};


/**
 * @param {?proto.feast.core.UserDefinedFunctionV2|undefined} value
 * @return {!proto.feast.core.FeatureTransformationV2} returns this
*/
proto.feast.core.FeatureTransformationV2.prototype.setUserDefinedFunction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.feast.core.FeatureTransformationV2.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureTransformationV2} returns this
 */
proto.feast.core.FeatureTransformationV2.prototype.clearUserDefinedFunction = function() {
  return this.setUserDefinedFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureTransformationV2.prototype.hasUserDefinedFunction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SubstraitTransformationV2 substrait_transformation = 2;
 * @return {?proto.feast.core.SubstraitTransformationV2}
 */
proto.feast.core.FeatureTransformationV2.prototype.getSubstraitTransformation = function() {
  return /** @type{?proto.feast.core.SubstraitTransformationV2} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.SubstraitTransformationV2, 2));
};


/**
 * @param {?proto.feast.core.SubstraitTransformationV2|undefined} value
 * @return {!proto.feast.core.FeatureTransformationV2} returns this
*/
proto.feast.core.FeatureTransformationV2.prototype.setSubstraitTransformation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.feast.core.FeatureTransformationV2.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureTransformationV2} returns this
 */
proto.feast.core.FeatureTransformationV2.prototype.clearSubstraitTransformation = function() {
  return this.setSubstraitTransformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureTransformationV2.prototype.hasSubstraitTransformation = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.SubstraitTransformationV2.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.SubstraitTransformationV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.SubstraitTransformationV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SubstraitTransformationV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    substraitPlan: msg.getSubstraitPlan_asB64(),
    ibisFunction: msg.getIbisFunction_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.SubstraitTransformationV2}
 */
proto.feast.core.SubstraitTransformationV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.SubstraitTransformationV2;
  return proto.feast.core.SubstraitTransformationV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.SubstraitTransformationV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.SubstraitTransformationV2}
 */
proto.feast.core.SubstraitTransformationV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubstraitPlan(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIbisFunction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.SubstraitTransformationV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.SubstraitTransformationV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.SubstraitTransformationV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SubstraitTransformationV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubstraitPlan_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIbisFunction_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes substrait_plan = 1;
 * @return {!(string|Uint8Array)}
 */
proto.feast.core.SubstraitTransformationV2.prototype.getSubstraitPlan = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes substrait_plan = 1;
 * This is a type-conversion wrapper around `getSubstraitPlan()`
 * @return {string}
 */
proto.feast.core.SubstraitTransformationV2.prototype.getSubstraitPlan_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubstraitPlan()));
};


/**
 * optional bytes substrait_plan = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubstraitPlan()`
 * @return {!Uint8Array}
 */
proto.feast.core.SubstraitTransformationV2.prototype.getSubstraitPlan_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubstraitPlan()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.core.SubstraitTransformationV2} returns this
 */
proto.feast.core.SubstraitTransformationV2.prototype.setSubstraitPlan = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes ibis_function = 2;
 * @return {!(string|Uint8Array)}
 */
proto.feast.core.SubstraitTransformationV2.prototype.getIbisFunction = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ibis_function = 2;
 * This is a type-conversion wrapper around `getIbisFunction()`
 * @return {string}
 */
proto.feast.core.SubstraitTransformationV2.prototype.getIbisFunction_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIbisFunction()));
};


/**
 * optional bytes ibis_function = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIbisFunction()`
 * @return {!Uint8Array}
 */
proto.feast.core.SubstraitTransformationV2.prototype.getIbisFunction_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIbisFunction()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.core.SubstraitTransformationV2} returns this
 */
proto.feast.core.SubstraitTransformationV2.prototype.setIbisFunction = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.OnDemandFeatureView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.OnDemandFeatureView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.OnDemandFeatureView.displayName = 'proto.feast.core.OnDemandFeatureView';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.OnDemandFeatureViewSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.OnDemandFeatureViewSpec.repeatedFields_, null);
};
goog.inherits(proto.feast.core.OnDemandFeatureViewSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.OnDemandFeatureViewSpec.displayName = 'proto.feast.core.OnDemandFeatureViewSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.OnDemandFeatureViewMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.OnDemandFeatureViewMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.OnDemandFeatureViewMeta.displayName = 'proto.feast.core.OnDemandFeatureViewMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.OnDemandSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.OnDemandSource.oneofGroups_);
};
goog.inherits(proto.feast.core.OnDemandSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.OnDemandSource.displayName = 'proto.feast.core.OnDemandSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.UserDefinedFunction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.UserDefinedFunction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.UserDefinedFunction.displayName = 'proto.feast.core.UserDefinedFunction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.OnDemandFeatureView.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.OnDemandFeatureView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.OnDemandFeatureView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandFeatureView.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.feast.core.OnDemandFeatureViewSpec.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.feast.core.OnDemandFeatureViewMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.OnDemandFeatureView}
 */
proto.feast.core.OnDemandFeatureView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.OnDemandFeatureView;
  return proto.feast.core.OnDemandFeatureView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.OnDemandFeatureView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.OnDemandFeatureView}
 */
proto.feast.core.OnDemandFeatureView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.OnDemandFeatureViewSpec;
      reader.readMessage(value,proto.feast.core.OnDemandFeatureViewSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.feast.core.OnDemandFeatureViewMeta;
      reader.readMessage(value,proto.feast.core.OnDemandFeatureViewMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.OnDemandFeatureView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.OnDemandFeatureView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.OnDemandFeatureView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandFeatureView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.OnDemandFeatureViewSpec.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.OnDemandFeatureViewMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional OnDemandFeatureViewSpec spec = 1;
 * @return {?proto.feast.core.OnDemandFeatureViewSpec}
 */
proto.feast.core.OnDemandFeatureView.prototype.getSpec = function() {
  return /** @type{?proto.feast.core.OnDemandFeatureViewSpec} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.OnDemandFeatureViewSpec, 1));
};


/**
 * @param {?proto.feast.core.OnDemandFeatureViewSpec|undefined} value
 * @return {!proto.feast.core.OnDemandFeatureView} returns this
*/
proto.feast.core.OnDemandFeatureView.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandFeatureView} returns this
 */
proto.feast.core.OnDemandFeatureView.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandFeatureView.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OnDemandFeatureViewMeta meta = 2;
 * @return {?proto.feast.core.OnDemandFeatureViewMeta}
 */
proto.feast.core.OnDemandFeatureView.prototype.getMeta = function() {
  return /** @type{?proto.feast.core.OnDemandFeatureViewMeta} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.OnDemandFeatureViewMeta, 2));
};


/**
 * @param {?proto.feast.core.OnDemandFeatureViewMeta|undefined} value
 * @return {!proto.feast.core.OnDemandFeatureView} returns this
*/
proto.feast.core.OnDemandFeatureView.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandFeatureView} returns this
 */
proto.feast.core.OnDemandFeatureView.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandFeatureView.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.OnDemandFeatureViewSpec.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.OnDemandFeatureViewSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.OnDemandFeatureViewSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandFeatureViewSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto.feast.core.FeatureSpecV2.toObject, includeInstance),
    sourcesMap: (f = msg.getSourcesMap()) ? f.toObject(includeInstance, proto.feast.core.OnDemandSource.toObject) : [],
    userDefinedFunction: (f = msg.getUserDefinedFunction()) && proto.feast.core.UserDefinedFunction.toObject(includeInstance, f),
    featureTransformation: (f = msg.getFeatureTransformation()) && proto.feast.core.FeatureTransformationV2.toObject(includeInstance, f),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    owner: jspb.Message.getFieldWithDefault(msg, 8, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec}
 */
proto.feast.core.OnDemandFeatureViewSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.OnDemandFeatureViewSpec;
  return proto.feast.core.OnDemandFeatureViewSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.OnDemandFeatureViewSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec}
 */
proto.feast.core.OnDemandFeatureViewSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = new proto.feast.core.FeatureSpecV2;
      reader.readMessage(value,proto.feast.core.FeatureSpecV2.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 4:
      var value = msg.getSourcesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.feast.core.OnDemandSource.deserializeBinaryFromReader, "", new proto.feast.core.OnDemandSource());
         });
      break;
    case 5:
      var value = new proto.feast.core.UserDefinedFunction;
      reader.readMessage(value,proto.feast.core.UserDefinedFunction.deserializeBinaryFromReader);
      msg.setUserDefinedFunction(value);
      break;
    case 10:
      var value = new proto.feast.core.FeatureTransformationV2;
      reader.readMessage(value,proto.feast.core.FeatureTransformationV2.deserializeBinaryFromReader);
      msg.setFeatureTransformation(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.OnDemandFeatureViewSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.OnDemandFeatureViewSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandFeatureViewSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.feast.core.FeatureSpecV2.serializeBinaryToWriter
    );
  }
  f = message.getSourcesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.feast.core.OnDemandSource.serializeBinaryToWriter);
  }
  f = message.getUserDefinedFunction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.feast.core.UserDefinedFunction.serializeBinaryToWriter
    );
  }
  f = message.getFeatureTransformation();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.feast.core.FeatureTransformationV2.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMode();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated FeatureSpecV2 features = 3;
 * @return {!Array<!proto.feast.core.FeatureSpecV2>}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureSpecV2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureSpecV2, 3));
};


/**
 * @param {!Array<!proto.feast.core.FeatureSpecV2>} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
*/
proto.feast.core.OnDemandFeatureViewSpec.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.feast.core.FeatureSpecV2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureSpecV2}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.feast.core.FeatureSpecV2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * map<string, OnDemandSource> sources = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.feast.core.OnDemandSource>}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getSourcesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.feast.core.OnDemandSource>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.feast.core.OnDemandSource));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.clearSourcesMap = function() {
  this.getSourcesMap().clear();
  return this;
};


/**
 * optional UserDefinedFunction user_defined_function = 5;
 * @return {?proto.feast.core.UserDefinedFunction}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getUserDefinedFunction = function() {
  return /** @type{?proto.feast.core.UserDefinedFunction} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.UserDefinedFunction, 5));
};


/**
 * @param {?proto.feast.core.UserDefinedFunction|undefined} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
*/
proto.feast.core.OnDemandFeatureViewSpec.prototype.setUserDefinedFunction = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.clearUserDefinedFunction = function() {
  return this.setUserDefinedFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.hasUserDefinedFunction = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FeatureTransformationV2 feature_transformation = 10;
 * @return {?proto.feast.core.FeatureTransformationV2}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getFeatureTransformation = function() {
  return /** @type{?proto.feast.core.FeatureTransformationV2} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureTransformationV2, 10));
};


/**
 * @param {?proto.feast.core.FeatureTransformationV2|undefined} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
*/
proto.feast.core.OnDemandFeatureViewSpec.prototype.setFeatureTransformation = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.clearFeatureTransformation = function() {
  return this.setFeatureTransformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.hasFeatureTransformation = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * map<string, string> tags = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};


/**
 * optional string owner = 8;
 * @return {string}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string mode = 11;
 * @return {string}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.setMode = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.OnDemandFeatureViewMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.OnDemandFeatureViewMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandFeatureViewMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdTimestamp: (f = msg.getCreatedTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    lastUpdatedTimestamp: (f = msg.getLastUpdatedTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.OnDemandFeatureViewMeta}
 */
proto.feast.core.OnDemandFeatureViewMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.OnDemandFeatureViewMeta;
  return proto.feast.core.OnDemandFeatureViewMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.OnDemandFeatureViewMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.OnDemandFeatureViewMeta}
 */
proto.feast.core.OnDemandFeatureViewMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedTimestamp(value);
      break;
    case 2:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdatedTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.OnDemandFeatureViewMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.OnDemandFeatureViewMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandFeatureViewMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp created_timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.getCreatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.OnDemandFeatureViewMeta} returns this
*/
proto.feast.core.OnDemandFeatureViewMeta.prototype.setCreatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandFeatureViewMeta} returns this
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.clearCreatedTimestamp = function() {
  return this.setCreatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.hasCreatedTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp last_updated_timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.getLastUpdatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.OnDemandFeatureViewMeta} returns this
*/
proto.feast.core.OnDemandFeatureViewMeta.prototype.setLastUpdatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandFeatureViewMeta} returns this
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.clearLastUpdatedTimestamp = function() {
  return this.setLastUpdatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.hasLastUpdatedTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.OnDemandSource.oneofGroups_ = [[1,3,2]];

/**
 * @enum {number}
 */
proto.feast.core.OnDemandSource.SourceCase = {
  SOURCE_NOT_SET: 0,
  FEATURE_VIEW: 1,
  FEATURE_VIEW_PROJECTION: 3,
  REQUEST_DATA_SOURCE: 2
};

/**
 * @return {proto.feast.core.OnDemandSource.SourceCase}
 */
proto.feast.core.OnDemandSource.prototype.getSourceCase = function() {
  return /** @type {proto.feast.core.OnDemandSource.SourceCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.OnDemandSource.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.OnDemandSource.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.OnDemandSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.OnDemandSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureView: (f = msg.getFeatureView()) && proto.feast.core.FeatureView.toObject(includeInstance, f),
    featureViewProjection: (f = msg.getFeatureViewProjection()) && proto.feast.core.FeatureViewProjection.toObject(includeInstance, f),
    requestDataSource: (f = msg.getRequestDataSource()) && proto.feast.core.DataSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.OnDemandSource}
 */
proto.feast.core.OnDemandSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.OnDemandSource;
  return proto.feast.core.OnDemandSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.OnDemandSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.OnDemandSource}
 */
proto.feast.core.OnDemandSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.FeatureView;
      reader.readMessage(value,proto.feast.core.FeatureView.deserializeBinaryFromReader);
      msg.setFeatureView(value);
      break;
    case 3:
      var value = new proto.feast.core.FeatureViewProjection;
      reader.readMessage(value,proto.feast.core.FeatureViewProjection.deserializeBinaryFromReader);
      msg.setFeatureViewProjection(value);
      break;
    case 2:
      var value = new proto.feast.core.DataSource;
      reader.readMessage(value,proto.feast.core.DataSource.deserializeBinaryFromReader);
      msg.setRequestDataSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.OnDemandSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.OnDemandSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.OnDemandSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureView();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.FeatureView.serializeBinaryToWriter
    );
  }
  f = message.getFeatureViewProjection();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feast.core.FeatureViewProjection.serializeBinaryToWriter
    );
  }
  f = message.getRequestDataSource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.DataSource.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeatureView feature_view = 1;
 * @return {?proto.feast.core.FeatureView}
 */
proto.feast.core.OnDemandSource.prototype.getFeatureView = function() {
  return /** @type{?proto.feast.core.FeatureView} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureView, 1));
};


/**
 * @param {?proto.feast.core.FeatureView|undefined} value
 * @return {!proto.feast.core.OnDemandSource} returns this
*/
proto.feast.core.OnDemandSource.prototype.setFeatureView = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.feast.core.OnDemandSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandSource} returns this
 */
proto.feast.core.OnDemandSource.prototype.clearFeatureView = function() {
  return this.setFeatureView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandSource.prototype.hasFeatureView = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FeatureViewProjection feature_view_projection = 3;
 * @return {?proto.feast.core.FeatureViewProjection}
 */
proto.feast.core.OnDemandSource.prototype.getFeatureViewProjection = function() {
  return /** @type{?proto.feast.core.FeatureViewProjection} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureViewProjection, 3));
};


/**
 * @param {?proto.feast.core.FeatureViewProjection|undefined} value
 * @return {!proto.feast.core.OnDemandSource} returns this
*/
proto.feast.core.OnDemandSource.prototype.setFeatureViewProjection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.feast.core.OnDemandSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandSource} returns this
 */
proto.feast.core.OnDemandSource.prototype.clearFeatureViewProjection = function() {
  return this.setFeatureViewProjection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandSource.prototype.hasFeatureViewProjection = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataSource request_data_source = 2;
 * @return {?proto.feast.core.DataSource}
 */
proto.feast.core.OnDemandSource.prototype.getRequestDataSource = function() {
  return /** @type{?proto.feast.core.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource, 2));
};


/**
 * @param {?proto.feast.core.DataSource|undefined} value
 * @return {!proto.feast.core.OnDemandSource} returns this
*/
proto.feast.core.OnDemandSource.prototype.setRequestDataSource = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.feast.core.OnDemandSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandSource} returns this
 */
proto.feast.core.OnDemandSource.prototype.clearRequestDataSource = function() {
  return this.setRequestDataSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandSource.prototype.hasRequestDataSource = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.UserDefinedFunction.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.UserDefinedFunction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.UserDefinedFunction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.UserDefinedFunction.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: msg.getBody_asB64(),
    bodyText: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.UserDefinedFunction}
 */
proto.feast.core.UserDefinedFunction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.UserDefinedFunction;
  return proto.feast.core.UserDefinedFunction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.UserDefinedFunction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.UserDefinedFunction}
 */
proto.feast.core.UserDefinedFunction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBodyText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.UserDefinedFunction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.UserDefinedFunction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.UserDefinedFunction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.UserDefinedFunction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBodyText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.UserDefinedFunction.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.UserDefinedFunction} returns this
 */
proto.feast.core.UserDefinedFunction.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {!(string|Uint8Array)}
 */
proto.feast.core.UserDefinedFunction.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.feast.core.UserDefinedFunction.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.feast.core.UserDefinedFunction.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.core.UserDefinedFunction} returns this
 */
proto.feast.core.UserDefinedFunction.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string body_text = 3;
 * @return {string}
 */
proto.feast.core.UserDefinedFunction.prototype.getBodyText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.UserDefinedFunction} returns this
 */
proto.feast.core.UserDefinedFunction.prototype.setBodyText = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.StreamFeatureView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.StreamFeatureView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.StreamFeatureView.displayName = 'proto.feast.core.StreamFeatureView';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.StreamFeatureViewSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.StreamFeatureViewSpec.repeatedFields_, null);
};
goog.inherits(proto.feast.core.StreamFeatureViewSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.StreamFeatureViewSpec.displayName = 'proto.feast.core.StreamFeatureViewSpec';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.StreamFeatureView.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.StreamFeatureView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.StreamFeatureView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFeatureView.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.feast.core.StreamFeatureViewSpec.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.feast.core.FeatureViewMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.StreamFeatureView}
 */
proto.feast.core.StreamFeatureView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.StreamFeatureView;
  return proto.feast.core.StreamFeatureView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.StreamFeatureView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.StreamFeatureView}
 */
proto.feast.core.StreamFeatureView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.StreamFeatureViewSpec;
      reader.readMessage(value,proto.feast.core.StreamFeatureViewSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.feast.core.FeatureViewMeta;
      reader.readMessage(value,proto.feast.core.FeatureViewMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.StreamFeatureView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.StreamFeatureView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.StreamFeatureView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFeatureView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.StreamFeatureViewSpec.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.FeatureViewMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional StreamFeatureViewSpec spec = 1;
 * @return {?proto.feast.core.StreamFeatureViewSpec}
 */
proto.feast.core.StreamFeatureView.prototype.getSpec = function() {
  return /** @type{?proto.feast.core.StreamFeatureViewSpec} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.StreamFeatureViewSpec, 1));
};


/**
 * @param {?proto.feast.core.StreamFeatureViewSpec|undefined} value
 * @return {!proto.feast.core.StreamFeatureView} returns this
*/
proto.feast.core.StreamFeatureView.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.StreamFeatureView} returns this
 */
proto.feast.core.StreamFeatureView.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.StreamFeatureView.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FeatureViewMeta meta = 2;
 * @return {?proto.feast.core.FeatureViewMeta}
 */
proto.feast.core.StreamFeatureView.prototype.getMeta = function() {
  return /** @type{?proto.feast.core.FeatureViewMeta} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureViewMeta, 2));
};


/**
 * @param {?proto.feast.core.FeatureViewMeta|undefined} value
 * @return {!proto.feast.core.StreamFeatureView} returns this
*/
proto.feast.core.StreamFeatureView.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.StreamFeatureView} returns this
 */
proto.feast.core.StreamFeatureView.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.StreamFeatureView.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.StreamFeatureViewSpec.repeatedFields_ = [3,4,5,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.StreamFeatureViewSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.StreamFeatureViewSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFeatureViewSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entitiesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto.feast.core.FeatureSpecV2.toObject, includeInstance),
    entityColumnsList: jspb.Message.toObjectList(msg.getEntityColumnsList(),
    proto.feast.core.FeatureSpecV2.toObject, includeInstance),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    owner: jspb.Message.getFieldWithDefault(msg, 8, ""),
    ttl: (f = msg.getTtl()) && proto.google.protobuf.Duration.toObject(includeInstance, f),
    batchSource: (f = msg.getBatchSource()) && proto.feast.core.DataSource.toObject(includeInstance, f),
    streamSource: (f = msg.getStreamSource()) && proto.feast.core.DataSource.toObject(includeInstance, f),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    userDefinedFunction: (f = msg.getUserDefinedFunction()) && proto.feast.core.UserDefinedFunction.toObject(includeInstance, f),
    mode: jspb.Message.getFieldWithDefault(msg, 14, ""),
    aggregationsList: jspb.Message.toObjectList(msg.getAggregationsList(),
    proto.feast.core.Aggregation.toObject, includeInstance),
    timestampField: jspb.Message.getFieldWithDefault(msg, 16, ""),
    featureTransformation: (f = msg.getFeatureTransformation()) && proto.feast.core.FeatureTransformationV2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.StreamFeatureViewSpec}
 */
proto.feast.core.StreamFeatureViewSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.StreamFeatureViewSpec;
  return proto.feast.core.StreamFeatureViewSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.StreamFeatureViewSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.StreamFeatureViewSpec}
 */
proto.feast.core.StreamFeatureViewSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addEntities(value);
      break;
    case 4:
      var value = new proto.feast.core.FeatureSpecV2;
      reader.readMessage(value,proto.feast.core.FeatureSpecV2.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 5:
      var value = new proto.feast.core.FeatureSpecV2;
      reader.readMessage(value,proto.feast.core.FeatureSpecV2.deserializeBinaryFromReader);
      msg.addEntityColumns(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 9:
      var value = new proto.google.protobuf.Duration;
      reader.readMessage(value,proto.google.protobuf.Duration.deserializeBinaryFromReader);
      msg.setTtl(value);
      break;
    case 10:
      var value = new proto.feast.core.DataSource;
      reader.readMessage(value,proto.feast.core.DataSource.deserializeBinaryFromReader);
      msg.setBatchSource(value);
      break;
    case 11:
      var value = new proto.feast.core.DataSource;
      reader.readMessage(value,proto.feast.core.DataSource.deserializeBinaryFromReader);
      msg.setStreamSource(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 13:
      var value = new proto.feast.core.UserDefinedFunction;
      reader.readMessage(value,proto.feast.core.UserDefinedFunction.deserializeBinaryFromReader);
      msg.setUserDefinedFunction(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setMode(value);
      break;
    case 15:
      var value = new proto.feast.core.Aggregation;
      reader.readMessage(value,proto.feast.core.Aggregation.deserializeBinaryFromReader);
      msg.addAggregations(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestampField(value);
      break;
    case 17:
      var value = new proto.feast.core.FeatureTransformationV2;
      reader.readMessage(value,proto.feast.core.FeatureTransformationV2.deserializeBinaryFromReader);
      msg.setFeatureTransformation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.StreamFeatureViewSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.StreamFeatureViewSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFeatureViewSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.feast.core.FeatureSpecV2.serializeBinaryToWriter
    );
  }
  f = message.getEntityColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.feast.core.FeatureSpecV2.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTtl();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.google.protobuf.Duration.serializeBinaryToWriter
    );
  }
  f = message.getBatchSource();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.feast.core.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getStreamSource();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.feast.core.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getUserDefinedFunction();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.feast.core.UserDefinedFunction.serializeBinaryToWriter
    );
  }
  f = message.getMode();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getAggregationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.feast.core.Aggregation.serializeBinaryToWriter
    );
  }
  f = message.getTimestampField();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getFeatureTransformation();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.feast.core.FeatureTransformationV2.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string entities = 3;
 * @return {!Array<string>}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getEntitiesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.setEntitiesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.addEntities = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * repeated FeatureSpecV2 features = 4;
 * @return {!Array<!proto.feast.core.FeatureSpecV2>}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureSpecV2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureSpecV2, 4));
};


/**
 * @param {!Array<!proto.feast.core.FeatureSpecV2>} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
*/
proto.feast.core.StreamFeatureViewSpec.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.feast.core.FeatureSpecV2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureSpecV2}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.feast.core.FeatureSpecV2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * repeated FeatureSpecV2 entity_columns = 5;
 * @return {!Array<!proto.feast.core.FeatureSpecV2>}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getEntityColumnsList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureSpecV2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureSpecV2, 5));
};


/**
 * @param {!Array<!proto.feast.core.FeatureSpecV2>} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
*/
proto.feast.core.StreamFeatureViewSpec.prototype.setEntityColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.feast.core.FeatureSpecV2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureSpecV2}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.addEntityColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.feast.core.FeatureSpecV2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.clearEntityColumnsList = function() {
  return this.setEntityColumnsList([]);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * map<string, string> tags = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};


/**
 * optional string owner = 8;
 * @return {string}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional google.protobuf.Duration ttl = 9;
 * @return {?proto.google.protobuf.Duration}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getTtl = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Duration, 9));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
*/
proto.feast.core.StreamFeatureViewSpec.prototype.setTtl = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.clearTtl = function() {
  return this.setTtl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.hasTtl = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional DataSource batch_source = 10;
 * @return {?proto.feast.core.DataSource}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getBatchSource = function() {
  return /** @type{?proto.feast.core.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource, 10));
};


/**
 * @param {?proto.feast.core.DataSource|undefined} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
*/
proto.feast.core.StreamFeatureViewSpec.prototype.setBatchSource = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.clearBatchSource = function() {
  return this.setBatchSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.hasBatchSource = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional DataSource stream_source = 11;
 * @return {?proto.feast.core.DataSource}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getStreamSource = function() {
  return /** @type{?proto.feast.core.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource, 11));
};


/**
 * @param {?proto.feast.core.DataSource|undefined} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
*/
proto.feast.core.StreamFeatureViewSpec.prototype.setStreamSource = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.clearStreamSource = function() {
  return this.setStreamSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.hasStreamSource = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool online = 12;
 * @return {boolean}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional UserDefinedFunction user_defined_function = 13;
 * @return {?proto.feast.core.UserDefinedFunction}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getUserDefinedFunction = function() {
  return /** @type{?proto.feast.core.UserDefinedFunction} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.UserDefinedFunction, 13));
};


/**
 * @param {?proto.feast.core.UserDefinedFunction|undefined} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
*/
proto.feast.core.StreamFeatureViewSpec.prototype.setUserDefinedFunction = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.clearUserDefinedFunction = function() {
  return this.setUserDefinedFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.hasUserDefinedFunction = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string mode = 14;
 * @return {string}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.setMode = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * repeated Aggregation aggregations = 15;
 * @return {!Array<!proto.feast.core.Aggregation>}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getAggregationsList = function() {
  return /** @type{!Array<!proto.feast.core.Aggregation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.Aggregation, 15));
};


/**
 * @param {!Array<!proto.feast.core.Aggregation>} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
*/
proto.feast.core.StreamFeatureViewSpec.prototype.setAggregationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.feast.core.Aggregation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.Aggregation}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.addAggregations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.feast.core.Aggregation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.clearAggregationsList = function() {
  return this.setAggregationsList([]);
};


/**
 * optional string timestamp_field = 16;
 * @return {string}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getTimestampField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.setTimestampField = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional FeatureTransformationV2 feature_transformation = 17;
 * @return {?proto.feast.core.FeatureTransformationV2}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.getFeatureTransformation = function() {
  return /** @type{?proto.feast.core.FeatureTransformationV2} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureTransformationV2, 17));
};


/**
 * @param {?proto.feast.core.FeatureTransformationV2|undefined} value
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
*/
proto.feast.core.StreamFeatureViewSpec.prototype.setFeatureTransformation = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.StreamFeatureViewSpec} returns this
 */
proto.feast.core.StreamFeatureViewSpec.prototype.clearFeatureTransformation = function() {
  return this.setFeatureTransformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.StreamFeatureViewSpec.prototype.hasFeatureTransformation = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.SavedDatasetSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.SavedDatasetSpec.repeatedFields_, null);
};
goog.inherits(proto.feast.core.SavedDatasetSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.SavedDatasetSpec.displayName = 'proto.feast.core.SavedDatasetSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.SavedDatasetStorage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.SavedDatasetStorage.oneofGroups_);
};
goog.inherits(proto.feast.core.SavedDatasetStorage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.SavedDatasetStorage.displayName = 'proto.feast.core.SavedDatasetStorage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.SavedDatasetMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.SavedDatasetMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.SavedDatasetMeta.displayName = 'proto.feast.core.SavedDatasetMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.SavedDataset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.SavedDataset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.SavedDataset.displayName = 'proto.feast.core.SavedDataset';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.SavedDatasetSpec.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.SavedDatasetSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.SavedDatasetSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.SavedDatasetSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SavedDatasetSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    featuresList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    joinKeysList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    fullFeatureNames: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    storage: (f = msg.getStorage()) && proto.feast.core.SavedDatasetStorage.toObject(includeInstance, f),
    featureServiceName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.SavedDatasetSpec}
 */
proto.feast.core.SavedDatasetSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.SavedDatasetSpec;
  return proto.feast.core.SavedDatasetSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.SavedDatasetSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.SavedDatasetSpec}
 */
proto.feast.core.SavedDatasetSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeatures(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addJoinKeys(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFullFeatureNames(value);
      break;
    case 6:
      var value = new proto.feast.core.SavedDatasetStorage;
      reader.readMessage(value,proto.feast.core.SavedDatasetStorage.deserializeBinaryFromReader);
      msg.setStorage(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureServiceName(value);
      break;
    case 7:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.SavedDatasetSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.SavedDatasetSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.SavedDatasetSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SavedDatasetSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getJoinKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getFullFeatureNames();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getStorage();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.feast.core.SavedDatasetStorage.serializeBinaryToWriter
    );
  }
  f = message.getFeatureServiceName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.SavedDatasetSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.SavedDatasetSpec} returns this
 */
proto.feast.core.SavedDatasetSpec.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.core.SavedDatasetSpec.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.SavedDatasetSpec} returns this
 */
proto.feast.core.SavedDatasetSpec.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string features = 3;
 * @return {!Array<string>}
 */
proto.feast.core.SavedDatasetSpec.prototype.getFeaturesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.feast.core.SavedDatasetSpec} returns this
 */
proto.feast.core.SavedDatasetSpec.prototype.setFeaturesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.feast.core.SavedDatasetSpec} returns this
 */
proto.feast.core.SavedDatasetSpec.prototype.addFeatures = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.SavedDatasetSpec} returns this
 */
proto.feast.core.SavedDatasetSpec.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * repeated string join_keys = 4;
 * @return {!Array<string>}
 */
proto.feast.core.SavedDatasetSpec.prototype.getJoinKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.feast.core.SavedDatasetSpec} returns this
 */
proto.feast.core.SavedDatasetSpec.prototype.setJoinKeysList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.feast.core.SavedDatasetSpec} returns this
 */
proto.feast.core.SavedDatasetSpec.prototype.addJoinKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.SavedDatasetSpec} returns this
 */
proto.feast.core.SavedDatasetSpec.prototype.clearJoinKeysList = function() {
  return this.setJoinKeysList([]);
};


/**
 * optional bool full_feature_names = 5;
 * @return {boolean}
 */
proto.feast.core.SavedDatasetSpec.prototype.getFullFeatureNames = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.core.SavedDatasetSpec} returns this
 */
proto.feast.core.SavedDatasetSpec.prototype.setFullFeatureNames = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional SavedDatasetStorage storage = 6;
 * @return {?proto.feast.core.SavedDatasetStorage}
 */
proto.feast.core.SavedDatasetSpec.prototype.getStorage = function() {
  return /** @type{?proto.feast.core.SavedDatasetStorage} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.SavedDatasetStorage, 6));
};


/**
 * @param {?proto.feast.core.SavedDatasetStorage|undefined} value
 * @return {!proto.feast.core.SavedDatasetSpec} returns this
*/
proto.feast.core.SavedDatasetSpec.prototype.setStorage = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDatasetSpec} returns this
 */
proto.feast.core.SavedDatasetSpec.prototype.clearStorage = function() {
  return this.setStorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDatasetSpec.prototype.hasStorage = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string feature_service_name = 8;
 * @return {string}
 */
proto.feast.core.SavedDatasetSpec.prototype.getFeatureServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.SavedDatasetSpec} returns this
 */
proto.feast.core.SavedDatasetSpec.prototype.setFeatureServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * map<string, string> tags = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.SavedDatasetSpec.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.SavedDatasetSpec} returns this
 */
proto.feast.core.SavedDatasetSpec.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.SavedDatasetStorage.oneofGroups_ = [[4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.feast.core.SavedDatasetStorage.KindCase = {
  KIND_NOT_SET: 0,
  FILE_STORAGE: 4,
  BIGQUERY_STORAGE: 5,
  REDSHIFT_STORAGE: 6,
  SNOWFLAKE_STORAGE: 7,
  TRINO_STORAGE: 8,
  SPARK_STORAGE: 9,
  CUSTOM_STORAGE: 10,
  ATHENA_STORAGE: 11
};

/**
 * @return {proto.feast.core.SavedDatasetStorage.KindCase}
 */
proto.feast.core.SavedDatasetStorage.prototype.getKindCase = function() {
  return /** @type {proto.feast.core.SavedDatasetStorage.KindCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.SavedDatasetStorage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.SavedDatasetStorage.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.SavedDatasetStorage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.SavedDatasetStorage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SavedDatasetStorage.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileStorage: (f = msg.getFileStorage()) && proto.feast.core.DataSource.FileOptions.toObject(includeInstance, f),
    bigqueryStorage: (f = msg.getBigqueryStorage()) && proto.feast.core.DataSource.BigQueryOptions.toObject(includeInstance, f),
    redshiftStorage: (f = msg.getRedshiftStorage()) && proto.feast.core.DataSource.RedshiftOptions.toObject(includeInstance, f),
    snowflakeStorage: (f = msg.getSnowflakeStorage()) && proto.feast.core.DataSource.SnowflakeOptions.toObject(includeInstance, f),
    trinoStorage: (f = msg.getTrinoStorage()) && proto.feast.core.DataSource.TrinoOptions.toObject(includeInstance, f),
    sparkStorage: (f = msg.getSparkStorage()) && proto.feast.core.DataSource.SparkOptions.toObject(includeInstance, f),
    customStorage: (f = msg.getCustomStorage()) && proto.feast.core.DataSource.CustomSourceOptions.toObject(includeInstance, f),
    athenaStorage: (f = msg.getAthenaStorage()) && proto.feast.core.DataSource.AthenaOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.SavedDatasetStorage}
 */
proto.feast.core.SavedDatasetStorage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.SavedDatasetStorage;
  return proto.feast.core.SavedDatasetStorage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.SavedDatasetStorage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.SavedDatasetStorage}
 */
proto.feast.core.SavedDatasetStorage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new proto.feast.core.DataSource.FileOptions;
      reader.readMessage(value,proto.feast.core.DataSource.FileOptions.deserializeBinaryFromReader);
      msg.setFileStorage(value);
      break;
    case 5:
      var value = new proto.feast.core.DataSource.BigQueryOptions;
      reader.readMessage(value,proto.feast.core.DataSource.BigQueryOptions.deserializeBinaryFromReader);
      msg.setBigqueryStorage(value);
      break;
    case 6:
      var value = new proto.feast.core.DataSource.RedshiftOptions;
      reader.readMessage(value,proto.feast.core.DataSource.RedshiftOptions.deserializeBinaryFromReader);
      msg.setRedshiftStorage(value);
      break;
    case 7:
      var value = new proto.feast.core.DataSource.SnowflakeOptions;
      reader.readMessage(value,proto.feast.core.DataSource.SnowflakeOptions.deserializeBinaryFromReader);
      msg.setSnowflakeStorage(value);
      break;
    case 8:
      var value = new proto.feast.core.DataSource.TrinoOptions;
      reader.readMessage(value,proto.feast.core.DataSource.TrinoOptions.deserializeBinaryFromReader);
      msg.setTrinoStorage(value);
      break;
    case 9:
      var value = new proto.feast.core.DataSource.SparkOptions;
      reader.readMessage(value,proto.feast.core.DataSource.SparkOptions.deserializeBinaryFromReader);
      msg.setSparkStorage(value);
      break;
    case 10:
      var value = new proto.feast.core.DataSource.CustomSourceOptions;
      reader.readMessage(value,proto.feast.core.DataSource.CustomSourceOptions.deserializeBinaryFromReader);
      msg.setCustomStorage(value);
      break;
    case 11:
      var value = new proto.feast.core.DataSource.AthenaOptions;
      reader.readMessage(value,proto.feast.core.DataSource.AthenaOptions.deserializeBinaryFromReader);
      msg.setAthenaStorage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.SavedDatasetStorage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.SavedDatasetStorage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.SavedDatasetStorage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SavedDatasetStorage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileStorage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.feast.core.DataSource.FileOptions.serializeBinaryToWriter
    );
  }
  f = message.getBigqueryStorage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.feast.core.DataSource.BigQueryOptions.serializeBinaryToWriter
    );
  }
  f = message.getRedshiftStorage();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.feast.core.DataSource.RedshiftOptions.serializeBinaryToWriter
    );
  }
  f = message.getSnowflakeStorage();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.feast.core.DataSource.SnowflakeOptions.serializeBinaryToWriter
    );
  }
  f = message.getTrinoStorage();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.feast.core.DataSource.TrinoOptions.serializeBinaryToWriter
    );
  }
  f = message.getSparkStorage();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.feast.core.DataSource.SparkOptions.serializeBinaryToWriter
    );
  }
  f = message.getCustomStorage();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.feast.core.DataSource.CustomSourceOptions.serializeBinaryToWriter
    );
  }
  f = message.getAthenaStorage();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.feast.core.DataSource.AthenaOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional DataSource.FileOptions file_storage = 4;
 * @return {?proto.feast.core.DataSource.FileOptions}
 */
proto.feast.core.SavedDatasetStorage.prototype.getFileStorage = function() {
  return /** @type{?proto.feast.core.DataSource.FileOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.FileOptions, 4));
};


/**
 * @param {?proto.feast.core.DataSource.FileOptions|undefined} value
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
*/
proto.feast.core.SavedDatasetStorage.prototype.setFileStorage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.feast.core.SavedDatasetStorage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
 */
proto.feast.core.SavedDatasetStorage.prototype.clearFileStorage = function() {
  return this.setFileStorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDatasetStorage.prototype.hasFileStorage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DataSource.BigQueryOptions bigquery_storage = 5;
 * @return {?proto.feast.core.DataSource.BigQueryOptions}
 */
proto.feast.core.SavedDatasetStorage.prototype.getBigqueryStorage = function() {
  return /** @type{?proto.feast.core.DataSource.BigQueryOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.BigQueryOptions, 5));
};


/**
 * @param {?proto.feast.core.DataSource.BigQueryOptions|undefined} value
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
*/
proto.feast.core.SavedDatasetStorage.prototype.setBigqueryStorage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.feast.core.SavedDatasetStorage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
 */
proto.feast.core.SavedDatasetStorage.prototype.clearBigqueryStorage = function() {
  return this.setBigqueryStorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDatasetStorage.prototype.hasBigqueryStorage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DataSource.RedshiftOptions redshift_storage = 6;
 * @return {?proto.feast.core.DataSource.RedshiftOptions}
 */
proto.feast.core.SavedDatasetStorage.prototype.getRedshiftStorage = function() {
  return /** @type{?proto.feast.core.DataSource.RedshiftOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.RedshiftOptions, 6));
};


/**
 * @param {?proto.feast.core.DataSource.RedshiftOptions|undefined} value
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
*/
proto.feast.core.SavedDatasetStorage.prototype.setRedshiftStorage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.feast.core.SavedDatasetStorage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
 */
proto.feast.core.SavedDatasetStorage.prototype.clearRedshiftStorage = function() {
  return this.setRedshiftStorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDatasetStorage.prototype.hasRedshiftStorage = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DataSource.SnowflakeOptions snowflake_storage = 7;
 * @return {?proto.feast.core.DataSource.SnowflakeOptions}
 */
proto.feast.core.SavedDatasetStorage.prototype.getSnowflakeStorage = function() {
  return /** @type{?proto.feast.core.DataSource.SnowflakeOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.SnowflakeOptions, 7));
};


/**
 * @param {?proto.feast.core.DataSource.SnowflakeOptions|undefined} value
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
*/
proto.feast.core.SavedDatasetStorage.prototype.setSnowflakeStorage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.feast.core.SavedDatasetStorage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
 */
proto.feast.core.SavedDatasetStorage.prototype.clearSnowflakeStorage = function() {
  return this.setSnowflakeStorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDatasetStorage.prototype.hasSnowflakeStorage = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DataSource.TrinoOptions trino_storage = 8;
 * @return {?proto.feast.core.DataSource.TrinoOptions}
 */
proto.feast.core.SavedDatasetStorage.prototype.getTrinoStorage = function() {
  return /** @type{?proto.feast.core.DataSource.TrinoOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.TrinoOptions, 8));
};


/**
 * @param {?proto.feast.core.DataSource.TrinoOptions|undefined} value
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
*/
proto.feast.core.SavedDatasetStorage.prototype.setTrinoStorage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.feast.core.SavedDatasetStorage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
 */
proto.feast.core.SavedDatasetStorage.prototype.clearTrinoStorage = function() {
  return this.setTrinoStorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDatasetStorage.prototype.hasTrinoStorage = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional DataSource.SparkOptions spark_storage = 9;
 * @return {?proto.feast.core.DataSource.SparkOptions}
 */
proto.feast.core.SavedDatasetStorage.prototype.getSparkStorage = function() {
  return /** @type{?proto.feast.core.DataSource.SparkOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.SparkOptions, 9));
};


/**
 * @param {?proto.feast.core.DataSource.SparkOptions|undefined} value
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
*/
proto.feast.core.SavedDatasetStorage.prototype.setSparkStorage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.feast.core.SavedDatasetStorage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
 */
proto.feast.core.SavedDatasetStorage.prototype.clearSparkStorage = function() {
  return this.setSparkStorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDatasetStorage.prototype.hasSparkStorage = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional DataSource.CustomSourceOptions custom_storage = 10;
 * @return {?proto.feast.core.DataSource.CustomSourceOptions}
 */
proto.feast.core.SavedDatasetStorage.prototype.getCustomStorage = function() {
  return /** @type{?proto.feast.core.DataSource.CustomSourceOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.CustomSourceOptions, 10));
};


/**
 * @param {?proto.feast.core.DataSource.CustomSourceOptions|undefined} value
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
*/
proto.feast.core.SavedDatasetStorage.prototype.setCustomStorage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.feast.core.SavedDatasetStorage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
 */
proto.feast.core.SavedDatasetStorage.prototype.clearCustomStorage = function() {
  return this.setCustomStorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDatasetStorage.prototype.hasCustomStorage = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional DataSource.AthenaOptions athena_storage = 11;
 * @return {?proto.feast.core.DataSource.AthenaOptions}
 */
proto.feast.core.SavedDatasetStorage.prototype.getAthenaStorage = function() {
  return /** @type{?proto.feast.core.DataSource.AthenaOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.AthenaOptions, 11));
};


/**
 * @param {?proto.feast.core.DataSource.AthenaOptions|undefined} value
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
*/
proto.feast.core.SavedDatasetStorage.prototype.setAthenaStorage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.feast.core.SavedDatasetStorage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDatasetStorage} returns this
 */
proto.feast.core.SavedDatasetStorage.prototype.clearAthenaStorage = function() {
  return this.setAthenaStorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDatasetStorage.prototype.hasAthenaStorage = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.SavedDatasetMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.SavedDatasetMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.SavedDatasetMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SavedDatasetMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdTimestamp: (f = msg.getCreatedTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    lastUpdatedTimestamp: (f = msg.getLastUpdatedTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    minEventTimestamp: (f = msg.getMinEventTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    maxEventTimestamp: (f = msg.getMaxEventTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.SavedDatasetMeta}
 */
proto.feast.core.SavedDatasetMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.SavedDatasetMeta;
  return proto.feast.core.SavedDatasetMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.SavedDatasetMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.SavedDatasetMeta}
 */
proto.feast.core.SavedDatasetMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedTimestamp(value);
      break;
    case 2:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdatedTimestamp(value);
      break;
    case 3:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setMinEventTimestamp(value);
      break;
    case 4:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setMaxEventTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.SavedDatasetMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.SavedDatasetMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.SavedDatasetMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SavedDatasetMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMinEventTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMaxEventTimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp created_timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.SavedDatasetMeta.prototype.getCreatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.SavedDatasetMeta} returns this
*/
proto.feast.core.SavedDatasetMeta.prototype.setCreatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDatasetMeta} returns this
 */
proto.feast.core.SavedDatasetMeta.prototype.clearCreatedTimestamp = function() {
  return this.setCreatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDatasetMeta.prototype.hasCreatedTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp last_updated_timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.SavedDatasetMeta.prototype.getLastUpdatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.SavedDatasetMeta} returns this
*/
proto.feast.core.SavedDatasetMeta.prototype.setLastUpdatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDatasetMeta} returns this
 */
proto.feast.core.SavedDatasetMeta.prototype.clearLastUpdatedTimestamp = function() {
  return this.setLastUpdatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDatasetMeta.prototype.hasLastUpdatedTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp min_event_timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.SavedDatasetMeta.prototype.getMinEventTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.SavedDatasetMeta} returns this
*/
proto.feast.core.SavedDatasetMeta.prototype.setMinEventTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDatasetMeta} returns this
 */
proto.feast.core.SavedDatasetMeta.prototype.clearMinEventTimestamp = function() {
  return this.setMinEventTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDatasetMeta.prototype.hasMinEventTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp max_event_timestamp = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.SavedDatasetMeta.prototype.getMaxEventTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.SavedDatasetMeta} returns this
*/
proto.feast.core.SavedDatasetMeta.prototype.setMaxEventTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDatasetMeta} returns this
 */
proto.feast.core.SavedDatasetMeta.prototype.clearMaxEventTimestamp = function() {
  return this.setMaxEventTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDatasetMeta.prototype.hasMaxEventTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.SavedDataset.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.SavedDataset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.SavedDataset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SavedDataset.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.feast.core.SavedDatasetSpec.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.feast.core.SavedDatasetMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.SavedDataset}
 */
proto.feast.core.SavedDataset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.SavedDataset;
  return proto.feast.core.SavedDataset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.SavedDataset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.SavedDataset}
 */
proto.feast.core.SavedDataset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.SavedDatasetSpec;
      reader.readMessage(value,proto.feast.core.SavedDatasetSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.feast.core.SavedDatasetMeta;
      reader.readMessage(value,proto.feast.core.SavedDatasetMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.SavedDataset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.SavedDataset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.SavedDataset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SavedDataset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.SavedDatasetSpec.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.SavedDatasetMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional SavedDatasetSpec spec = 1;
 * @return {?proto.feast.core.SavedDatasetSpec}
 */
proto.feast.core.SavedDataset.prototype.getSpec = function() {
  return /** @type{?proto.feast.core.SavedDatasetSpec} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.SavedDatasetSpec, 1));
};


/**
 * @param {?proto.feast.core.SavedDatasetSpec|undefined} value
 * @return {!proto.feast.core.SavedDataset} returns this
*/
proto.feast.core.SavedDataset.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDataset} returns this
 */
proto.feast.core.SavedDataset.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDataset.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SavedDatasetMeta meta = 2;
 * @return {?proto.feast.core.SavedDatasetMeta}
 */
proto.feast.core.SavedDataset.prototype.getMeta = function() {
  return /** @type{?proto.feast.core.SavedDatasetMeta} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.SavedDatasetMeta, 2));
};


/**
 * @param {?proto.feast.core.SavedDatasetMeta|undefined} value
 * @return {!proto.feast.core.SavedDataset} returns this
*/
proto.feast.core.SavedDataset.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.SavedDataset} returns this
 */
proto.feast.core.SavedDataset.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.SavedDataset.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.GEValidationProfiler = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.GEValidationProfiler, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.GEValidationProfiler.displayName = 'proto.feast.core.GEValidationProfiler';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.GEValidationProfiler.UserDefinedProfiler = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.GEValidationProfiler.UserDefinedProfiler, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.GEValidationProfiler.UserDefinedProfiler.displayName = 'proto.feast.core.GEValidationProfiler.UserDefinedProfiler';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.GEValidationProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.GEValidationProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.GEValidationProfile.displayName = 'proto.feast.core.GEValidationProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.ValidationReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.ValidationReference.oneofGroups_);
};
goog.inherits(proto.feast.core.ValidationReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.ValidationReference.displayName = 'proto.feast.core.ValidationReference';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.GEValidationProfiler.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.GEValidationProfiler.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.GEValidationProfiler} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.GEValidationProfiler.toObject = function(includeInstance, msg) {
  var f, obj = {
    profiler: (f = msg.getProfiler()) && proto.feast.core.GEValidationProfiler.UserDefinedProfiler.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.GEValidationProfiler}
 */
proto.feast.core.GEValidationProfiler.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.GEValidationProfiler;
  return proto.feast.core.GEValidationProfiler.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.GEValidationProfiler} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.GEValidationProfiler}
 */
proto.feast.core.GEValidationProfiler.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.GEValidationProfiler.UserDefinedProfiler;
      reader.readMessage(value,proto.feast.core.GEValidationProfiler.UserDefinedProfiler.deserializeBinaryFromReader);
      msg.setProfiler(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.GEValidationProfiler.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.GEValidationProfiler.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.GEValidationProfiler} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.GEValidationProfiler.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfiler();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.GEValidationProfiler.UserDefinedProfiler.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.GEValidationProfiler.UserDefinedProfiler.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.GEValidationProfiler.UserDefinedProfiler.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.GEValidationProfiler.UserDefinedProfiler} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.GEValidationProfiler.UserDefinedProfiler.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.GEValidationProfiler.UserDefinedProfiler}
 */
proto.feast.core.GEValidationProfiler.UserDefinedProfiler.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.GEValidationProfiler.UserDefinedProfiler;
  return proto.feast.core.GEValidationProfiler.UserDefinedProfiler.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.GEValidationProfiler.UserDefinedProfiler} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.GEValidationProfiler.UserDefinedProfiler}
 */
proto.feast.core.GEValidationProfiler.UserDefinedProfiler.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.GEValidationProfiler.UserDefinedProfiler.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.GEValidationProfiler.UserDefinedProfiler.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.GEValidationProfiler.UserDefinedProfiler} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.GEValidationProfiler.UserDefinedProfiler.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes body = 1;
 * @return {!(string|Uint8Array)}
 */
proto.feast.core.GEValidationProfiler.UserDefinedProfiler.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes body = 1;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.feast.core.GEValidationProfiler.UserDefinedProfiler.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.feast.core.GEValidationProfiler.UserDefinedProfiler.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.core.GEValidationProfiler.UserDefinedProfiler} returns this
 */
proto.feast.core.GEValidationProfiler.UserDefinedProfiler.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional UserDefinedProfiler profiler = 1;
 * @return {?proto.feast.core.GEValidationProfiler.UserDefinedProfiler}
 */
proto.feast.core.GEValidationProfiler.prototype.getProfiler = function() {
  return /** @type{?proto.feast.core.GEValidationProfiler.UserDefinedProfiler} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.GEValidationProfiler.UserDefinedProfiler, 1));
};


/**
 * @param {?proto.feast.core.GEValidationProfiler.UserDefinedProfiler|undefined} value
 * @return {!proto.feast.core.GEValidationProfiler} returns this
*/
proto.feast.core.GEValidationProfiler.prototype.setProfiler = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.GEValidationProfiler} returns this
 */
proto.feast.core.GEValidationProfiler.prototype.clearProfiler = function() {
  return this.setProfiler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.GEValidationProfiler.prototype.hasProfiler = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.GEValidationProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.GEValidationProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.GEValidationProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.GEValidationProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    expectationSuite: msg.getExpectationSuite_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.GEValidationProfile}
 */
proto.feast.core.GEValidationProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.GEValidationProfile;
  return proto.feast.core.GEValidationProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.GEValidationProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.GEValidationProfile}
 */
proto.feast.core.GEValidationProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExpectationSuite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.GEValidationProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.GEValidationProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.GEValidationProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.GEValidationProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpectationSuite_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes expectation_suite = 1;
 * @return {!(string|Uint8Array)}
 */
proto.feast.core.GEValidationProfile.prototype.getExpectationSuite = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes expectation_suite = 1;
 * This is a type-conversion wrapper around `getExpectationSuite()`
 * @return {string}
 */
proto.feast.core.GEValidationProfile.prototype.getExpectationSuite_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExpectationSuite()));
};


/**
 * optional bytes expectation_suite = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExpectationSuite()`
 * @return {!Uint8Array}
 */
proto.feast.core.GEValidationProfile.prototype.getExpectationSuite_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExpectationSuite()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.core.GEValidationProfile} returns this
 */
proto.feast.core.GEValidationProfile.prototype.setExpectationSuite = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.ValidationReference.oneofGroups_ = [[6],[7]];

/**
 * @enum {number}
 */
proto.feast.core.ValidationReference.ProfilerCase = {
  PROFILER_NOT_SET: 0,
  GE_PROFILER: 6
};

/**
 * @return {proto.feast.core.ValidationReference.ProfilerCase}
 */
proto.feast.core.ValidationReference.prototype.getProfilerCase = function() {
  return /** @type {proto.feast.core.ValidationReference.ProfilerCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.ValidationReference.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.feast.core.ValidationReference.CachedProfileCase = {
  CACHED_PROFILE_NOT_SET: 0,
  GE_PROFILE: 7
};

/**
 * @return {proto.feast.core.ValidationReference.CachedProfileCase}
 */
proto.feast.core.ValidationReference.prototype.getCachedProfileCase = function() {
  return /** @type {proto.feast.core.ValidationReference.CachedProfileCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.ValidationReference.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.ValidationReference.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.ValidationReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.ValidationReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.ValidationReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    referenceDatasetName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    project: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    geProfiler: (f = msg.getGeProfiler()) && proto.feast.core.GEValidationProfiler.toObject(includeInstance, f),
    geProfile: (f = msg.getGeProfile()) && proto.feast.core.GEValidationProfile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.ValidationReference}
 */
proto.feast.core.ValidationReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.ValidationReference;
  return proto.feast.core.ValidationReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.ValidationReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.ValidationReference}
 */
proto.feast.core.ValidationReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceDatasetName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 6:
      var value = new proto.feast.core.GEValidationProfiler;
      reader.readMessage(value,proto.feast.core.GEValidationProfiler.deserializeBinaryFromReader);
      msg.setGeProfiler(value);
      break;
    case 7:
      var value = new proto.feast.core.GEValidationProfile;
      reader.readMessage(value,proto.feast.core.GEValidationProfile.deserializeBinaryFromReader);
      msg.setGeProfile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.ValidationReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.ValidationReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.ValidationReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.ValidationReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReferenceDatasetName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getGeProfiler();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.feast.core.GEValidationProfiler.serializeBinaryToWriter
    );
  }
  f = message.getGeProfile();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.feast.core.GEValidationProfile.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.ValidationReference.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.ValidationReference} returns this
 */
proto.feast.core.ValidationReference.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reference_dataset_name = 2;
 * @return {string}
 */
proto.feast.core.ValidationReference.prototype.getReferenceDatasetName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.ValidationReference} returns this
 */
proto.feast.core.ValidationReference.prototype.setReferenceDatasetName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string project = 3;
 * @return {string}
 */
proto.feast.core.ValidationReference.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.ValidationReference} returns this
 */
proto.feast.core.ValidationReference.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.feast.core.ValidationReference.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.ValidationReference} returns this
 */
proto.feast.core.ValidationReference.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, string> tags = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.ValidationReference.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.ValidationReference} returns this
 */
proto.feast.core.ValidationReference.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};


/**
 * optional GEValidationProfiler ge_profiler = 6;
 * @return {?proto.feast.core.GEValidationProfiler}
 */
proto.feast.core.ValidationReference.prototype.getGeProfiler = function() {
  return /** @type{?proto.feast.core.GEValidationProfiler} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.GEValidationProfiler, 6));
};


/**
 * @param {?proto.feast.core.GEValidationProfiler|undefined} value
 * @return {!proto.feast.core.ValidationReference} returns this
*/
proto.feast.core.ValidationReference.prototype.setGeProfiler = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.feast.core.ValidationReference.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.ValidationReference} returns this
 */
proto.feast.core.ValidationReference.prototype.clearGeProfiler = function() {
  return this.setGeProfiler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.ValidationReference.prototype.hasGeProfiler = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional GEValidationProfile ge_profile = 7;
 * @return {?proto.feast.core.GEValidationProfile}
 */
proto.feast.core.ValidationReference.prototype.getGeProfile = function() {
  return /** @type{?proto.feast.core.GEValidationProfile} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.GEValidationProfile, 7));
};


/**
 * @param {?proto.feast.core.GEValidationProfile|undefined} value
 * @return {!proto.feast.core.ValidationReference} returns this
*/
proto.feast.core.ValidationReference.prototype.setGeProfile = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.feast.core.ValidationReference.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.ValidationReference} returns this
 */
proto.feast.core.ValidationReference.prototype.clearGeProfile = function() {
  return this.setGeProfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.ValidationReference.prototype.hasGeProfile = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.Registry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.Registry.repeatedFields_, null);
};
goog.inherits(proto.feast.core.Registry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.Registry.displayName = 'proto.feast.core.Registry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.ProjectMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.ProjectMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.ProjectMetadata.displayName = 'proto.feast.core.ProjectMetadata';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.Registry.repeatedFields_ = [1,2,6,12,8,14,7,11,13,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.Registry.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.Registry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.Registry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Registry.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.feast.core.Entity.toObject, includeInstance),
    featureTablesList: jspb.Message.toObjectList(msg.getFeatureTablesList(),
    proto.feast.core.FeatureTable.toObject, includeInstance),
    featureViewsList: jspb.Message.toObjectList(msg.getFeatureViewsList(),
    proto.feast.core.FeatureView.toObject, includeInstance),
    dataSourcesList: jspb.Message.toObjectList(msg.getDataSourcesList(),
    proto.feast.core.DataSource.toObject, includeInstance),
    onDemandFeatureViewsList: jspb.Message.toObjectList(msg.getOnDemandFeatureViewsList(),
    proto.feast.core.OnDemandFeatureView.toObject, includeInstance),
    streamFeatureViewsList: jspb.Message.toObjectList(msg.getStreamFeatureViewsList(),
    proto.feast.core.StreamFeatureView.toObject, includeInstance),
    featureServicesList: jspb.Message.toObjectList(msg.getFeatureServicesList(),
    proto.feast.core.FeatureService.toObject, includeInstance),
    savedDatasetsList: jspb.Message.toObjectList(msg.getSavedDatasetsList(),
    proto.feast.core.SavedDataset.toObject, includeInstance),
    validationReferencesList: jspb.Message.toObjectList(msg.getValidationReferencesList(),
    proto.feast.core.ValidationReference.toObject, includeInstance),
    infra: (f = msg.getInfra()) && proto.feast.core.Infra.toObject(includeInstance, f),
    projectMetadataList: jspb.Message.toObjectList(msg.getProjectMetadataList(),
    proto.feast.core.ProjectMetadata.toObject, includeInstance),
    registrySchemaVersion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    versionId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lastUpdated: (f = msg.getLastUpdated()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.Registry}
 */
proto.feast.core.Registry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.Registry;
  return proto.feast.core.Registry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.Registry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.Registry}
 */
proto.feast.core.Registry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.Entity;
      reader.readMessage(value,proto.feast.core.Entity.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    case 2:
      var value = new proto.feast.core.FeatureTable;
      reader.readMessage(value,proto.feast.core.FeatureTable.deserializeBinaryFromReader);
      msg.addFeatureTables(value);
      break;
    case 6:
      var value = new proto.feast.core.FeatureView;
      reader.readMessage(value,proto.feast.core.FeatureView.deserializeBinaryFromReader);
      msg.addFeatureViews(value);
      break;
    case 12:
      var value = new proto.feast.core.DataSource;
      reader.readMessage(value,proto.feast.core.DataSource.deserializeBinaryFromReader);
      msg.addDataSources(value);
      break;
    case 8:
      var value = new proto.feast.core.OnDemandFeatureView;
      reader.readMessage(value,proto.feast.core.OnDemandFeatureView.deserializeBinaryFromReader);
      msg.addOnDemandFeatureViews(value);
      break;
    case 14:
      var value = new proto.feast.core.StreamFeatureView;
      reader.readMessage(value,proto.feast.core.StreamFeatureView.deserializeBinaryFromReader);
      msg.addStreamFeatureViews(value);
      break;
    case 7:
      var value = new proto.feast.core.FeatureService;
      reader.readMessage(value,proto.feast.core.FeatureService.deserializeBinaryFromReader);
      msg.addFeatureServices(value);
      break;
    case 11:
      var value = new proto.feast.core.SavedDataset;
      reader.readMessage(value,proto.feast.core.SavedDataset.deserializeBinaryFromReader);
      msg.addSavedDatasets(value);
      break;
    case 13:
      var value = new proto.feast.core.ValidationReference;
      reader.readMessage(value,proto.feast.core.ValidationReference.deserializeBinaryFromReader);
      msg.addValidationReferences(value);
      break;
    case 10:
      var value = new proto.feast.core.Infra;
      reader.readMessage(value,proto.feast.core.Infra.deserializeBinaryFromReader);
      msg.setInfra(value);
      break;
    case 15:
      var value = new proto.feast.core.ProjectMetadata;
      reader.readMessage(value,proto.feast.core.ProjectMetadata.deserializeBinaryFromReader);
      msg.addProjectMetadata(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegistrySchemaVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersionId(value);
      break;
    case 5:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.Registry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.Registry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.Registry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Registry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.core.Entity.serializeBinaryToWriter
    );
  }
  f = message.getFeatureTablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.feast.core.FeatureTable.serializeBinaryToWriter
    );
  }
  f = message.getFeatureViewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.feast.core.FeatureView.serializeBinaryToWriter
    );
  }
  f = message.getDataSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.feast.core.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getOnDemandFeatureViewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.feast.core.OnDemandFeatureView.serializeBinaryToWriter
    );
  }
  f = message.getStreamFeatureViewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.feast.core.StreamFeatureView.serializeBinaryToWriter
    );
  }
  f = message.getFeatureServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.feast.core.FeatureService.serializeBinaryToWriter
    );
  }
  f = message.getSavedDatasetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.feast.core.SavedDataset.serializeBinaryToWriter
    );
  }
  f = message.getValidationReferencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.feast.core.ValidationReference.serializeBinaryToWriter
    );
  }
  f = message.getInfra();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.feast.core.Infra.serializeBinaryToWriter
    );
  }
  f = message.getProjectMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.feast.core.ProjectMetadata.serializeBinaryToWriter
    );
  }
  f = message.getRegistrySchemaVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVersionId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLastUpdated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Entity entities = 1;
 * @return {!Array<!proto.feast.core.Entity>}
 */
proto.feast.core.Registry.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.feast.core.Entity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.Entity, 1));
};


/**
 * @param {!Array<!proto.feast.core.Entity>} value
 * @return {!proto.feast.core.Registry} returns this
*/
proto.feast.core.Registry.prototype.setEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.core.Entity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.Entity}
 */
proto.feast.core.Registry.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.core.Entity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * repeated FeatureTable feature_tables = 2;
 * @return {!Array<!proto.feast.core.FeatureTable>}
 */
proto.feast.core.Registry.prototype.getFeatureTablesList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureTable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureTable, 2));
};


/**
 * @param {!Array<!proto.feast.core.FeatureTable>} value
 * @return {!proto.feast.core.Registry} returns this
*/
proto.feast.core.Registry.prototype.setFeatureTablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.feast.core.FeatureTable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureTable}
 */
proto.feast.core.Registry.prototype.addFeatureTables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.feast.core.FeatureTable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.clearFeatureTablesList = function() {
  return this.setFeatureTablesList([]);
};


/**
 * repeated FeatureView feature_views = 6;
 * @return {!Array<!proto.feast.core.FeatureView>}
 */
proto.feast.core.Registry.prototype.getFeatureViewsList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureView>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureView, 6));
};


/**
 * @param {!Array<!proto.feast.core.FeatureView>} value
 * @return {!proto.feast.core.Registry} returns this
*/
proto.feast.core.Registry.prototype.setFeatureViewsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.feast.core.FeatureView=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureView}
 */
proto.feast.core.Registry.prototype.addFeatureViews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.feast.core.FeatureView, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.clearFeatureViewsList = function() {
  return this.setFeatureViewsList([]);
};


/**
 * repeated DataSource data_sources = 12;
 * @return {!Array<!proto.feast.core.DataSource>}
 */
proto.feast.core.Registry.prototype.getDataSourcesList = function() {
  return /** @type{!Array<!proto.feast.core.DataSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.DataSource, 12));
};


/**
 * @param {!Array<!proto.feast.core.DataSource>} value
 * @return {!proto.feast.core.Registry} returns this
*/
proto.feast.core.Registry.prototype.setDataSourcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.feast.core.DataSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.DataSource}
 */
proto.feast.core.Registry.prototype.addDataSources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.feast.core.DataSource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.clearDataSourcesList = function() {
  return this.setDataSourcesList([]);
};


/**
 * repeated OnDemandFeatureView on_demand_feature_views = 8;
 * @return {!Array<!proto.feast.core.OnDemandFeatureView>}
 */
proto.feast.core.Registry.prototype.getOnDemandFeatureViewsList = function() {
  return /** @type{!Array<!proto.feast.core.OnDemandFeatureView>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.OnDemandFeatureView, 8));
};


/**
 * @param {!Array<!proto.feast.core.OnDemandFeatureView>} value
 * @return {!proto.feast.core.Registry} returns this
*/
proto.feast.core.Registry.prototype.setOnDemandFeatureViewsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.feast.core.OnDemandFeatureView=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.OnDemandFeatureView}
 */
proto.feast.core.Registry.prototype.addOnDemandFeatureViews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.feast.core.OnDemandFeatureView, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.clearOnDemandFeatureViewsList = function() {
  return this.setOnDemandFeatureViewsList([]);
};


/**
 * repeated StreamFeatureView stream_feature_views = 14;
 * @return {!Array<!proto.feast.core.StreamFeatureView>}
 */
proto.feast.core.Registry.prototype.getStreamFeatureViewsList = function() {
  return /** @type{!Array<!proto.feast.core.StreamFeatureView>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.StreamFeatureView, 14));
};


/**
 * @param {!Array<!proto.feast.core.StreamFeatureView>} value
 * @return {!proto.feast.core.Registry} returns this
*/
proto.feast.core.Registry.prototype.setStreamFeatureViewsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.feast.core.StreamFeatureView=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.StreamFeatureView}
 */
proto.feast.core.Registry.prototype.addStreamFeatureViews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.feast.core.StreamFeatureView, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.clearStreamFeatureViewsList = function() {
  return this.setStreamFeatureViewsList([]);
};


/**
 * repeated FeatureService feature_services = 7;
 * @return {!Array<!proto.feast.core.FeatureService>}
 */
proto.feast.core.Registry.prototype.getFeatureServicesList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureService>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureService, 7));
};


/**
 * @param {!Array<!proto.feast.core.FeatureService>} value
 * @return {!proto.feast.core.Registry} returns this
*/
proto.feast.core.Registry.prototype.setFeatureServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.feast.core.FeatureService=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureService}
 */
proto.feast.core.Registry.prototype.addFeatureServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.feast.core.FeatureService, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.clearFeatureServicesList = function() {
  return this.setFeatureServicesList([]);
};


/**
 * repeated SavedDataset saved_datasets = 11;
 * @return {!Array<!proto.feast.core.SavedDataset>}
 */
proto.feast.core.Registry.prototype.getSavedDatasetsList = function() {
  return /** @type{!Array<!proto.feast.core.SavedDataset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.SavedDataset, 11));
};


/**
 * @param {!Array<!proto.feast.core.SavedDataset>} value
 * @return {!proto.feast.core.Registry} returns this
*/
proto.feast.core.Registry.prototype.setSavedDatasetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.feast.core.SavedDataset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.SavedDataset}
 */
proto.feast.core.Registry.prototype.addSavedDatasets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.feast.core.SavedDataset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.clearSavedDatasetsList = function() {
  return this.setSavedDatasetsList([]);
};


/**
 * repeated ValidationReference validation_references = 13;
 * @return {!Array<!proto.feast.core.ValidationReference>}
 */
proto.feast.core.Registry.prototype.getValidationReferencesList = function() {
  return /** @type{!Array<!proto.feast.core.ValidationReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.ValidationReference, 13));
};


/**
 * @param {!Array<!proto.feast.core.ValidationReference>} value
 * @return {!proto.feast.core.Registry} returns this
*/
proto.feast.core.Registry.prototype.setValidationReferencesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.feast.core.ValidationReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.ValidationReference}
 */
proto.feast.core.Registry.prototype.addValidationReferences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.feast.core.ValidationReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.clearValidationReferencesList = function() {
  return this.setValidationReferencesList([]);
};


/**
 * optional Infra infra = 10;
 * @return {?proto.feast.core.Infra}
 */
proto.feast.core.Registry.prototype.getInfra = function() {
  return /** @type{?proto.feast.core.Infra} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.Infra, 10));
};


/**
 * @param {?proto.feast.core.Infra|undefined} value
 * @return {!proto.feast.core.Registry} returns this
*/
proto.feast.core.Registry.prototype.setInfra = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.clearInfra = function() {
  return this.setInfra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.Registry.prototype.hasInfra = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated ProjectMetadata project_metadata = 15;
 * @return {!Array<!proto.feast.core.ProjectMetadata>}
 */
proto.feast.core.Registry.prototype.getProjectMetadataList = function() {
  return /** @type{!Array<!proto.feast.core.ProjectMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.ProjectMetadata, 15));
};


/**
 * @param {!Array<!proto.feast.core.ProjectMetadata>} value
 * @return {!proto.feast.core.Registry} returns this
*/
proto.feast.core.Registry.prototype.setProjectMetadataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.feast.core.ProjectMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.ProjectMetadata}
 */
proto.feast.core.Registry.prototype.addProjectMetadata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.feast.core.ProjectMetadata, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.clearProjectMetadataList = function() {
  return this.setProjectMetadataList([]);
};


/**
 * optional string registry_schema_version = 3;
 * @return {string}
 */
proto.feast.core.Registry.prototype.getRegistrySchemaVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.setRegistrySchemaVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string version_id = 4;
 * @return {string}
 */
proto.feast.core.Registry.prototype.getVersionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.setVersionId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp last_updated = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.Registry.prototype.getLastUpdated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.Registry} returns this
*/
proto.feast.core.Registry.prototype.setLastUpdated = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.Registry} returns this
 */
proto.feast.core.Registry.prototype.clearLastUpdated = function() {
  return this.setLastUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.Registry.prototype.hasLastUpdated = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.ProjectMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.ProjectMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.ProjectMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.ProjectMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    projectUuid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.ProjectMetadata}
 */
proto.feast.core.ProjectMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.ProjectMetadata;
  return proto.feast.core.ProjectMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.ProjectMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.ProjectMetadata}
 */
proto.feast.core.ProjectMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.ProjectMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.ProjectMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.ProjectMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.ProjectMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProjectUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.core.ProjectMetadata.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.ProjectMetadata} returns this
 */
proto.feast.core.ProjectMetadata.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project_uuid = 2;
 * @return {string}
 */
proto.feast.core.ProjectMetadata.prototype.getProjectUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.ProjectMetadata} returns this
 */
proto.feast.core.ProjectMetadata.prototype.setProjectUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.Store = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.Store.repeatedFields_, proto.feast.core.Store.oneofGroups_);
};
goog.inherits(proto.feast.core.Store, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.Store.displayName = 'proto.feast.core.Store';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.Store.RedisConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.Store.RedisConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.Store.RedisConfig.displayName = 'proto.feast.core.Store.RedisConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.Store.RedisClusterConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.Store.RedisClusterConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.Store.RedisClusterConfig.displayName = 'proto.feast.core.Store.RedisClusterConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.Store.Subscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.Store.Subscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.Store.Subscription.displayName = 'proto.feast.core.Store.Subscription';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.Store.repeatedFields_ = [4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.Store.oneofGroups_ = [[11,14]];

/**
 * @enum {number}
 */
proto.feast.core.Store.ConfigCase = {
  CONFIG_NOT_SET: 0,
  REDIS_CONFIG: 11,
  REDIS_CLUSTER_CONFIG: 14
};

/**
 * @return {proto.feast.core.Store.ConfigCase}
 */
proto.feast.core.Store.prototype.getConfigCase = function() {
  return /** @type {proto.feast.core.Store.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.Store.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.Store.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.Store.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.Store} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    subscriptionsList: jspb.Message.toObjectList(msg.getSubscriptionsList(),
    proto.feast.core.Store.Subscription.toObject, includeInstance),
    redisConfig: (f = msg.getRedisConfig()) && proto.feast.core.Store.RedisConfig.toObject(includeInstance, f),
    redisClusterConfig: (f = msg.getRedisClusterConfig()) && proto.feast.core.Store.RedisClusterConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.Store}
 */
proto.feast.core.Store.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.Store;
  return proto.feast.core.Store.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.Store} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.Store}
 */
proto.feast.core.Store.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.feast.core.Store.StoreType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.feast.core.Store.Subscription;
      reader.readMessage(value,proto.feast.core.Store.Subscription.deserializeBinaryFromReader);
      msg.addSubscriptions(value);
      break;
    case 11:
      var value = new proto.feast.core.Store.RedisConfig;
      reader.readMessage(value,proto.feast.core.Store.RedisConfig.deserializeBinaryFromReader);
      msg.setRedisConfig(value);
      break;
    case 14:
      var value = new proto.feast.core.Store.RedisClusterConfig;
      reader.readMessage(value,proto.feast.core.Store.RedisClusterConfig.deserializeBinaryFromReader);
      msg.setRedisClusterConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.Store.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.Store.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.Store} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSubscriptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.feast.core.Store.Subscription.serializeBinaryToWriter
    );
  }
  f = message.getRedisConfig();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.feast.core.Store.RedisConfig.serializeBinaryToWriter
    );
  }
  f = message.getRedisClusterConfig();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.feast.core.Store.RedisClusterConfig.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.feast.core.Store.StoreType = {
  INVALID: 0,
  REDIS: 1,
  REDIS_CLUSTER: 4
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.Store.RedisConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.Store.RedisConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.Store.RedisConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.RedisConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    initialBackoffMs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxRetries: jspb.Message.getFieldWithDefault(msg, 4, 0),
    flushFrequencySeconds: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ssl: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.Store.RedisConfig}
 */
proto.feast.core.Store.RedisConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.Store.RedisConfig;
  return proto.feast.core.Store.RedisConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.Store.RedisConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.Store.RedisConfig}
 */
proto.feast.core.Store.RedisConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInitialBackoffMs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxRetries(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlushFrequencySeconds(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSsl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.Store.RedisConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.Store.RedisConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.Store.RedisConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.RedisConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getInitialBackoffMs();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMaxRetries();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFlushFrequencySeconds();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSsl();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.feast.core.Store.RedisConfig.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store.RedisConfig} returns this
 */
proto.feast.core.Store.RedisConfig.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.feast.core.Store.RedisConfig.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisConfig} returns this
 */
proto.feast.core.Store.RedisConfig.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 initial_backoff_ms = 3;
 * @return {number}
 */
proto.feast.core.Store.RedisConfig.prototype.getInitialBackoffMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisConfig} returns this
 */
proto.feast.core.Store.RedisConfig.prototype.setInitialBackoffMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 max_retries = 4;
 * @return {number}
 */
proto.feast.core.Store.RedisConfig.prototype.getMaxRetries = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisConfig} returns this
 */
proto.feast.core.Store.RedisConfig.prototype.setMaxRetries = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 flush_frequency_seconds = 5;
 * @return {number}
 */
proto.feast.core.Store.RedisConfig.prototype.getFlushFrequencySeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisConfig} returns this
 */
proto.feast.core.Store.RedisConfig.prototype.setFlushFrequencySeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool ssl = 6;
 * @return {boolean}
 */
proto.feast.core.Store.RedisConfig.prototype.getSsl = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.core.Store.RedisConfig} returns this
 */
proto.feast.core.Store.RedisConfig.prototype.setSsl = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.Store.RedisClusterConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.Store.RedisClusterConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.RedisClusterConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionString: jspb.Message.getFieldWithDefault(msg, 1, ""),
    initialBackoffMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxRetries: jspb.Message.getFieldWithDefault(msg, 3, 0),
    flushFrequencySeconds: jspb.Message.getFieldWithDefault(msg, 4, 0),
    keyPrefix: jspb.Message.getFieldWithDefault(msg, 5, ""),
    enableFallback: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    fallbackPrefix: jspb.Message.getFieldWithDefault(msg, 7, ""),
    readFrom: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.Store.RedisClusterConfig}
 */
proto.feast.core.Store.RedisClusterConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.Store.RedisClusterConfig;
  return proto.feast.core.Store.RedisClusterConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.Store.RedisClusterConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.Store.RedisClusterConfig}
 */
proto.feast.core.Store.RedisClusterConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionString(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInitialBackoffMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxRetries(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlushFrequencySeconds(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyPrefix(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableFallback(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFallbackPrefix(value);
      break;
    case 8:
      var value = /** @type {!proto.feast.core.Store.RedisClusterConfig.ReadFrom} */ (reader.readEnum());
      msg.setReadFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.Store.RedisClusterConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.Store.RedisClusterConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.RedisClusterConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionString();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInitialBackoffMs();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMaxRetries();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFlushFrequencySeconds();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getKeyPrefix();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEnableFallback();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getFallbackPrefix();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getReadFrom();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.feast.core.Store.RedisClusterConfig.ReadFrom = {
  MASTER: 0,
  MASTER_PREFERRED: 1,
  REPLICA: 2,
  REPLICA_PREFERRED: 3
};

/**
 * optional string connection_string = 1;
 * @return {string}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getConnectionString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setConnectionString = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 initial_backoff_ms = 2;
 * @return {number}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getInitialBackoffMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setInitialBackoffMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 max_retries = 3;
 * @return {number}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getMaxRetries = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setMaxRetries = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 flush_frequency_seconds = 4;
 * @return {number}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getFlushFrequencySeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setFlushFrequencySeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string key_prefix = 5;
 * @return {string}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getKeyPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setKeyPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool enable_fallback = 6;
 * @return {boolean}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getEnableFallback = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setEnableFallback = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string fallback_prefix = 7;
 * @return {string}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getFallbackPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setFallbackPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional ReadFrom read_from = 8;
 * @return {!proto.feast.core.Store.RedisClusterConfig.ReadFrom}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getReadFrom = function() {
  return /** @type {!proto.feast.core.Store.RedisClusterConfig.ReadFrom} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.feast.core.Store.RedisClusterConfig.ReadFrom} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setReadFrom = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.Store.Subscription.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.Store.Subscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.Store.Subscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.Subscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    exclude: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.Store.Subscription}
 */
proto.feast.core.Store.Subscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.Store.Subscription;
  return proto.feast.core.Store.Subscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.Store.Subscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.Store.Subscription}
 */
proto.feast.core.Store.Subscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExclude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.Store.Subscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.Store.Subscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.Store.Subscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.Subscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExclude();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string project = 3;
 * @return {string}
 */
proto.feast.core.Store.Subscription.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store.Subscription} returns this
 */
proto.feast.core.Store.Subscription.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.Store.Subscription.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store.Subscription} returns this
 */
proto.feast.core.Store.Subscription.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool exclude = 4;
 * @return {boolean}
 */
proto.feast.core.Store.Subscription.prototype.getExclude = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.core.Store.Subscription} returns this
 */
proto.feast.core.Store.Subscription.prototype.setExclude = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.Store.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store} returns this
 */
proto.feast.core.Store.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StoreType type = 2;
 * @return {!proto.feast.core.Store.StoreType}
 */
proto.feast.core.Store.prototype.getType = function() {
  return /** @type {!proto.feast.core.Store.StoreType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.feast.core.Store.StoreType} value
 * @return {!proto.feast.core.Store} returns this
 */
proto.feast.core.Store.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated Subscription subscriptions = 4;
 * @return {!Array<!proto.feast.core.Store.Subscription>}
 */
proto.feast.core.Store.prototype.getSubscriptionsList = function() {
  return /** @type{!Array<!proto.feast.core.Store.Subscription>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.Store.Subscription, 4));
};


/**
 * @param {!Array<!proto.feast.core.Store.Subscription>} value
 * @return {!proto.feast.core.Store} returns this
*/
proto.feast.core.Store.prototype.setSubscriptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.feast.core.Store.Subscription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.Store.Subscription}
 */
proto.feast.core.Store.prototype.addSubscriptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.feast.core.Store.Subscription, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.Store} returns this
 */
proto.feast.core.Store.prototype.clearSubscriptionsList = function() {
  return this.setSubscriptionsList([]);
};


/**
 * optional RedisConfig redis_config = 11;
 * @return {?proto.feast.core.Store.RedisConfig}
 */
proto.feast.core.Store.prototype.getRedisConfig = function() {
  return /** @type{?proto.feast.core.Store.RedisConfig} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.Store.RedisConfig, 11));
};


/**
 * @param {?proto.feast.core.Store.RedisConfig|undefined} value
 * @return {!proto.feast.core.Store} returns this
*/
proto.feast.core.Store.prototype.setRedisConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.feast.core.Store.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.Store} returns this
 */
proto.feast.core.Store.prototype.clearRedisConfig = function() {
  return this.setRedisConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.Store.prototype.hasRedisConfig = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RedisClusterConfig redis_cluster_config = 14;
 * @return {?proto.feast.core.Store.RedisClusterConfig}
 */
proto.feast.core.Store.prototype.getRedisClusterConfig = function() {
  return /** @type{?proto.feast.core.Store.RedisClusterConfig} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.Store.RedisClusterConfig, 14));
};


/**
 * @param {?proto.feast.core.Store.RedisClusterConfig|undefined} value
 * @return {!proto.feast.core.Store} returns this
*/
proto.feast.core.Store.prototype.setRedisClusterConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.feast.core.Store.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.Store} returns this
 */
proto.feast.core.Store.prototype.clearRedisClusterConfig = function() {
  return this.setRedisClusterConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.Store.prototype.hasRedisClusterConfig = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.RefreshRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.RefreshRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.RefreshRequest.displayName = 'proto.feast.registry.RefreshRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.UpdateInfraRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.UpdateInfraRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.UpdateInfraRequest.displayName = 'proto.feast.registry.UpdateInfraRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.GetInfraRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.GetInfraRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.GetInfraRequest.displayName = 'proto.feast.registry.GetInfraRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListProjectMetadataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ListProjectMetadataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListProjectMetadataRequest.displayName = 'proto.feast.registry.ListProjectMetadataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListProjectMetadataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.registry.ListProjectMetadataResponse.repeatedFields_, null);
};
goog.inherits(proto.feast.registry.ListProjectMetadataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListProjectMetadataResponse.displayName = 'proto.feast.registry.ListProjectMetadataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ApplyMaterializationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ApplyMaterializationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ApplyMaterializationRequest.displayName = 'proto.feast.registry.ApplyMaterializationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ApplyEntityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ApplyEntityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ApplyEntityRequest.displayName = 'proto.feast.registry.ApplyEntityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.GetEntityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.GetEntityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.GetEntityRequest.displayName = 'proto.feast.registry.GetEntityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListEntitiesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ListEntitiesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListEntitiesRequest.displayName = 'proto.feast.registry.ListEntitiesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListEntitiesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.registry.ListEntitiesResponse.repeatedFields_, null);
};
goog.inherits(proto.feast.registry.ListEntitiesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListEntitiesResponse.displayName = 'proto.feast.registry.ListEntitiesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.DeleteEntityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.DeleteEntityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.DeleteEntityRequest.displayName = 'proto.feast.registry.DeleteEntityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ApplyDataSourceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ApplyDataSourceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ApplyDataSourceRequest.displayName = 'proto.feast.registry.ApplyDataSourceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.GetDataSourceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.GetDataSourceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.GetDataSourceRequest.displayName = 'proto.feast.registry.GetDataSourceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListDataSourcesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ListDataSourcesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListDataSourcesRequest.displayName = 'proto.feast.registry.ListDataSourcesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListDataSourcesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.registry.ListDataSourcesResponse.repeatedFields_, null);
};
goog.inherits(proto.feast.registry.ListDataSourcesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListDataSourcesResponse.displayName = 'proto.feast.registry.ListDataSourcesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.DeleteDataSourceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.DeleteDataSourceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.DeleteDataSourceRequest.displayName = 'proto.feast.registry.DeleteDataSourceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ApplyFeatureViewRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.registry.ApplyFeatureViewRequest.oneofGroups_);
};
goog.inherits(proto.feast.registry.ApplyFeatureViewRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ApplyFeatureViewRequest.displayName = 'proto.feast.registry.ApplyFeatureViewRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.GetFeatureViewRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.GetFeatureViewRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.GetFeatureViewRequest.displayName = 'proto.feast.registry.GetFeatureViewRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListFeatureViewsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ListFeatureViewsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListFeatureViewsRequest.displayName = 'proto.feast.registry.ListFeatureViewsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListFeatureViewsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.registry.ListFeatureViewsResponse.repeatedFields_, null);
};
goog.inherits(proto.feast.registry.ListFeatureViewsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListFeatureViewsResponse.displayName = 'proto.feast.registry.ListFeatureViewsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.DeleteFeatureViewRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.DeleteFeatureViewRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.DeleteFeatureViewRequest.displayName = 'proto.feast.registry.DeleteFeatureViewRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.GetStreamFeatureViewRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.GetStreamFeatureViewRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.GetStreamFeatureViewRequest.displayName = 'proto.feast.registry.GetStreamFeatureViewRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListStreamFeatureViewsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ListStreamFeatureViewsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListStreamFeatureViewsRequest.displayName = 'proto.feast.registry.ListStreamFeatureViewsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListStreamFeatureViewsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.registry.ListStreamFeatureViewsResponse.repeatedFields_, null);
};
goog.inherits(proto.feast.registry.ListStreamFeatureViewsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListStreamFeatureViewsResponse.displayName = 'proto.feast.registry.ListStreamFeatureViewsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.GetOnDemandFeatureViewRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.GetOnDemandFeatureViewRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.GetOnDemandFeatureViewRequest.displayName = 'proto.feast.registry.GetOnDemandFeatureViewRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListOnDemandFeatureViewsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ListOnDemandFeatureViewsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListOnDemandFeatureViewsRequest.displayName = 'proto.feast.registry.ListOnDemandFeatureViewsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListOnDemandFeatureViewsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.registry.ListOnDemandFeatureViewsResponse.repeatedFields_, null);
};
goog.inherits(proto.feast.registry.ListOnDemandFeatureViewsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListOnDemandFeatureViewsResponse.displayName = 'proto.feast.registry.ListOnDemandFeatureViewsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ApplyFeatureServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ApplyFeatureServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ApplyFeatureServiceRequest.displayName = 'proto.feast.registry.ApplyFeatureServiceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.GetFeatureServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.GetFeatureServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.GetFeatureServiceRequest.displayName = 'proto.feast.registry.GetFeatureServiceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListFeatureServicesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ListFeatureServicesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListFeatureServicesRequest.displayName = 'proto.feast.registry.ListFeatureServicesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListFeatureServicesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.registry.ListFeatureServicesResponse.repeatedFields_, null);
};
goog.inherits(proto.feast.registry.ListFeatureServicesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListFeatureServicesResponse.displayName = 'proto.feast.registry.ListFeatureServicesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.DeleteFeatureServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.DeleteFeatureServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.DeleteFeatureServiceRequest.displayName = 'proto.feast.registry.DeleteFeatureServiceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ApplySavedDatasetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ApplySavedDatasetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ApplySavedDatasetRequest.displayName = 'proto.feast.registry.ApplySavedDatasetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.GetSavedDatasetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.GetSavedDatasetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.GetSavedDatasetRequest.displayName = 'proto.feast.registry.GetSavedDatasetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListSavedDatasetsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ListSavedDatasetsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListSavedDatasetsRequest.displayName = 'proto.feast.registry.ListSavedDatasetsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListSavedDatasetsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.registry.ListSavedDatasetsResponse.repeatedFields_, null);
};
goog.inherits(proto.feast.registry.ListSavedDatasetsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListSavedDatasetsResponse.displayName = 'proto.feast.registry.ListSavedDatasetsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.DeleteSavedDatasetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.DeleteSavedDatasetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.DeleteSavedDatasetRequest.displayName = 'proto.feast.registry.DeleteSavedDatasetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ApplyValidationReferenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ApplyValidationReferenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ApplyValidationReferenceRequest.displayName = 'proto.feast.registry.ApplyValidationReferenceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.GetValidationReferenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.GetValidationReferenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.GetValidationReferenceRequest.displayName = 'proto.feast.registry.GetValidationReferenceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListValidationReferencesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.ListValidationReferencesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListValidationReferencesRequest.displayName = 'proto.feast.registry.ListValidationReferencesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.ListValidationReferencesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.registry.ListValidationReferencesResponse.repeatedFields_, null);
};
goog.inherits(proto.feast.registry.ListValidationReferencesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.ListValidationReferencesResponse.displayName = 'proto.feast.registry.ListValidationReferencesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.registry.DeleteValidationReferenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.registry.DeleteValidationReferenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.registry.DeleteValidationReferenceRequest.displayName = 'proto.feast.registry.DeleteValidationReferenceRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.RefreshRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.RefreshRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.RefreshRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.RefreshRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.RefreshRequest}
 */
proto.feast.registry.RefreshRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.RefreshRequest;
  return proto.feast.registry.RefreshRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.RefreshRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.RefreshRequest}
 */
proto.feast.registry.RefreshRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.RefreshRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.RefreshRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.RefreshRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.RefreshRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.registry.RefreshRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.RefreshRequest} returns this
 */
proto.feast.registry.RefreshRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.UpdateInfraRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.UpdateInfraRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.UpdateInfraRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.UpdateInfraRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    infra: (f = msg.getInfra()) && proto.feast.core.Infra.toObject(includeInstance, f),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.UpdateInfraRequest}
 */
proto.feast.registry.UpdateInfraRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.UpdateInfraRequest;
  return proto.feast.registry.UpdateInfraRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.UpdateInfraRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.UpdateInfraRequest}
 */
proto.feast.registry.UpdateInfraRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.Infra;
      reader.readMessage(value,proto.feast.core.Infra.deserializeBinaryFromReader);
      msg.setInfra(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.UpdateInfraRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.UpdateInfraRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.UpdateInfraRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.UpdateInfraRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfra();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.Infra.serializeBinaryToWriter
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional feast.core.Infra infra = 1;
 * @return {?proto.feast.core.Infra}
 */
proto.feast.registry.UpdateInfraRequest.prototype.getInfra = function() {
  return /** @type{?proto.feast.core.Infra} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.Infra, 1));
};


/**
 * @param {?proto.feast.core.Infra|undefined} value
 * @return {!proto.feast.registry.UpdateInfraRequest} returns this
*/
proto.feast.registry.UpdateInfraRequest.prototype.setInfra = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.registry.UpdateInfraRequest} returns this
 */
proto.feast.registry.UpdateInfraRequest.prototype.clearInfra = function() {
  return this.setInfra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.registry.UpdateInfraRequest.prototype.hasInfra = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.UpdateInfraRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.UpdateInfraRequest} returns this
 */
proto.feast.registry.UpdateInfraRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool commit = 3;
 * @return {boolean}
 */
proto.feast.registry.UpdateInfraRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.UpdateInfraRequest} returns this
 */
proto.feast.registry.UpdateInfraRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.GetInfraRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.GetInfraRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.GetInfraRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetInfraRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.GetInfraRequest}
 */
proto.feast.registry.GetInfraRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.GetInfraRequest;
  return proto.feast.registry.GetInfraRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.GetInfraRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.GetInfraRequest}
 */
proto.feast.registry.GetInfraRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.GetInfraRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.GetInfraRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.GetInfraRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetInfraRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.registry.GetInfraRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetInfraRequest} returns this
 */
proto.feast.registry.GetInfraRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool allow_cache = 2;
 * @return {boolean}
 */
proto.feast.registry.GetInfraRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.GetInfraRequest} returns this
 */
proto.feast.registry.GetInfraRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListProjectMetadataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListProjectMetadataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListProjectMetadataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListProjectMetadataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListProjectMetadataRequest}
 */
proto.feast.registry.ListProjectMetadataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListProjectMetadataRequest;
  return proto.feast.registry.ListProjectMetadataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListProjectMetadataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListProjectMetadataRequest}
 */
proto.feast.registry.ListProjectMetadataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListProjectMetadataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListProjectMetadataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListProjectMetadataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListProjectMetadataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.registry.ListProjectMetadataRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ListProjectMetadataRequest} returns this
 */
proto.feast.registry.ListProjectMetadataRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool allow_cache = 2;
 * @return {boolean}
 */
proto.feast.registry.ListProjectMetadataRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ListProjectMetadataRequest} returns this
 */
proto.feast.registry.ListProjectMetadataRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.registry.ListProjectMetadataResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListProjectMetadataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListProjectMetadataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListProjectMetadataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListProjectMetadataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectMetadataList: jspb.Message.toObjectList(msg.getProjectMetadataList(),
    proto.feast.core.ProjectMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListProjectMetadataResponse}
 */
proto.feast.registry.ListProjectMetadataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListProjectMetadataResponse;
  return proto.feast.registry.ListProjectMetadataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListProjectMetadataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListProjectMetadataResponse}
 */
proto.feast.registry.ListProjectMetadataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.ProjectMetadata;
      reader.readMessage(value,proto.feast.core.ProjectMetadata.deserializeBinaryFromReader);
      msg.addProjectMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListProjectMetadataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListProjectMetadataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListProjectMetadataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListProjectMetadataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.core.ProjectMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feast.core.ProjectMetadata project_metadata = 1;
 * @return {!Array<!proto.feast.core.ProjectMetadata>}
 */
proto.feast.registry.ListProjectMetadataResponse.prototype.getProjectMetadataList = function() {
  return /** @type{!Array<!proto.feast.core.ProjectMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.ProjectMetadata, 1));
};


/**
 * @param {!Array<!proto.feast.core.ProjectMetadata>} value
 * @return {!proto.feast.registry.ListProjectMetadataResponse} returns this
*/
proto.feast.registry.ListProjectMetadataResponse.prototype.setProjectMetadataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.core.ProjectMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.ProjectMetadata}
 */
proto.feast.registry.ListProjectMetadataResponse.prototype.addProjectMetadata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.core.ProjectMetadata, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.registry.ListProjectMetadataResponse} returns this
 */
proto.feast.registry.ListProjectMetadataResponse.prototype.clearProjectMetadataList = function() {
  return this.setProjectMetadataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ApplyMaterializationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ApplyMaterializationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplyMaterializationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureView: (f = msg.getFeatureView()) && proto.feast.core.FeatureView.toObject(includeInstance, f),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startDate: (f = msg.getStartDate()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    endDate: (f = msg.getEndDate()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ApplyMaterializationRequest}
 */
proto.feast.registry.ApplyMaterializationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ApplyMaterializationRequest;
  return proto.feast.registry.ApplyMaterializationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ApplyMaterializationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ApplyMaterializationRequest}
 */
proto.feast.registry.ApplyMaterializationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.FeatureView;
      reader.readMessage(value,proto.feast.core.FeatureView.deserializeBinaryFromReader);
      msg.setFeatureView(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setStartDate(value);
      break;
    case 4:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setEndDate(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ApplyMaterializationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ApplyMaterializationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplyMaterializationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureView();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.FeatureView.serializeBinaryToWriter
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEndDate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional feast.core.FeatureView feature_view = 1;
 * @return {?proto.feast.core.FeatureView}
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.getFeatureView = function() {
  return /** @type{?proto.feast.core.FeatureView} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureView, 1));
};


/**
 * @param {?proto.feast.core.FeatureView|undefined} value
 * @return {!proto.feast.registry.ApplyMaterializationRequest} returns this
*/
proto.feast.registry.ApplyMaterializationRequest.prototype.setFeatureView = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.registry.ApplyMaterializationRequest} returns this
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.clearFeatureView = function() {
  return this.setFeatureView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.hasFeatureView = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ApplyMaterializationRequest} returns this
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp start_date = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.getStartDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.registry.ApplyMaterializationRequest} returns this
*/
proto.feast.registry.ApplyMaterializationRequest.prototype.setStartDate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.registry.ApplyMaterializationRequest} returns this
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.clearStartDate = function() {
  return this.setStartDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.hasStartDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp end_date = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.getEndDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.registry.ApplyMaterializationRequest} returns this
*/
proto.feast.registry.ApplyMaterializationRequest.prototype.setEndDate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.registry.ApplyMaterializationRequest} returns this
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.clearEndDate = function() {
  return this.setEndDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.hasEndDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool commit = 5;
 * @return {boolean}
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ApplyMaterializationRequest} returns this
 */
proto.feast.registry.ApplyMaterializationRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ApplyEntityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ApplyEntityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ApplyEntityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplyEntityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = msg.getEntity()) && proto.feast.core.Entity.toObject(includeInstance, f),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ApplyEntityRequest}
 */
proto.feast.registry.ApplyEntityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ApplyEntityRequest;
  return proto.feast.registry.ApplyEntityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ApplyEntityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ApplyEntityRequest}
 */
proto.feast.registry.ApplyEntityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.Entity;
      reader.readMessage(value,proto.feast.core.Entity.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ApplyEntityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ApplyEntityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ApplyEntityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplyEntityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.Entity.serializeBinaryToWriter
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional feast.core.Entity entity = 1;
 * @return {?proto.feast.core.Entity}
 */
proto.feast.registry.ApplyEntityRequest.prototype.getEntity = function() {
  return /** @type{?proto.feast.core.Entity} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.Entity, 1));
};


/**
 * @param {?proto.feast.core.Entity|undefined} value
 * @return {!proto.feast.registry.ApplyEntityRequest} returns this
*/
proto.feast.registry.ApplyEntityRequest.prototype.setEntity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.registry.ApplyEntityRequest} returns this
 */
proto.feast.registry.ApplyEntityRequest.prototype.clearEntity = function() {
  return this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.registry.ApplyEntityRequest.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.ApplyEntityRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ApplyEntityRequest} returns this
 */
proto.feast.registry.ApplyEntityRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool commit = 3;
 * @return {boolean}
 */
proto.feast.registry.ApplyEntityRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ApplyEntityRequest} returns this
 */
proto.feast.registry.ApplyEntityRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.GetEntityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.GetEntityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.GetEntityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetEntityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.GetEntityRequest}
 */
proto.feast.registry.GetEntityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.GetEntityRequest;
  return proto.feast.registry.GetEntityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.GetEntityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.GetEntityRequest}
 */
proto.feast.registry.GetEntityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.GetEntityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.GetEntityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.GetEntityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetEntityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.GetEntityRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetEntityRequest} returns this
 */
proto.feast.registry.GetEntityRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.GetEntityRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetEntityRequest} returns this
 */
proto.feast.registry.GetEntityRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool allow_cache = 3;
 * @return {boolean}
 */
proto.feast.registry.GetEntityRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.GetEntityRequest} returns this
 */
proto.feast.registry.GetEntityRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListEntitiesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListEntitiesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListEntitiesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListEntitiesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListEntitiesRequest}
 */
proto.feast.registry.ListEntitiesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListEntitiesRequest;
  return proto.feast.registry.ListEntitiesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListEntitiesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListEntitiesRequest}
 */
proto.feast.registry.ListEntitiesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    case 3:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListEntitiesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListEntitiesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListEntitiesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListEntitiesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.registry.ListEntitiesRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ListEntitiesRequest} returns this
 */
proto.feast.registry.ListEntitiesRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool allow_cache = 2;
 * @return {boolean}
 */
proto.feast.registry.ListEntitiesRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ListEntitiesRequest} returns this
 */
proto.feast.registry.ListEntitiesRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * map<string, string> tags = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.registry.ListEntitiesRequest.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.registry.ListEntitiesRequest} returns this
 */
proto.feast.registry.ListEntitiesRequest.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.registry.ListEntitiesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListEntitiesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListEntitiesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListEntitiesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListEntitiesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.feast.core.Entity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListEntitiesResponse}
 */
proto.feast.registry.ListEntitiesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListEntitiesResponse;
  return proto.feast.registry.ListEntitiesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListEntitiesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListEntitiesResponse}
 */
proto.feast.registry.ListEntitiesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.Entity;
      reader.readMessage(value,proto.feast.core.Entity.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListEntitiesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListEntitiesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListEntitiesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListEntitiesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.core.Entity.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feast.core.Entity entities = 1;
 * @return {!Array<!proto.feast.core.Entity>}
 */
proto.feast.registry.ListEntitiesResponse.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.feast.core.Entity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.Entity, 1));
};


/**
 * @param {!Array<!proto.feast.core.Entity>} value
 * @return {!proto.feast.registry.ListEntitiesResponse} returns this
*/
proto.feast.registry.ListEntitiesResponse.prototype.setEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.core.Entity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.Entity}
 */
proto.feast.registry.ListEntitiesResponse.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.core.Entity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.registry.ListEntitiesResponse} returns this
 */
proto.feast.registry.ListEntitiesResponse.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.DeleteEntityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.DeleteEntityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.DeleteEntityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.DeleteEntityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.DeleteEntityRequest}
 */
proto.feast.registry.DeleteEntityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.DeleteEntityRequest;
  return proto.feast.registry.DeleteEntityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.DeleteEntityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.DeleteEntityRequest}
 */
proto.feast.registry.DeleteEntityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.DeleteEntityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.DeleteEntityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.DeleteEntityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.DeleteEntityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.DeleteEntityRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.DeleteEntityRequest} returns this
 */
proto.feast.registry.DeleteEntityRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.DeleteEntityRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.DeleteEntityRequest} returns this
 */
proto.feast.registry.DeleteEntityRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool commit = 3;
 * @return {boolean}
 */
proto.feast.registry.DeleteEntityRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.DeleteEntityRequest} returns this
 */
proto.feast.registry.DeleteEntityRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ApplyDataSourceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ApplyDataSourceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ApplyDataSourceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplyDataSourceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataSource: (f = msg.getDataSource()) && proto.feast.core.DataSource.toObject(includeInstance, f),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ApplyDataSourceRequest}
 */
proto.feast.registry.ApplyDataSourceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ApplyDataSourceRequest;
  return proto.feast.registry.ApplyDataSourceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ApplyDataSourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ApplyDataSourceRequest}
 */
proto.feast.registry.ApplyDataSourceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.DataSource;
      reader.readMessage(value,proto.feast.core.DataSource.deserializeBinaryFromReader);
      msg.setDataSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ApplyDataSourceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ApplyDataSourceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ApplyDataSourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplyDataSourceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional feast.core.DataSource data_source = 1;
 * @return {?proto.feast.core.DataSource}
 */
proto.feast.registry.ApplyDataSourceRequest.prototype.getDataSource = function() {
  return /** @type{?proto.feast.core.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource, 1));
};


/**
 * @param {?proto.feast.core.DataSource|undefined} value
 * @return {!proto.feast.registry.ApplyDataSourceRequest} returns this
*/
proto.feast.registry.ApplyDataSourceRequest.prototype.setDataSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.registry.ApplyDataSourceRequest} returns this
 */
proto.feast.registry.ApplyDataSourceRequest.prototype.clearDataSource = function() {
  return this.setDataSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.registry.ApplyDataSourceRequest.prototype.hasDataSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.ApplyDataSourceRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ApplyDataSourceRequest} returns this
 */
proto.feast.registry.ApplyDataSourceRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool commit = 3;
 * @return {boolean}
 */
proto.feast.registry.ApplyDataSourceRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ApplyDataSourceRequest} returns this
 */
proto.feast.registry.ApplyDataSourceRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.GetDataSourceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.GetDataSourceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.GetDataSourceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetDataSourceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.GetDataSourceRequest}
 */
proto.feast.registry.GetDataSourceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.GetDataSourceRequest;
  return proto.feast.registry.GetDataSourceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.GetDataSourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.GetDataSourceRequest}
 */
proto.feast.registry.GetDataSourceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.GetDataSourceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.GetDataSourceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.GetDataSourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetDataSourceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.GetDataSourceRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetDataSourceRequest} returns this
 */
proto.feast.registry.GetDataSourceRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.GetDataSourceRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetDataSourceRequest} returns this
 */
proto.feast.registry.GetDataSourceRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool allow_cache = 3;
 * @return {boolean}
 */
proto.feast.registry.GetDataSourceRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.GetDataSourceRequest} returns this
 */
proto.feast.registry.GetDataSourceRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListDataSourcesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListDataSourcesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListDataSourcesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListDataSourcesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListDataSourcesRequest}
 */
proto.feast.registry.ListDataSourcesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListDataSourcesRequest;
  return proto.feast.registry.ListDataSourcesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListDataSourcesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListDataSourcesRequest}
 */
proto.feast.registry.ListDataSourcesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    case 3:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListDataSourcesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListDataSourcesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListDataSourcesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListDataSourcesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.registry.ListDataSourcesRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ListDataSourcesRequest} returns this
 */
proto.feast.registry.ListDataSourcesRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool allow_cache = 2;
 * @return {boolean}
 */
proto.feast.registry.ListDataSourcesRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ListDataSourcesRequest} returns this
 */
proto.feast.registry.ListDataSourcesRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * map<string, string> tags = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.registry.ListDataSourcesRequest.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.registry.ListDataSourcesRequest} returns this
 */
proto.feast.registry.ListDataSourcesRequest.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.registry.ListDataSourcesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListDataSourcesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListDataSourcesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListDataSourcesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListDataSourcesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataSourcesList: jspb.Message.toObjectList(msg.getDataSourcesList(),
    proto.feast.core.DataSource.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListDataSourcesResponse}
 */
proto.feast.registry.ListDataSourcesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListDataSourcesResponse;
  return proto.feast.registry.ListDataSourcesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListDataSourcesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListDataSourcesResponse}
 */
proto.feast.registry.ListDataSourcesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.DataSource;
      reader.readMessage(value,proto.feast.core.DataSource.deserializeBinaryFromReader);
      msg.addDataSources(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListDataSourcesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListDataSourcesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListDataSourcesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListDataSourcesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.core.DataSource.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feast.core.DataSource data_sources = 1;
 * @return {!Array<!proto.feast.core.DataSource>}
 */
proto.feast.registry.ListDataSourcesResponse.prototype.getDataSourcesList = function() {
  return /** @type{!Array<!proto.feast.core.DataSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.DataSource, 1));
};


/**
 * @param {!Array<!proto.feast.core.DataSource>} value
 * @return {!proto.feast.registry.ListDataSourcesResponse} returns this
*/
proto.feast.registry.ListDataSourcesResponse.prototype.setDataSourcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.core.DataSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.DataSource}
 */
proto.feast.registry.ListDataSourcesResponse.prototype.addDataSources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.core.DataSource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.registry.ListDataSourcesResponse} returns this
 */
proto.feast.registry.ListDataSourcesResponse.prototype.clearDataSourcesList = function() {
  return this.setDataSourcesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.DeleteDataSourceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.DeleteDataSourceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.DeleteDataSourceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.DeleteDataSourceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.DeleteDataSourceRequest}
 */
proto.feast.registry.DeleteDataSourceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.DeleteDataSourceRequest;
  return proto.feast.registry.DeleteDataSourceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.DeleteDataSourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.DeleteDataSourceRequest}
 */
proto.feast.registry.DeleteDataSourceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.DeleteDataSourceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.DeleteDataSourceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.DeleteDataSourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.DeleteDataSourceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.DeleteDataSourceRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.DeleteDataSourceRequest} returns this
 */
proto.feast.registry.DeleteDataSourceRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.DeleteDataSourceRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.DeleteDataSourceRequest} returns this
 */
proto.feast.registry.DeleteDataSourceRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool commit = 3;
 * @return {boolean}
 */
proto.feast.registry.DeleteDataSourceRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.DeleteDataSourceRequest} returns this
 */
proto.feast.registry.DeleteDataSourceRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.registry.ApplyFeatureViewRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.feast.registry.ApplyFeatureViewRequest.BaseFeatureViewCase = {
  BASE_FEATURE_VIEW_NOT_SET: 0,
  FEATURE_VIEW: 1,
  ON_DEMAND_FEATURE_VIEW: 2,
  STREAM_FEATURE_VIEW: 3
};

/**
 * @return {proto.feast.registry.ApplyFeatureViewRequest.BaseFeatureViewCase}
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.getBaseFeatureViewCase = function() {
  return /** @type {proto.feast.registry.ApplyFeatureViewRequest.BaseFeatureViewCase} */(jspb.Message.computeOneofCase(this, proto.feast.registry.ApplyFeatureViewRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ApplyFeatureViewRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ApplyFeatureViewRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplyFeatureViewRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureView: (f = msg.getFeatureView()) && proto.feast.core.FeatureView.toObject(includeInstance, f),
    onDemandFeatureView: (f = msg.getOnDemandFeatureView()) && proto.feast.core.OnDemandFeatureView.toObject(includeInstance, f),
    streamFeatureView: (f = msg.getStreamFeatureView()) && proto.feast.core.StreamFeatureView.toObject(includeInstance, f),
    project: jspb.Message.getFieldWithDefault(msg, 4, ""),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ApplyFeatureViewRequest}
 */
proto.feast.registry.ApplyFeatureViewRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ApplyFeatureViewRequest;
  return proto.feast.registry.ApplyFeatureViewRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ApplyFeatureViewRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ApplyFeatureViewRequest}
 */
proto.feast.registry.ApplyFeatureViewRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.FeatureView;
      reader.readMessage(value,proto.feast.core.FeatureView.deserializeBinaryFromReader);
      msg.setFeatureView(value);
      break;
    case 2:
      var value = new proto.feast.core.OnDemandFeatureView;
      reader.readMessage(value,proto.feast.core.OnDemandFeatureView.deserializeBinaryFromReader);
      msg.setOnDemandFeatureView(value);
      break;
    case 3:
      var value = new proto.feast.core.StreamFeatureView;
      reader.readMessage(value,proto.feast.core.StreamFeatureView.deserializeBinaryFromReader);
      msg.setStreamFeatureView(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ApplyFeatureViewRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ApplyFeatureViewRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplyFeatureViewRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureView();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.FeatureView.serializeBinaryToWriter
    );
  }
  f = message.getOnDemandFeatureView();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.OnDemandFeatureView.serializeBinaryToWriter
    );
  }
  f = message.getStreamFeatureView();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feast.core.StreamFeatureView.serializeBinaryToWriter
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional feast.core.FeatureView feature_view = 1;
 * @return {?proto.feast.core.FeatureView}
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.getFeatureView = function() {
  return /** @type{?proto.feast.core.FeatureView} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureView, 1));
};


/**
 * @param {?proto.feast.core.FeatureView|undefined} value
 * @return {!proto.feast.registry.ApplyFeatureViewRequest} returns this
*/
proto.feast.registry.ApplyFeatureViewRequest.prototype.setFeatureView = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.feast.registry.ApplyFeatureViewRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.registry.ApplyFeatureViewRequest} returns this
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.clearFeatureView = function() {
  return this.setFeatureView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.hasFeatureView = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional feast.core.OnDemandFeatureView on_demand_feature_view = 2;
 * @return {?proto.feast.core.OnDemandFeatureView}
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.getOnDemandFeatureView = function() {
  return /** @type{?proto.feast.core.OnDemandFeatureView} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.OnDemandFeatureView, 2));
};


/**
 * @param {?proto.feast.core.OnDemandFeatureView|undefined} value
 * @return {!proto.feast.registry.ApplyFeatureViewRequest} returns this
*/
proto.feast.registry.ApplyFeatureViewRequest.prototype.setOnDemandFeatureView = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.feast.registry.ApplyFeatureViewRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.registry.ApplyFeatureViewRequest} returns this
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.clearOnDemandFeatureView = function() {
  return this.setOnDemandFeatureView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.hasOnDemandFeatureView = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional feast.core.StreamFeatureView stream_feature_view = 3;
 * @return {?proto.feast.core.StreamFeatureView}
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.getStreamFeatureView = function() {
  return /** @type{?proto.feast.core.StreamFeatureView} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.StreamFeatureView, 3));
};


/**
 * @param {?proto.feast.core.StreamFeatureView|undefined} value
 * @return {!proto.feast.registry.ApplyFeatureViewRequest} returns this
*/
proto.feast.registry.ApplyFeatureViewRequest.prototype.setStreamFeatureView = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.feast.registry.ApplyFeatureViewRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.registry.ApplyFeatureViewRequest} returns this
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.clearStreamFeatureView = function() {
  return this.setStreamFeatureView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.hasStreamFeatureView = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string project = 4;
 * @return {string}
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ApplyFeatureViewRequest} returns this
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool commit = 5;
 * @return {boolean}
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ApplyFeatureViewRequest} returns this
 */
proto.feast.registry.ApplyFeatureViewRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.GetFeatureViewRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.GetFeatureViewRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.GetFeatureViewRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetFeatureViewRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.GetFeatureViewRequest}
 */
proto.feast.registry.GetFeatureViewRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.GetFeatureViewRequest;
  return proto.feast.registry.GetFeatureViewRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.GetFeatureViewRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.GetFeatureViewRequest}
 */
proto.feast.registry.GetFeatureViewRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.GetFeatureViewRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.GetFeatureViewRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.GetFeatureViewRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetFeatureViewRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.GetFeatureViewRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetFeatureViewRequest} returns this
 */
proto.feast.registry.GetFeatureViewRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.GetFeatureViewRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetFeatureViewRequest} returns this
 */
proto.feast.registry.GetFeatureViewRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool allow_cache = 3;
 * @return {boolean}
 */
proto.feast.registry.GetFeatureViewRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.GetFeatureViewRequest} returns this
 */
proto.feast.registry.GetFeatureViewRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListFeatureViewsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListFeatureViewsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListFeatureViewsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListFeatureViewsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListFeatureViewsRequest}
 */
proto.feast.registry.ListFeatureViewsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListFeatureViewsRequest;
  return proto.feast.registry.ListFeatureViewsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListFeatureViewsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListFeatureViewsRequest}
 */
proto.feast.registry.ListFeatureViewsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    case 3:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListFeatureViewsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListFeatureViewsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListFeatureViewsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListFeatureViewsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.registry.ListFeatureViewsRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ListFeatureViewsRequest} returns this
 */
proto.feast.registry.ListFeatureViewsRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool allow_cache = 2;
 * @return {boolean}
 */
proto.feast.registry.ListFeatureViewsRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ListFeatureViewsRequest} returns this
 */
proto.feast.registry.ListFeatureViewsRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * map<string, string> tags = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.registry.ListFeatureViewsRequest.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.registry.ListFeatureViewsRequest} returns this
 */
proto.feast.registry.ListFeatureViewsRequest.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.registry.ListFeatureViewsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListFeatureViewsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListFeatureViewsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListFeatureViewsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListFeatureViewsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureViewsList: jspb.Message.toObjectList(msg.getFeatureViewsList(),
    proto.feast.core.FeatureView.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListFeatureViewsResponse}
 */
proto.feast.registry.ListFeatureViewsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListFeatureViewsResponse;
  return proto.feast.registry.ListFeatureViewsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListFeatureViewsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListFeatureViewsResponse}
 */
proto.feast.registry.ListFeatureViewsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.FeatureView;
      reader.readMessage(value,proto.feast.core.FeatureView.deserializeBinaryFromReader);
      msg.addFeatureViews(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListFeatureViewsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListFeatureViewsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListFeatureViewsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListFeatureViewsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureViewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.core.FeatureView.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feast.core.FeatureView feature_views = 1;
 * @return {!Array<!proto.feast.core.FeatureView>}
 */
proto.feast.registry.ListFeatureViewsResponse.prototype.getFeatureViewsList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureView>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureView, 1));
};


/**
 * @param {!Array<!proto.feast.core.FeatureView>} value
 * @return {!proto.feast.registry.ListFeatureViewsResponse} returns this
*/
proto.feast.registry.ListFeatureViewsResponse.prototype.setFeatureViewsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.core.FeatureView=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureView}
 */
proto.feast.registry.ListFeatureViewsResponse.prototype.addFeatureViews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.core.FeatureView, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.registry.ListFeatureViewsResponse} returns this
 */
proto.feast.registry.ListFeatureViewsResponse.prototype.clearFeatureViewsList = function() {
  return this.setFeatureViewsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.DeleteFeatureViewRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.DeleteFeatureViewRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.DeleteFeatureViewRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.DeleteFeatureViewRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.DeleteFeatureViewRequest}
 */
proto.feast.registry.DeleteFeatureViewRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.DeleteFeatureViewRequest;
  return proto.feast.registry.DeleteFeatureViewRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.DeleteFeatureViewRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.DeleteFeatureViewRequest}
 */
proto.feast.registry.DeleteFeatureViewRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.DeleteFeatureViewRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.DeleteFeatureViewRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.DeleteFeatureViewRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.DeleteFeatureViewRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.DeleteFeatureViewRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.DeleteFeatureViewRequest} returns this
 */
proto.feast.registry.DeleteFeatureViewRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.DeleteFeatureViewRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.DeleteFeatureViewRequest} returns this
 */
proto.feast.registry.DeleteFeatureViewRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool commit = 3;
 * @return {boolean}
 */
proto.feast.registry.DeleteFeatureViewRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.DeleteFeatureViewRequest} returns this
 */
proto.feast.registry.DeleteFeatureViewRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.GetStreamFeatureViewRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.GetStreamFeatureViewRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.GetStreamFeatureViewRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetStreamFeatureViewRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.GetStreamFeatureViewRequest}
 */
proto.feast.registry.GetStreamFeatureViewRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.GetStreamFeatureViewRequest;
  return proto.feast.registry.GetStreamFeatureViewRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.GetStreamFeatureViewRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.GetStreamFeatureViewRequest}
 */
proto.feast.registry.GetStreamFeatureViewRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.GetStreamFeatureViewRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.GetStreamFeatureViewRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.GetStreamFeatureViewRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetStreamFeatureViewRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.GetStreamFeatureViewRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetStreamFeatureViewRequest} returns this
 */
proto.feast.registry.GetStreamFeatureViewRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.GetStreamFeatureViewRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetStreamFeatureViewRequest} returns this
 */
proto.feast.registry.GetStreamFeatureViewRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool allow_cache = 3;
 * @return {boolean}
 */
proto.feast.registry.GetStreamFeatureViewRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.GetStreamFeatureViewRequest} returns this
 */
proto.feast.registry.GetStreamFeatureViewRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListStreamFeatureViewsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListStreamFeatureViewsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListStreamFeatureViewsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListStreamFeatureViewsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListStreamFeatureViewsRequest}
 */
proto.feast.registry.ListStreamFeatureViewsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListStreamFeatureViewsRequest;
  return proto.feast.registry.ListStreamFeatureViewsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListStreamFeatureViewsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListStreamFeatureViewsRequest}
 */
proto.feast.registry.ListStreamFeatureViewsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    case 3:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListStreamFeatureViewsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListStreamFeatureViewsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListStreamFeatureViewsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListStreamFeatureViewsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.registry.ListStreamFeatureViewsRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ListStreamFeatureViewsRequest} returns this
 */
proto.feast.registry.ListStreamFeatureViewsRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool allow_cache = 2;
 * @return {boolean}
 */
proto.feast.registry.ListStreamFeatureViewsRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ListStreamFeatureViewsRequest} returns this
 */
proto.feast.registry.ListStreamFeatureViewsRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * map<string, string> tags = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.registry.ListStreamFeatureViewsRequest.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.registry.ListStreamFeatureViewsRequest} returns this
 */
proto.feast.registry.ListStreamFeatureViewsRequest.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.registry.ListStreamFeatureViewsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListStreamFeatureViewsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListStreamFeatureViewsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListStreamFeatureViewsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListStreamFeatureViewsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamFeatureViewsList: jspb.Message.toObjectList(msg.getStreamFeatureViewsList(),
    proto.feast.core.StreamFeatureView.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListStreamFeatureViewsResponse}
 */
proto.feast.registry.ListStreamFeatureViewsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListStreamFeatureViewsResponse;
  return proto.feast.registry.ListStreamFeatureViewsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListStreamFeatureViewsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListStreamFeatureViewsResponse}
 */
proto.feast.registry.ListStreamFeatureViewsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.StreamFeatureView;
      reader.readMessage(value,proto.feast.core.StreamFeatureView.deserializeBinaryFromReader);
      msg.addStreamFeatureViews(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListStreamFeatureViewsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListStreamFeatureViewsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListStreamFeatureViewsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListStreamFeatureViewsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamFeatureViewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.core.StreamFeatureView.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feast.core.StreamFeatureView stream_feature_views = 1;
 * @return {!Array<!proto.feast.core.StreamFeatureView>}
 */
proto.feast.registry.ListStreamFeatureViewsResponse.prototype.getStreamFeatureViewsList = function() {
  return /** @type{!Array<!proto.feast.core.StreamFeatureView>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.StreamFeatureView, 1));
};


/**
 * @param {!Array<!proto.feast.core.StreamFeatureView>} value
 * @return {!proto.feast.registry.ListStreamFeatureViewsResponse} returns this
*/
proto.feast.registry.ListStreamFeatureViewsResponse.prototype.setStreamFeatureViewsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.core.StreamFeatureView=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.StreamFeatureView}
 */
proto.feast.registry.ListStreamFeatureViewsResponse.prototype.addStreamFeatureViews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.core.StreamFeatureView, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.registry.ListStreamFeatureViewsResponse} returns this
 */
proto.feast.registry.ListStreamFeatureViewsResponse.prototype.clearStreamFeatureViewsList = function() {
  return this.setStreamFeatureViewsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.GetOnDemandFeatureViewRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.GetOnDemandFeatureViewRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.GetOnDemandFeatureViewRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetOnDemandFeatureViewRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.GetOnDemandFeatureViewRequest}
 */
proto.feast.registry.GetOnDemandFeatureViewRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.GetOnDemandFeatureViewRequest;
  return proto.feast.registry.GetOnDemandFeatureViewRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.GetOnDemandFeatureViewRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.GetOnDemandFeatureViewRequest}
 */
proto.feast.registry.GetOnDemandFeatureViewRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.GetOnDemandFeatureViewRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.GetOnDemandFeatureViewRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.GetOnDemandFeatureViewRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetOnDemandFeatureViewRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.GetOnDemandFeatureViewRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetOnDemandFeatureViewRequest} returns this
 */
proto.feast.registry.GetOnDemandFeatureViewRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.GetOnDemandFeatureViewRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetOnDemandFeatureViewRequest} returns this
 */
proto.feast.registry.GetOnDemandFeatureViewRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool allow_cache = 3;
 * @return {boolean}
 */
proto.feast.registry.GetOnDemandFeatureViewRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.GetOnDemandFeatureViewRequest} returns this
 */
proto.feast.registry.GetOnDemandFeatureViewRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListOnDemandFeatureViewsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListOnDemandFeatureViewsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListOnDemandFeatureViewsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListOnDemandFeatureViewsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListOnDemandFeatureViewsRequest}
 */
proto.feast.registry.ListOnDemandFeatureViewsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListOnDemandFeatureViewsRequest;
  return proto.feast.registry.ListOnDemandFeatureViewsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListOnDemandFeatureViewsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListOnDemandFeatureViewsRequest}
 */
proto.feast.registry.ListOnDemandFeatureViewsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    case 3:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListOnDemandFeatureViewsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListOnDemandFeatureViewsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListOnDemandFeatureViewsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListOnDemandFeatureViewsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.registry.ListOnDemandFeatureViewsRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ListOnDemandFeatureViewsRequest} returns this
 */
proto.feast.registry.ListOnDemandFeatureViewsRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool allow_cache = 2;
 * @return {boolean}
 */
proto.feast.registry.ListOnDemandFeatureViewsRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ListOnDemandFeatureViewsRequest} returns this
 */
proto.feast.registry.ListOnDemandFeatureViewsRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * map<string, string> tags = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.registry.ListOnDemandFeatureViewsRequest.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.registry.ListOnDemandFeatureViewsRequest} returns this
 */
proto.feast.registry.ListOnDemandFeatureViewsRequest.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.registry.ListOnDemandFeatureViewsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListOnDemandFeatureViewsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListOnDemandFeatureViewsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListOnDemandFeatureViewsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListOnDemandFeatureViewsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    onDemandFeatureViewsList: jspb.Message.toObjectList(msg.getOnDemandFeatureViewsList(),
    proto.feast.core.OnDemandFeatureView.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListOnDemandFeatureViewsResponse}
 */
proto.feast.registry.ListOnDemandFeatureViewsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListOnDemandFeatureViewsResponse;
  return proto.feast.registry.ListOnDemandFeatureViewsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListOnDemandFeatureViewsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListOnDemandFeatureViewsResponse}
 */
proto.feast.registry.ListOnDemandFeatureViewsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.OnDemandFeatureView;
      reader.readMessage(value,proto.feast.core.OnDemandFeatureView.deserializeBinaryFromReader);
      msg.addOnDemandFeatureViews(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListOnDemandFeatureViewsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListOnDemandFeatureViewsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListOnDemandFeatureViewsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListOnDemandFeatureViewsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnDemandFeatureViewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.core.OnDemandFeatureView.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feast.core.OnDemandFeatureView on_demand_feature_views = 1;
 * @return {!Array<!proto.feast.core.OnDemandFeatureView>}
 */
proto.feast.registry.ListOnDemandFeatureViewsResponse.prototype.getOnDemandFeatureViewsList = function() {
  return /** @type{!Array<!proto.feast.core.OnDemandFeatureView>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.OnDemandFeatureView, 1));
};


/**
 * @param {!Array<!proto.feast.core.OnDemandFeatureView>} value
 * @return {!proto.feast.registry.ListOnDemandFeatureViewsResponse} returns this
*/
proto.feast.registry.ListOnDemandFeatureViewsResponse.prototype.setOnDemandFeatureViewsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.core.OnDemandFeatureView=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.OnDemandFeatureView}
 */
proto.feast.registry.ListOnDemandFeatureViewsResponse.prototype.addOnDemandFeatureViews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.core.OnDemandFeatureView, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.registry.ListOnDemandFeatureViewsResponse} returns this
 */
proto.feast.registry.ListOnDemandFeatureViewsResponse.prototype.clearOnDemandFeatureViewsList = function() {
  return this.setOnDemandFeatureViewsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ApplyFeatureServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ApplyFeatureServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ApplyFeatureServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplyFeatureServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureService: (f = msg.getFeatureService()) && proto.feast.core.FeatureService.toObject(includeInstance, f),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ApplyFeatureServiceRequest}
 */
proto.feast.registry.ApplyFeatureServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ApplyFeatureServiceRequest;
  return proto.feast.registry.ApplyFeatureServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ApplyFeatureServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ApplyFeatureServiceRequest}
 */
proto.feast.registry.ApplyFeatureServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.FeatureService;
      reader.readMessage(value,proto.feast.core.FeatureService.deserializeBinaryFromReader);
      msg.setFeatureService(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ApplyFeatureServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ApplyFeatureServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ApplyFeatureServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplyFeatureServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureService();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.FeatureService.serializeBinaryToWriter
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional feast.core.FeatureService feature_service = 1;
 * @return {?proto.feast.core.FeatureService}
 */
proto.feast.registry.ApplyFeatureServiceRequest.prototype.getFeatureService = function() {
  return /** @type{?proto.feast.core.FeatureService} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureService, 1));
};


/**
 * @param {?proto.feast.core.FeatureService|undefined} value
 * @return {!proto.feast.registry.ApplyFeatureServiceRequest} returns this
*/
proto.feast.registry.ApplyFeatureServiceRequest.prototype.setFeatureService = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.registry.ApplyFeatureServiceRequest} returns this
 */
proto.feast.registry.ApplyFeatureServiceRequest.prototype.clearFeatureService = function() {
  return this.setFeatureService(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.registry.ApplyFeatureServiceRequest.prototype.hasFeatureService = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.ApplyFeatureServiceRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ApplyFeatureServiceRequest} returns this
 */
proto.feast.registry.ApplyFeatureServiceRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool commit = 3;
 * @return {boolean}
 */
proto.feast.registry.ApplyFeatureServiceRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ApplyFeatureServiceRequest} returns this
 */
proto.feast.registry.ApplyFeatureServiceRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.GetFeatureServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.GetFeatureServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.GetFeatureServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetFeatureServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.GetFeatureServiceRequest}
 */
proto.feast.registry.GetFeatureServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.GetFeatureServiceRequest;
  return proto.feast.registry.GetFeatureServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.GetFeatureServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.GetFeatureServiceRequest}
 */
proto.feast.registry.GetFeatureServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.GetFeatureServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.GetFeatureServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.GetFeatureServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetFeatureServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.GetFeatureServiceRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetFeatureServiceRequest} returns this
 */
proto.feast.registry.GetFeatureServiceRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.GetFeatureServiceRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetFeatureServiceRequest} returns this
 */
proto.feast.registry.GetFeatureServiceRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool allow_cache = 3;
 * @return {boolean}
 */
proto.feast.registry.GetFeatureServiceRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.GetFeatureServiceRequest} returns this
 */
proto.feast.registry.GetFeatureServiceRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListFeatureServicesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListFeatureServicesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListFeatureServicesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListFeatureServicesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListFeatureServicesRequest}
 */
proto.feast.registry.ListFeatureServicesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListFeatureServicesRequest;
  return proto.feast.registry.ListFeatureServicesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListFeatureServicesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListFeatureServicesRequest}
 */
proto.feast.registry.ListFeatureServicesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    case 3:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListFeatureServicesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListFeatureServicesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListFeatureServicesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListFeatureServicesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.registry.ListFeatureServicesRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ListFeatureServicesRequest} returns this
 */
proto.feast.registry.ListFeatureServicesRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool allow_cache = 2;
 * @return {boolean}
 */
proto.feast.registry.ListFeatureServicesRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ListFeatureServicesRequest} returns this
 */
proto.feast.registry.ListFeatureServicesRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * map<string, string> tags = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.registry.ListFeatureServicesRequest.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.registry.ListFeatureServicesRequest} returns this
 */
proto.feast.registry.ListFeatureServicesRequest.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.registry.ListFeatureServicesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListFeatureServicesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListFeatureServicesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListFeatureServicesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListFeatureServicesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureServicesList: jspb.Message.toObjectList(msg.getFeatureServicesList(),
    proto.feast.core.FeatureService.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListFeatureServicesResponse}
 */
proto.feast.registry.ListFeatureServicesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListFeatureServicesResponse;
  return proto.feast.registry.ListFeatureServicesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListFeatureServicesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListFeatureServicesResponse}
 */
proto.feast.registry.ListFeatureServicesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.FeatureService;
      reader.readMessage(value,proto.feast.core.FeatureService.deserializeBinaryFromReader);
      msg.addFeatureServices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListFeatureServicesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListFeatureServicesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListFeatureServicesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListFeatureServicesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.core.FeatureService.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feast.core.FeatureService feature_services = 1;
 * @return {!Array<!proto.feast.core.FeatureService>}
 */
proto.feast.registry.ListFeatureServicesResponse.prototype.getFeatureServicesList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureService>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.FeatureService, 1));
};


/**
 * @param {!Array<!proto.feast.core.FeatureService>} value
 * @return {!proto.feast.registry.ListFeatureServicesResponse} returns this
*/
proto.feast.registry.ListFeatureServicesResponse.prototype.setFeatureServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.core.FeatureService=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureService}
 */
proto.feast.registry.ListFeatureServicesResponse.prototype.addFeatureServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.core.FeatureService, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.registry.ListFeatureServicesResponse} returns this
 */
proto.feast.registry.ListFeatureServicesResponse.prototype.clearFeatureServicesList = function() {
  return this.setFeatureServicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.DeleteFeatureServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.DeleteFeatureServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.DeleteFeatureServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.DeleteFeatureServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.DeleteFeatureServiceRequest}
 */
proto.feast.registry.DeleteFeatureServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.DeleteFeatureServiceRequest;
  return proto.feast.registry.DeleteFeatureServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.DeleteFeatureServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.DeleteFeatureServiceRequest}
 */
proto.feast.registry.DeleteFeatureServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.DeleteFeatureServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.DeleteFeatureServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.DeleteFeatureServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.DeleteFeatureServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.DeleteFeatureServiceRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.DeleteFeatureServiceRequest} returns this
 */
proto.feast.registry.DeleteFeatureServiceRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.DeleteFeatureServiceRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.DeleteFeatureServiceRequest} returns this
 */
proto.feast.registry.DeleteFeatureServiceRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool commit = 3;
 * @return {boolean}
 */
proto.feast.registry.DeleteFeatureServiceRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.DeleteFeatureServiceRequest} returns this
 */
proto.feast.registry.DeleteFeatureServiceRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ApplySavedDatasetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ApplySavedDatasetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ApplySavedDatasetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplySavedDatasetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    savedDataset: (f = msg.getSavedDataset()) && proto.feast.core.SavedDataset.toObject(includeInstance, f),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ApplySavedDatasetRequest}
 */
proto.feast.registry.ApplySavedDatasetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ApplySavedDatasetRequest;
  return proto.feast.registry.ApplySavedDatasetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ApplySavedDatasetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ApplySavedDatasetRequest}
 */
proto.feast.registry.ApplySavedDatasetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.SavedDataset;
      reader.readMessage(value,proto.feast.core.SavedDataset.deserializeBinaryFromReader);
      msg.setSavedDataset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ApplySavedDatasetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ApplySavedDatasetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ApplySavedDatasetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplySavedDatasetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSavedDataset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.SavedDataset.serializeBinaryToWriter
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional feast.core.SavedDataset saved_dataset = 1;
 * @return {?proto.feast.core.SavedDataset}
 */
proto.feast.registry.ApplySavedDatasetRequest.prototype.getSavedDataset = function() {
  return /** @type{?proto.feast.core.SavedDataset} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.SavedDataset, 1));
};


/**
 * @param {?proto.feast.core.SavedDataset|undefined} value
 * @return {!proto.feast.registry.ApplySavedDatasetRequest} returns this
*/
proto.feast.registry.ApplySavedDatasetRequest.prototype.setSavedDataset = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.registry.ApplySavedDatasetRequest} returns this
 */
proto.feast.registry.ApplySavedDatasetRequest.prototype.clearSavedDataset = function() {
  return this.setSavedDataset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.registry.ApplySavedDatasetRequest.prototype.hasSavedDataset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.ApplySavedDatasetRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ApplySavedDatasetRequest} returns this
 */
proto.feast.registry.ApplySavedDatasetRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool commit = 3;
 * @return {boolean}
 */
proto.feast.registry.ApplySavedDatasetRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ApplySavedDatasetRequest} returns this
 */
proto.feast.registry.ApplySavedDatasetRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.GetSavedDatasetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.GetSavedDatasetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.GetSavedDatasetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetSavedDatasetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.GetSavedDatasetRequest}
 */
proto.feast.registry.GetSavedDatasetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.GetSavedDatasetRequest;
  return proto.feast.registry.GetSavedDatasetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.GetSavedDatasetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.GetSavedDatasetRequest}
 */
proto.feast.registry.GetSavedDatasetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.GetSavedDatasetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.GetSavedDatasetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.GetSavedDatasetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetSavedDatasetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.GetSavedDatasetRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetSavedDatasetRequest} returns this
 */
proto.feast.registry.GetSavedDatasetRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.GetSavedDatasetRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetSavedDatasetRequest} returns this
 */
proto.feast.registry.GetSavedDatasetRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool allow_cache = 3;
 * @return {boolean}
 */
proto.feast.registry.GetSavedDatasetRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.GetSavedDatasetRequest} returns this
 */
proto.feast.registry.GetSavedDatasetRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListSavedDatasetsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListSavedDatasetsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListSavedDatasetsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListSavedDatasetsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListSavedDatasetsRequest}
 */
proto.feast.registry.ListSavedDatasetsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListSavedDatasetsRequest;
  return proto.feast.registry.ListSavedDatasetsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListSavedDatasetsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListSavedDatasetsRequest}
 */
proto.feast.registry.ListSavedDatasetsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListSavedDatasetsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListSavedDatasetsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListSavedDatasetsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListSavedDatasetsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.registry.ListSavedDatasetsRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ListSavedDatasetsRequest} returns this
 */
proto.feast.registry.ListSavedDatasetsRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool allow_cache = 2;
 * @return {boolean}
 */
proto.feast.registry.ListSavedDatasetsRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ListSavedDatasetsRequest} returns this
 */
proto.feast.registry.ListSavedDatasetsRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.registry.ListSavedDatasetsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListSavedDatasetsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListSavedDatasetsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListSavedDatasetsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListSavedDatasetsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    savedDatasetsList: jspb.Message.toObjectList(msg.getSavedDatasetsList(),
    proto.feast.core.SavedDataset.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListSavedDatasetsResponse}
 */
proto.feast.registry.ListSavedDatasetsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListSavedDatasetsResponse;
  return proto.feast.registry.ListSavedDatasetsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListSavedDatasetsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListSavedDatasetsResponse}
 */
proto.feast.registry.ListSavedDatasetsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.SavedDataset;
      reader.readMessage(value,proto.feast.core.SavedDataset.deserializeBinaryFromReader);
      msg.addSavedDatasets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListSavedDatasetsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListSavedDatasetsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListSavedDatasetsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListSavedDatasetsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSavedDatasetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.core.SavedDataset.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feast.core.SavedDataset saved_datasets = 1;
 * @return {!Array<!proto.feast.core.SavedDataset>}
 */
proto.feast.registry.ListSavedDatasetsResponse.prototype.getSavedDatasetsList = function() {
  return /** @type{!Array<!proto.feast.core.SavedDataset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.SavedDataset, 1));
};


/**
 * @param {!Array<!proto.feast.core.SavedDataset>} value
 * @return {!proto.feast.registry.ListSavedDatasetsResponse} returns this
*/
proto.feast.registry.ListSavedDatasetsResponse.prototype.setSavedDatasetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.core.SavedDataset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.SavedDataset}
 */
proto.feast.registry.ListSavedDatasetsResponse.prototype.addSavedDatasets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.core.SavedDataset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.registry.ListSavedDatasetsResponse} returns this
 */
proto.feast.registry.ListSavedDatasetsResponse.prototype.clearSavedDatasetsList = function() {
  return this.setSavedDatasetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.DeleteSavedDatasetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.DeleteSavedDatasetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.DeleteSavedDatasetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.DeleteSavedDatasetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.DeleteSavedDatasetRequest}
 */
proto.feast.registry.DeleteSavedDatasetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.DeleteSavedDatasetRequest;
  return proto.feast.registry.DeleteSavedDatasetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.DeleteSavedDatasetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.DeleteSavedDatasetRequest}
 */
proto.feast.registry.DeleteSavedDatasetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.DeleteSavedDatasetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.DeleteSavedDatasetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.DeleteSavedDatasetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.DeleteSavedDatasetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.DeleteSavedDatasetRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.DeleteSavedDatasetRequest} returns this
 */
proto.feast.registry.DeleteSavedDatasetRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.DeleteSavedDatasetRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.DeleteSavedDatasetRequest} returns this
 */
proto.feast.registry.DeleteSavedDatasetRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool commit = 3;
 * @return {boolean}
 */
proto.feast.registry.DeleteSavedDatasetRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.DeleteSavedDatasetRequest} returns this
 */
proto.feast.registry.DeleteSavedDatasetRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ApplyValidationReferenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ApplyValidationReferenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ApplyValidationReferenceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplyValidationReferenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    validationReference: (f = msg.getValidationReference()) && proto.feast.core.ValidationReference.toObject(includeInstance, f),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ApplyValidationReferenceRequest}
 */
proto.feast.registry.ApplyValidationReferenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ApplyValidationReferenceRequest;
  return proto.feast.registry.ApplyValidationReferenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ApplyValidationReferenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ApplyValidationReferenceRequest}
 */
proto.feast.registry.ApplyValidationReferenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.ValidationReference;
      reader.readMessage(value,proto.feast.core.ValidationReference.deserializeBinaryFromReader);
      msg.setValidationReference(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ApplyValidationReferenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ApplyValidationReferenceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ApplyValidationReferenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ApplyValidationReferenceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidationReference();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.ValidationReference.serializeBinaryToWriter
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional feast.core.ValidationReference validation_reference = 1;
 * @return {?proto.feast.core.ValidationReference}
 */
proto.feast.registry.ApplyValidationReferenceRequest.prototype.getValidationReference = function() {
  return /** @type{?proto.feast.core.ValidationReference} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.ValidationReference, 1));
};


/**
 * @param {?proto.feast.core.ValidationReference|undefined} value
 * @return {!proto.feast.registry.ApplyValidationReferenceRequest} returns this
*/
proto.feast.registry.ApplyValidationReferenceRequest.prototype.setValidationReference = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.registry.ApplyValidationReferenceRequest} returns this
 */
proto.feast.registry.ApplyValidationReferenceRequest.prototype.clearValidationReference = function() {
  return this.setValidationReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.registry.ApplyValidationReferenceRequest.prototype.hasValidationReference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.ApplyValidationReferenceRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ApplyValidationReferenceRequest} returns this
 */
proto.feast.registry.ApplyValidationReferenceRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool commit = 3;
 * @return {boolean}
 */
proto.feast.registry.ApplyValidationReferenceRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ApplyValidationReferenceRequest} returns this
 */
proto.feast.registry.ApplyValidationReferenceRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.GetValidationReferenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.GetValidationReferenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.GetValidationReferenceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetValidationReferenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.GetValidationReferenceRequest}
 */
proto.feast.registry.GetValidationReferenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.GetValidationReferenceRequest;
  return proto.feast.registry.GetValidationReferenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.GetValidationReferenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.GetValidationReferenceRequest}
 */
proto.feast.registry.GetValidationReferenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.GetValidationReferenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.GetValidationReferenceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.GetValidationReferenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.GetValidationReferenceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.GetValidationReferenceRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetValidationReferenceRequest} returns this
 */
proto.feast.registry.GetValidationReferenceRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.GetValidationReferenceRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.GetValidationReferenceRequest} returns this
 */
proto.feast.registry.GetValidationReferenceRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool allow_cache = 3;
 * @return {boolean}
 */
proto.feast.registry.GetValidationReferenceRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.GetValidationReferenceRequest} returns this
 */
proto.feast.registry.GetValidationReferenceRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListValidationReferencesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListValidationReferencesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListValidationReferencesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListValidationReferencesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    allowCache: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListValidationReferencesRequest}
 */
proto.feast.registry.ListValidationReferencesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListValidationReferencesRequest;
  return proto.feast.registry.ListValidationReferencesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListValidationReferencesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListValidationReferencesRequest}
 */
proto.feast.registry.ListValidationReferencesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListValidationReferencesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListValidationReferencesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListValidationReferencesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListValidationReferencesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAllowCache();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.registry.ListValidationReferencesRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.ListValidationReferencesRequest} returns this
 */
proto.feast.registry.ListValidationReferencesRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool allow_cache = 2;
 * @return {boolean}
 */
proto.feast.registry.ListValidationReferencesRequest.prototype.getAllowCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.ListValidationReferencesRequest} returns this
 */
proto.feast.registry.ListValidationReferencesRequest.prototype.setAllowCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.registry.ListValidationReferencesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.ListValidationReferencesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.ListValidationReferencesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.ListValidationReferencesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListValidationReferencesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    validationReferencesList: jspb.Message.toObjectList(msg.getValidationReferencesList(),
    proto.feast.core.ValidationReference.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.ListValidationReferencesResponse}
 */
proto.feast.registry.ListValidationReferencesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.ListValidationReferencesResponse;
  return proto.feast.registry.ListValidationReferencesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.ListValidationReferencesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.ListValidationReferencesResponse}
 */
proto.feast.registry.ListValidationReferencesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.ValidationReference;
      reader.readMessage(value,proto.feast.core.ValidationReference.deserializeBinaryFromReader);
      msg.addValidationReferences(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.ListValidationReferencesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.ListValidationReferencesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.ListValidationReferencesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.ListValidationReferencesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidationReferencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.core.ValidationReference.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feast.core.ValidationReference validation_references = 1;
 * @return {!Array<!proto.feast.core.ValidationReference>}
 */
proto.feast.registry.ListValidationReferencesResponse.prototype.getValidationReferencesList = function() {
  return /** @type{!Array<!proto.feast.core.ValidationReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.ValidationReference, 1));
};


/**
 * @param {!Array<!proto.feast.core.ValidationReference>} value
 * @return {!proto.feast.registry.ListValidationReferencesResponse} returns this
*/
proto.feast.registry.ListValidationReferencesResponse.prototype.setValidationReferencesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.core.ValidationReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.ValidationReference}
 */
proto.feast.registry.ListValidationReferencesResponse.prototype.addValidationReferences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.core.ValidationReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.registry.ListValidationReferencesResponse} returns this
 */
proto.feast.registry.ListValidationReferencesResponse.prototype.clearValidationReferencesList = function() {
  return this.setValidationReferencesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.registry.DeleteValidationReferenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.registry.DeleteValidationReferenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.registry.DeleteValidationReferenceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.DeleteValidationReferenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.registry.DeleteValidationReferenceRequest}
 */
proto.feast.registry.DeleteValidationReferenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.registry.DeleteValidationReferenceRequest;
  return proto.feast.registry.DeleteValidationReferenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.registry.DeleteValidationReferenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.registry.DeleteValidationReferenceRequest}
 */
proto.feast.registry.DeleteValidationReferenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.registry.DeleteValidationReferenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.registry.DeleteValidationReferenceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.registry.DeleteValidationReferenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.registry.DeleteValidationReferenceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.registry.DeleteValidationReferenceRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.DeleteValidationReferenceRequest} returns this
 */
proto.feast.registry.DeleteValidationReferenceRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.registry.DeleteValidationReferenceRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.registry.DeleteValidationReferenceRequest} returns this
 */
proto.feast.registry.DeleteValidationReferenceRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool commit = 3;
 * @return {boolean}
 */
proto.feast.registry.DeleteValidationReferenceRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.registry.DeleteValidationReferenceRequest} returns this
 */
proto.feast.registry.DeleteValidationReferenceRequest.prototype.setCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.EntityKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.EntityKey.repeatedFields_, null);
};
goog.inherits(proto.feast.types.EntityKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.EntityKey.displayName = 'proto.feast.types.EntityKey';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.EntityKey.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.EntityKey.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.EntityKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.EntityKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.EntityKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    joinKeysList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    entityValuesList: jspb.Message.toObjectList(msg.getEntityValuesList(),
    proto.feast.types.Value.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.EntityKey}
 */
proto.feast.types.EntityKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.EntityKey;
  return proto.feast.types.EntityKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.EntityKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.EntityKey}
 */
proto.feast.types.EntityKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addJoinKeys(value);
      break;
    case 2:
      var value = new proto.feast.types.Value;
      reader.readMessage(value,proto.feast.types.Value.deserializeBinaryFromReader);
      msg.addEntityValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.EntityKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.EntityKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.EntityKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.EntityKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJoinKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getEntityValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.feast.types.Value.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string join_keys = 1;
 * @return {!Array<string>}
 */
proto.feast.types.EntityKey.prototype.getJoinKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.feast.types.EntityKey} returns this
 */
proto.feast.types.EntityKey.prototype.setJoinKeysList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.EntityKey} returns this
 */
proto.feast.types.EntityKey.prototype.addJoinKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.EntityKey} returns this
 */
proto.feast.types.EntityKey.prototype.clearJoinKeysList = function() {
  return this.setJoinKeysList([]);
};


/**
 * repeated Value entity_values = 2;
 * @return {!Array<!proto.feast.types.Value>}
 */
proto.feast.types.EntityKey.prototype.getEntityValuesList = function() {
  return /** @type{!Array<!proto.feast.types.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.types.Value, 2));
};


/**
 * @param {!Array<!proto.feast.types.Value>} value
 * @return {!proto.feast.types.EntityKey} returns this
*/
proto.feast.types.EntityKey.prototype.setEntityValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.feast.types.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.types.Value}
 */
proto.feast.types.EntityKey.prototype.addEntityValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.feast.types.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.EntityKey} returns this
 */
proto.feast.types.EntityKey.prototype.clearEntityValuesList = function() {
  return this.setEntityValuesList([]);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.GetFeastServingInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.serving.GetFeastServingInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.GetFeastServingInfoRequest.displayName = 'proto.feast.serving.GetFeastServingInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.GetFeastServingInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.serving.GetFeastServingInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.GetFeastServingInfoResponse.displayName = 'proto.feast.serving.GetFeastServingInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.FeatureReferenceV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.serving.FeatureReferenceV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.FeatureReferenceV2.displayName = 'proto.feast.serving.FeatureReferenceV2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.GetOnlineFeaturesRequestV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.serving.GetOnlineFeaturesRequestV2.repeatedFields_, null);
};
goog.inherits(proto.feast.serving.GetOnlineFeaturesRequestV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.GetOnlineFeaturesRequestV2.displayName = 'proto.feast.serving.GetOnlineFeaturesRequestV2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.displayName = 'proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.FeatureList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.serving.FeatureList.repeatedFields_, null);
};
goog.inherits(proto.feast.serving.FeatureList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.FeatureList.displayName = 'proto.feast.serving.FeatureList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.GetOnlineFeaturesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.serving.GetOnlineFeaturesRequest.oneofGroups_);
};
goog.inherits(proto.feast.serving.GetOnlineFeaturesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.GetOnlineFeaturesRequest.displayName = 'proto.feast.serving.GetOnlineFeaturesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.GetOnlineFeaturesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.serving.GetOnlineFeaturesResponse.repeatedFields_, null);
};
goog.inherits(proto.feast.serving.GetOnlineFeaturesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.GetOnlineFeaturesResponse.displayName = 'proto.feast.serving.GetOnlineFeaturesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.repeatedFields_, null);
};
goog.inherits(proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.displayName = 'proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.GetOnlineFeaturesResponseMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.serving.GetOnlineFeaturesResponseMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.GetOnlineFeaturesResponseMetadata.displayName = 'proto.feast.serving.GetOnlineFeaturesResponseMetadata';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.GetFeastServingInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.GetFeastServingInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.GetFeastServingInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetFeastServingInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.GetFeastServingInfoRequest}
 */
proto.feast.serving.GetFeastServingInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.GetFeastServingInfoRequest;
  return proto.feast.serving.GetFeastServingInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.GetFeastServingInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.GetFeastServingInfoRequest}
 */
proto.feast.serving.GetFeastServingInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.GetFeastServingInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.GetFeastServingInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.GetFeastServingInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetFeastServingInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.GetFeastServingInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.GetFeastServingInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.GetFeastServingInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetFeastServingInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.GetFeastServingInfoResponse}
 */
proto.feast.serving.GetFeastServingInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.GetFeastServingInfoResponse;
  return proto.feast.serving.GetFeastServingInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.GetFeastServingInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.GetFeastServingInfoResponse}
 */
proto.feast.serving.GetFeastServingInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.GetFeastServingInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.GetFeastServingInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.GetFeastServingInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetFeastServingInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.feast.serving.GetFeastServingInfoResponse.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.serving.GetFeastServingInfoResponse} returns this
 */
proto.feast.serving.GetFeastServingInfoResponse.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.FeatureReferenceV2.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.FeatureReferenceV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.FeatureReferenceV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.FeatureReferenceV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureViewName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    featureName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.FeatureReferenceV2}
 */
proto.feast.serving.FeatureReferenceV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.FeatureReferenceV2;
  return proto.feast.serving.FeatureReferenceV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.FeatureReferenceV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.FeatureReferenceV2}
 */
proto.feast.serving.FeatureReferenceV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureViewName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.FeatureReferenceV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.FeatureReferenceV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.FeatureReferenceV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.FeatureReferenceV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureViewName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeatureName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string feature_view_name = 1;
 * @return {string}
 */
proto.feast.serving.FeatureReferenceV2.prototype.getFeatureViewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.serving.FeatureReferenceV2} returns this
 */
proto.feast.serving.FeatureReferenceV2.prototype.setFeatureViewName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string feature_name = 2;
 * @return {string}
 */
proto.feast.serving.FeatureReferenceV2.prototype.getFeatureName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.serving.FeatureReferenceV2} returns this
 */
proto.feast.serving.FeatureReferenceV2.prototype.setFeatureName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.repeatedFields_ = [4,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.GetOnlineFeaturesRequestV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.GetOnlineFeaturesRequestV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto.feast.serving.FeatureReferenceV2.toObject, includeInstance),
    entityRowsList: jspb.Message.toObjectList(msg.getEntityRowsList(),
    proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.toObject, includeInstance),
    project: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequestV2}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.GetOnlineFeaturesRequestV2;
  return proto.feast.serving.GetOnlineFeaturesRequestV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.GetOnlineFeaturesRequestV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequestV2}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new proto.feast.serving.FeatureReferenceV2;
      reader.readMessage(value,proto.feast.serving.FeatureReferenceV2.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 2:
      var value = new proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow;
      reader.readMessage(value,proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.deserializeBinaryFromReader);
      msg.addEntityRows(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.GetOnlineFeaturesRequestV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.GetOnlineFeaturesRequestV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.feast.serving.FeatureReferenceV2.serializeBinaryToWriter
    );
  }
  f = message.getEntityRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.serializeBinaryToWriter
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    fieldsMap: (f = msg.getFieldsMap()) ? f.toObject(includeInstance, proto.feast.types.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow;
  return proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 2:
      var value = msg.getFieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.feast.types.Value.deserializeBinaryFromReader, "", new proto.feast.types.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.feast.types.Value.serializeBinaryToWriter);
  }
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow} returns this
*/
proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow} returns this
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, feast.types.Value> fields = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.feast.types.Value>}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.prototype.getFieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.feast.types.Value>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.feast.types.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow} returns this
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow.prototype.clearFieldsMap = function() {
  this.getFieldsMap().clear();
  return this;
};


/**
 * repeated FeatureReferenceV2 features = 4;
 * @return {!Array<!proto.feast.serving.FeatureReferenceV2>}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.feast.serving.FeatureReferenceV2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.serving.FeatureReferenceV2, 4));
};


/**
 * @param {!Array<!proto.feast.serving.FeatureReferenceV2>} value
 * @return {!proto.feast.serving.GetOnlineFeaturesRequestV2} returns this
*/
proto.feast.serving.GetOnlineFeaturesRequestV2.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.feast.serving.FeatureReferenceV2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.serving.FeatureReferenceV2}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.feast.serving.FeatureReferenceV2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequestV2} returns this
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * repeated EntityRow entity_rows = 2;
 * @return {!Array<!proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow>}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.prototype.getEntityRowsList = function() {
  return /** @type{!Array<!proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow, 2));
};


/**
 * @param {!Array<!proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow>} value
 * @return {!proto.feast.serving.GetOnlineFeaturesRequestV2} returns this
*/
proto.feast.serving.GetOnlineFeaturesRequestV2.prototype.setEntityRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.prototype.addEntityRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.feast.serving.GetOnlineFeaturesRequestV2.EntityRow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequestV2} returns this
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.prototype.clearEntityRowsList = function() {
  return this.setEntityRowsList([]);
};


/**
 * optional string project = 5;
 * @return {string}
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.serving.GetOnlineFeaturesRequestV2} returns this
 */
proto.feast.serving.GetOnlineFeaturesRequestV2.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.serving.FeatureList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.FeatureList.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.FeatureList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.FeatureList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.FeatureList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.FeatureList}
 */
proto.feast.serving.FeatureList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.FeatureList;
  return proto.feast.serving.FeatureList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.FeatureList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.FeatureList}
 */
proto.feast.serving.FeatureList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.FeatureList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.FeatureList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.FeatureList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.FeatureList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string val = 1;
 * @return {!Array<string>}
 */
proto.feast.serving.FeatureList.prototype.getValList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.feast.serving.FeatureList} returns this
 */
proto.feast.serving.FeatureList.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.feast.serving.FeatureList} returns this
 */
proto.feast.serving.FeatureList.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.serving.FeatureList} returns this
 */
proto.feast.serving.FeatureList.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.serving.GetOnlineFeaturesRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.feast.serving.GetOnlineFeaturesRequest.KindCase = {
  KIND_NOT_SET: 0,
  FEATURE_SERVICE: 1,
  FEATURES: 2
};

/**
 * @return {proto.feast.serving.GetOnlineFeaturesRequest.KindCase}
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.getKindCase = function() {
  return /** @type {proto.feast.serving.GetOnlineFeaturesRequest.KindCase} */(jspb.Message.computeOneofCase(this, proto.feast.serving.GetOnlineFeaturesRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.GetOnlineFeaturesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.GetOnlineFeaturesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetOnlineFeaturesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureService: jspb.Message.getFieldWithDefault(msg, 1, ""),
    features: (f = msg.getFeatures()) && proto.feast.serving.FeatureList.toObject(includeInstance, f),
    entitiesMap: (f = msg.getEntitiesMap()) ? f.toObject(includeInstance, proto.feast.types.RepeatedValue.toObject) : [],
    fullFeatureNames: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    requestContextMap: (f = msg.getRequestContextMap()) ? f.toObject(includeInstance, proto.feast.types.RepeatedValue.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequest}
 */
proto.feast.serving.GetOnlineFeaturesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.GetOnlineFeaturesRequest;
  return proto.feast.serving.GetOnlineFeaturesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.GetOnlineFeaturesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequest}
 */
proto.feast.serving.GetOnlineFeaturesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureService(value);
      break;
    case 2:
      var value = new proto.feast.serving.FeatureList;
      reader.readMessage(value,proto.feast.serving.FeatureList.deserializeBinaryFromReader);
      msg.setFeatures(value);
      break;
    case 3:
      var value = msg.getEntitiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.feast.types.RepeatedValue.deserializeBinaryFromReader, "", new proto.feast.types.RepeatedValue());
         });
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFullFeatureNames(value);
      break;
    case 5:
      var value = msg.getRequestContextMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.feast.types.RepeatedValue.deserializeBinaryFromReader, "", new proto.feast.types.RepeatedValue());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.GetOnlineFeaturesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.GetOnlineFeaturesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetOnlineFeaturesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeatures();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.serving.FeatureList.serializeBinaryToWriter
    );
  }
  f = message.getEntitiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.feast.types.RepeatedValue.serializeBinaryToWriter);
  }
  f = message.getFullFeatureNames();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getRequestContextMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.feast.types.RepeatedValue.serializeBinaryToWriter);
  }
};


/**
 * optional string feature_service = 1;
 * @return {string}
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.getFeatureService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.serving.GetOnlineFeaturesRequest} returns this
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.setFeatureService = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.feast.serving.GetOnlineFeaturesRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequest} returns this
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.clearFeatureService = function() {
  return jspb.Message.setOneofField(this, 1, proto.feast.serving.GetOnlineFeaturesRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.hasFeatureService = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FeatureList features = 2;
 * @return {?proto.feast.serving.FeatureList}
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.getFeatures = function() {
  return /** @type{?proto.feast.serving.FeatureList} */ (
    jspb.Message.getWrapperField(this, proto.feast.serving.FeatureList, 2));
};


/**
 * @param {?proto.feast.serving.FeatureList|undefined} value
 * @return {!proto.feast.serving.GetOnlineFeaturesRequest} returns this
*/
proto.feast.serving.GetOnlineFeaturesRequest.prototype.setFeatures = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.feast.serving.GetOnlineFeaturesRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequest} returns this
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.clearFeatures = function() {
  return this.setFeatures(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.hasFeatures = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, feast.types.RepeatedValue> entities = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.feast.types.RepeatedValue>}
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.getEntitiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.feast.types.RepeatedValue>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.feast.types.RepeatedValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequest} returns this
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.clearEntitiesMap = function() {
  this.getEntitiesMap().clear();
  return this;
};


/**
 * optional bool full_feature_names = 4;
 * @return {boolean}
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.getFullFeatureNames = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.serving.GetOnlineFeaturesRequest} returns this
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.setFullFeatureNames = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * map<string, feast.types.RepeatedValue> request_context = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.feast.types.RepeatedValue>}
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.getRequestContextMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.feast.types.RepeatedValue>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.feast.types.RepeatedValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.serving.GetOnlineFeaturesRequest} returns this
 */
proto.feast.serving.GetOnlineFeaturesRequest.prototype.clearRequestContextMap = function() {
  this.getRequestContextMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.serving.GetOnlineFeaturesResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.GetOnlineFeaturesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.GetOnlineFeaturesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.GetOnlineFeaturesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetOnlineFeaturesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.feast.serving.GetOnlineFeaturesResponseMetadata.toObject(includeInstance, f),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.toObject, includeInstance),
    status: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse}
 */
proto.feast.serving.GetOnlineFeaturesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.GetOnlineFeaturesResponse;
  return proto.feast.serving.GetOnlineFeaturesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.GetOnlineFeaturesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse}
 */
proto.feast.serving.GetOnlineFeaturesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.serving.GetOnlineFeaturesResponseMetadata;
      reader.readMessage(value,proto.feast.serving.GetOnlineFeaturesResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector;
      reader.readMessage(value,proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.GetOnlineFeaturesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.GetOnlineFeaturesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.GetOnlineFeaturesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetOnlineFeaturesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.serving.GetOnlineFeaturesResponseMetadata.serializeBinaryToWriter
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.feast.types.Value.toObject, includeInstance),
    statusesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    eventTimestampsList: jspb.Message.toObjectList(msg.getEventTimestampsList(),
    proto.google.protobuf.Timestamp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector}
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector;
  return proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector}
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.types.Value;
      reader.readMessage(value,proto.feast.types.Value.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.feast.serving.FieldStatus>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addStatuses(values[i]);
      }
      break;
    case 3:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.addEventTimestamps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.types.Value.serializeBinaryToWriter
    );
  }
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getEventTimestampsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feast.types.Value values = 1;
 * @return {!Array<!proto.feast.types.Value>}
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.feast.types.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.types.Value, 1));
};


/**
 * @param {!Array<!proto.feast.types.Value>} value
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector} returns this
*/
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.types.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.types.Value}
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.types.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector} returns this
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * repeated FieldStatus statuses = 2;
 * @return {!Array<!proto.feast.serving.FieldStatus>}
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.getStatusesList = function() {
  return /** @type {!Array<!proto.feast.serving.FieldStatus>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.feast.serving.FieldStatus>} value
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector} returns this
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.setStatusesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.feast.serving.FieldStatus} value
 * @param {number=} opt_index
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector} returns this
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.addStatuses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector} returns this
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.clearStatusesList = function() {
  return this.setStatusesList([]);
};


/**
 * repeated google.protobuf.Timestamp event_timestamps = 3;
 * @return {!Array<!proto.google.protobuf.Timestamp>}
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.getEventTimestampsList = function() {
  return /** @type{!Array<!proto.google.protobuf.Timestamp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.google.protobuf.Timestamp, 3));
};


/**
 * @param {!Array<!proto.google.protobuf.Timestamp>} value
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector} returns this
*/
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.setEventTimestampsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.google.protobuf.Timestamp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Timestamp}
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.addEventTimestamps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.google.protobuf.Timestamp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector} returns this
 */
proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector.prototype.clearEventTimestampsList = function() {
  return this.setEventTimestampsList([]);
};


/**
 * optional GetOnlineFeaturesResponseMetadata metadata = 1;
 * @return {?proto.feast.serving.GetOnlineFeaturesResponseMetadata}
 */
proto.feast.serving.GetOnlineFeaturesResponse.prototype.getMetadata = function() {
  return /** @type{?proto.feast.serving.GetOnlineFeaturesResponseMetadata} */ (
    jspb.Message.getWrapperField(this, proto.feast.serving.GetOnlineFeaturesResponseMetadata, 1));
};


/**
 * @param {?proto.feast.serving.GetOnlineFeaturesResponseMetadata|undefined} value
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse} returns this
*/
proto.feast.serving.GetOnlineFeaturesResponse.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse} returns this
 */
proto.feast.serving.GetOnlineFeaturesResponse.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.serving.GetOnlineFeaturesResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated FeatureVector results = 2;
 * @return {!Array<!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector>}
 */
proto.feast.serving.GetOnlineFeaturesResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector, 2));
};


/**
 * @param {!Array<!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector>} value
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse} returns this
*/
proto.feast.serving.GetOnlineFeaturesResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector}
 */
proto.feast.serving.GetOnlineFeaturesResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.feast.serving.GetOnlineFeaturesResponse.FeatureVector, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse} returns this
 */
proto.feast.serving.GetOnlineFeaturesResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional bool status = 3;
 * @return {boolean}
 */
proto.feast.serving.GetOnlineFeaturesResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.serving.GetOnlineFeaturesResponse} returns this
 */
proto.feast.serving.GetOnlineFeaturesResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.GetOnlineFeaturesResponseMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.GetOnlineFeaturesResponseMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.GetOnlineFeaturesResponseMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetOnlineFeaturesResponseMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureNames: (f = msg.getFeatureNames()) && proto.feast.serving.FeatureList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.GetOnlineFeaturesResponseMetadata}
 */
proto.feast.serving.GetOnlineFeaturesResponseMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.GetOnlineFeaturesResponseMetadata;
  return proto.feast.serving.GetOnlineFeaturesResponseMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.GetOnlineFeaturesResponseMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.GetOnlineFeaturesResponseMetadata}
 */
proto.feast.serving.GetOnlineFeaturesResponseMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.serving.FeatureList;
      reader.readMessage(value,proto.feast.serving.FeatureList.deserializeBinaryFromReader);
      msg.setFeatureNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.GetOnlineFeaturesResponseMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.GetOnlineFeaturesResponseMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.GetOnlineFeaturesResponseMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetOnlineFeaturesResponseMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureNames();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.serving.FeatureList.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeatureList feature_names = 1;
 * @return {?proto.feast.serving.FeatureList}
 */
proto.feast.serving.GetOnlineFeaturesResponseMetadata.prototype.getFeatureNames = function() {
  return /** @type{?proto.feast.serving.FeatureList} */ (
    jspb.Message.getWrapperField(this, proto.feast.serving.FeatureList, 1));
};


/**
 * @param {?proto.feast.serving.FeatureList|undefined} value
 * @return {!proto.feast.serving.GetOnlineFeaturesResponseMetadata} returns this
*/
proto.feast.serving.GetOnlineFeaturesResponseMetadata.prototype.setFeatureNames = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.serving.GetOnlineFeaturesResponseMetadata} returns this
 */
proto.feast.serving.GetOnlineFeaturesResponseMetadata.prototype.clearFeatureNames = function() {
  return this.setFeatureNames(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.serving.GetOnlineFeaturesResponseMetadata.prototype.hasFeatureNames = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.feast.serving.FieldStatus = {
  INVALID: 0,
  PRESENT: 1,
  NULL_VALUE: 2,
  NOT_FOUND: 3,
  OUTSIDE_MAX_AGE: 4
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.connector.ConnectorFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.connector.ConnectorFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.connector.ConnectorFeature.displayName = 'proto.grpc.connector.ConnectorFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.connector.ConnectorFeatureList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.connector.ConnectorFeatureList.repeatedFields_, null);
};
goog.inherits(proto.grpc.connector.ConnectorFeatureList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.connector.ConnectorFeatureList.displayName = 'proto.grpc.connector.ConnectorFeatureList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.connector.OnlineReadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.connector.OnlineReadRequest.repeatedFields_, null);
};
goog.inherits(proto.grpc.connector.OnlineReadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.connector.OnlineReadRequest.displayName = 'proto.grpc.connector.OnlineReadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.connector.OnlineReadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.connector.OnlineReadResponse.repeatedFields_, null);
};
goog.inherits(proto.grpc.connector.OnlineReadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.connector.OnlineReadResponse.displayName = 'proto.grpc.connector.OnlineReadResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.connector.ConnectorFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.connector.ConnectorFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.connector.ConnectorFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.connector.ConnectorFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    reference: (f = msg.getReference()) && proto.feast.serving.FeatureReferenceV2.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.feast.types.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.connector.ConnectorFeature}
 */
proto.grpc.connector.ConnectorFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.connector.ConnectorFeature;
  return proto.grpc.connector.ConnectorFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.connector.ConnectorFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.connector.ConnectorFeature}
 */
proto.grpc.connector.ConnectorFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.serving.FeatureReferenceV2;
      reader.readMessage(value,proto.feast.serving.FeatureReferenceV2.deserializeBinaryFromReader);
      msg.setReference(value);
      break;
    case 2:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = new proto.feast.types.Value;
      reader.readMessage(value,proto.feast.types.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.connector.ConnectorFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.connector.ConnectorFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.connector.ConnectorFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.connector.ConnectorFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReference();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.serving.FeatureReferenceV2.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feast.types.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional feast.serving.FeatureReferenceV2 reference = 1;
 * @return {?proto.feast.serving.FeatureReferenceV2}
 */
proto.grpc.connector.ConnectorFeature.prototype.getReference = function() {
  return /** @type{?proto.feast.serving.FeatureReferenceV2} */ (
    jspb.Message.getWrapperField(this, proto.feast.serving.FeatureReferenceV2, 1));
};


/**
 * @param {?proto.feast.serving.FeatureReferenceV2|undefined} value
 * @return {!proto.grpc.connector.ConnectorFeature} returns this
*/
proto.grpc.connector.ConnectorFeature.prototype.setReference = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.connector.ConnectorFeature} returns this
 */
proto.grpc.connector.ConnectorFeature.prototype.clearReference = function() {
  return this.setReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.connector.ConnectorFeature.prototype.hasReference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.grpc.connector.ConnectorFeature.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.grpc.connector.ConnectorFeature} returns this
*/
proto.grpc.connector.ConnectorFeature.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.connector.ConnectorFeature} returns this
 */
proto.grpc.connector.ConnectorFeature.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.connector.ConnectorFeature.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional feast.types.Value value = 3;
 * @return {?proto.feast.types.Value}
 */
proto.grpc.connector.ConnectorFeature.prototype.getValue = function() {
  return /** @type{?proto.feast.types.Value} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.Value, 3));
};


/**
 * @param {?proto.feast.types.Value|undefined} value
 * @return {!proto.grpc.connector.ConnectorFeature} returns this
*/
proto.grpc.connector.ConnectorFeature.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.connector.ConnectorFeature} returns this
 */
proto.grpc.connector.ConnectorFeature.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.connector.ConnectorFeature.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.connector.ConnectorFeatureList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.connector.ConnectorFeatureList.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.connector.ConnectorFeatureList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.connector.ConnectorFeatureList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.connector.ConnectorFeatureList.toObject = function(includeInstance, msg) {
  var f, obj = {
    featurelistList: jspb.Message.toObjectList(msg.getFeaturelistList(),
    proto.grpc.connector.ConnectorFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.connector.ConnectorFeatureList}
 */
proto.grpc.connector.ConnectorFeatureList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.connector.ConnectorFeatureList;
  return proto.grpc.connector.ConnectorFeatureList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.connector.ConnectorFeatureList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.connector.ConnectorFeatureList}
 */
proto.grpc.connector.ConnectorFeatureList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.connector.ConnectorFeature;
      reader.readMessage(value,proto.grpc.connector.ConnectorFeature.deserializeBinaryFromReader);
      msg.addFeaturelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.connector.ConnectorFeatureList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.connector.ConnectorFeatureList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.connector.ConnectorFeatureList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.connector.ConnectorFeatureList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeaturelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grpc.connector.ConnectorFeature.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConnectorFeature featureList = 1;
 * @return {!Array<!proto.grpc.connector.ConnectorFeature>}
 */
proto.grpc.connector.ConnectorFeatureList.prototype.getFeaturelistList = function() {
  return /** @type{!Array<!proto.grpc.connector.ConnectorFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.connector.ConnectorFeature, 1));
};


/**
 * @param {!Array<!proto.grpc.connector.ConnectorFeature>} value
 * @return {!proto.grpc.connector.ConnectorFeatureList} returns this
*/
proto.grpc.connector.ConnectorFeatureList.prototype.setFeaturelistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grpc.connector.ConnectorFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.connector.ConnectorFeature}
 */
proto.grpc.connector.ConnectorFeatureList.prototype.addFeaturelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grpc.connector.ConnectorFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grpc.connector.ConnectorFeatureList} returns this
 */
proto.grpc.connector.ConnectorFeatureList.prototype.clearFeaturelistList = function() {
  return this.setFeaturelistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.connector.OnlineReadRequest.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.connector.OnlineReadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.connector.OnlineReadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.connector.OnlineReadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.connector.OnlineReadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitykeysList: jspb.Message.toObjectList(msg.getEntitykeysList(),
    proto.feast.types.EntityKey.toObject, includeInstance),
    view: jspb.Message.getFieldWithDefault(msg, 2, ""),
    featuresList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.connector.OnlineReadRequest}
 */
proto.grpc.connector.OnlineReadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.connector.OnlineReadRequest;
  return proto.grpc.connector.OnlineReadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.connector.OnlineReadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.connector.OnlineReadRequest}
 */
proto.grpc.connector.OnlineReadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.types.EntityKey;
      reader.readMessage(value,proto.feast.types.EntityKey.deserializeBinaryFromReader);
      msg.addEntitykeys(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setView(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.connector.OnlineReadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.connector.OnlineReadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.connector.OnlineReadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.connector.OnlineReadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntitykeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.types.EntityKey.serializeBinaryToWriter
    );
  }
  f = message.getView();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated feast.types.EntityKey entityKeys = 1;
 * @return {!Array<!proto.feast.types.EntityKey>}
 */
proto.grpc.connector.OnlineReadRequest.prototype.getEntitykeysList = function() {
  return /** @type{!Array<!proto.feast.types.EntityKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.types.EntityKey, 1));
};


/**
 * @param {!Array<!proto.feast.types.EntityKey>} value
 * @return {!proto.grpc.connector.OnlineReadRequest} returns this
*/
proto.grpc.connector.OnlineReadRequest.prototype.setEntitykeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.types.EntityKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.types.EntityKey}
 */
proto.grpc.connector.OnlineReadRequest.prototype.addEntitykeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.types.EntityKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grpc.connector.OnlineReadRequest} returns this
 */
proto.grpc.connector.OnlineReadRequest.prototype.clearEntitykeysList = function() {
  return this.setEntitykeysList([]);
};


/**
 * optional string view = 2;
 * @return {string}
 */
proto.grpc.connector.OnlineReadRequest.prototype.getView = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.connector.OnlineReadRequest} returns this
 */
proto.grpc.connector.OnlineReadRequest.prototype.setView = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string features = 3;
 * @return {!Array<string>}
 */
proto.grpc.connector.OnlineReadRequest.prototype.getFeaturesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.grpc.connector.OnlineReadRequest} returns this
 */
proto.grpc.connector.OnlineReadRequest.prototype.setFeaturesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.grpc.connector.OnlineReadRequest} returns this
 */
proto.grpc.connector.OnlineReadRequest.prototype.addFeatures = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grpc.connector.OnlineReadRequest} returns this
 */
proto.grpc.connector.OnlineReadRequest.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.connector.OnlineReadResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.connector.OnlineReadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.connector.OnlineReadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.connector.OnlineReadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.connector.OnlineReadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.grpc.connector.ConnectorFeatureList.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.connector.OnlineReadResponse}
 */
proto.grpc.connector.OnlineReadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.connector.OnlineReadResponse;
  return proto.grpc.connector.OnlineReadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.connector.OnlineReadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.connector.OnlineReadResponse}
 */
proto.grpc.connector.OnlineReadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.connector.ConnectorFeatureList;
      reader.readMessage(value,proto.grpc.connector.ConnectorFeatureList.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.connector.OnlineReadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.connector.OnlineReadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.connector.OnlineReadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.connector.OnlineReadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grpc.connector.ConnectorFeatureList.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConnectorFeatureList results = 1;
 * @return {!Array<!proto.grpc.connector.ConnectorFeatureList>}
 */
proto.grpc.connector.OnlineReadResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.grpc.connector.ConnectorFeatureList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.connector.ConnectorFeatureList, 1));
};


/**
 * @param {!Array<!proto.grpc.connector.ConnectorFeatureList>} value
 * @return {!proto.grpc.connector.OnlineReadResponse} returns this
*/
proto.grpc.connector.OnlineReadResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grpc.connector.ConnectorFeatureList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.connector.ConnectorFeatureList}
 */
proto.grpc.connector.OnlineReadResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grpc.connector.ConnectorFeatureList, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grpc.connector.OnlineReadResponse} returns this
 */
proto.grpc.connector.OnlineReadResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PushRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PushRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PushRequest.displayName = 'proto.PushRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PushResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PushResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PushResponse.displayName = 'proto.PushResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WriteToOnlineStoreRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WriteToOnlineStoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WriteToOnlineStoreRequest.displayName = 'proto.WriteToOnlineStoreRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WriteToOnlineStoreResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WriteToOnlineStoreResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WriteToOnlineStoreResponse.displayName = 'proto.WriteToOnlineStoreResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PushRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PushRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PushRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    featuresMap: (f = msg.getFeaturesMap()) ? f.toObject(includeInstance, undefined) : [],
    streamFeatureView: jspb.Message.getFieldWithDefault(msg, 2, ""),
    allowRegistryCache: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    to: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PushRequest}
 */
proto.PushRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PushRequest;
  return proto.PushRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PushRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PushRequest}
 */
proto.PushRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFeaturesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamFeatureView(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowRegistryCache(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PushRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PushRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PushRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeaturesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getStreamFeatureView();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAllowRegistryCache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * map<string, string> features = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.PushRequest.prototype.getFeaturesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PushRequest} returns this
 */
proto.PushRequest.prototype.clearFeaturesMap = function() {
  this.getFeaturesMap().clear();
  return this;
};


/**
 * optional string stream_feature_view = 2;
 * @return {string}
 */
proto.PushRequest.prototype.getStreamFeatureView = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PushRequest} returns this
 */
proto.PushRequest.prototype.setStreamFeatureView = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool allow_registry_cache = 3;
 * @return {boolean}
 */
proto.PushRequest.prototype.getAllowRegistryCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PushRequest} returns this
 */
proto.PushRequest.prototype.setAllowRegistryCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string to = 4;
 * @return {string}
 */
proto.PushRequest.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PushRequest} returns this
 */
proto.PushRequest.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PushResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PushResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PushResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PushResponse}
 */
proto.PushResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PushResponse;
  return proto.PushResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PushResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PushResponse}
 */
proto.PushResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PushResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PushResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PushResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool status = 1;
 * @return {boolean}
 */
proto.PushResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PushResponse} returns this
 */
proto.PushResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WriteToOnlineStoreRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WriteToOnlineStoreRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WriteToOnlineStoreRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WriteToOnlineStoreRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    featuresMap: (f = msg.getFeaturesMap()) ? f.toObject(includeInstance, undefined) : [],
    featureViewName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    allowRegistryCache: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WriteToOnlineStoreRequest}
 */
proto.WriteToOnlineStoreRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WriteToOnlineStoreRequest;
  return proto.WriteToOnlineStoreRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WriteToOnlineStoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WriteToOnlineStoreRequest}
 */
proto.WriteToOnlineStoreRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFeaturesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureViewName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowRegistryCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WriteToOnlineStoreRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WriteToOnlineStoreRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WriteToOnlineStoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WriteToOnlineStoreRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeaturesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getFeatureViewName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAllowRegistryCache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * map<string, string> features = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.WriteToOnlineStoreRequest.prototype.getFeaturesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.WriteToOnlineStoreRequest} returns this
 */
proto.WriteToOnlineStoreRequest.prototype.clearFeaturesMap = function() {
  this.getFeaturesMap().clear();
  return this;
};


/**
 * optional string feature_view_name = 2;
 * @return {string}
 */
proto.WriteToOnlineStoreRequest.prototype.getFeatureViewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.WriteToOnlineStoreRequest} returns this
 */
proto.WriteToOnlineStoreRequest.prototype.setFeatureViewName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool allow_registry_cache = 3;
 * @return {boolean}
 */
proto.WriteToOnlineStoreRequest.prototype.getAllowRegistryCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WriteToOnlineStoreRequest} returns this
 */
proto.WriteToOnlineStoreRequest.prototype.setAllowRegistryCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WriteToOnlineStoreResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WriteToOnlineStoreResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WriteToOnlineStoreResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WriteToOnlineStoreResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WriteToOnlineStoreResponse}
 */
proto.WriteToOnlineStoreResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WriteToOnlineStoreResponse;
  return proto.WriteToOnlineStoreResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WriteToOnlineStoreResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WriteToOnlineStoreResponse}
 */
proto.WriteToOnlineStoreResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WriteToOnlineStoreResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WriteToOnlineStoreResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WriteToOnlineStoreResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WriteToOnlineStoreResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool status = 1;
 * @return {boolean}
 */
proto.WriteToOnlineStoreResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WriteToOnlineStoreResponse} returns this
 */
proto.WriteToOnlineStoreResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.ValueType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.serving.ValueType.oneofGroups_);
};
goog.inherits(proto.feast.serving.ValueType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.ValueType.displayName = 'proto.feast.serving.ValueType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.GetTransformationServiceInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.serving.GetTransformationServiceInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.GetTransformationServiceInfoRequest.displayName = 'proto.feast.serving.GetTransformationServiceInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.GetTransformationServiceInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.serving.GetTransformationServiceInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.GetTransformationServiceInfoResponse.displayName = 'proto.feast.serving.GetTransformationServiceInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.TransformFeaturesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.serving.TransformFeaturesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.TransformFeaturesRequest.displayName = 'proto.feast.serving.TransformFeaturesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.serving.TransformFeaturesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.serving.TransformFeaturesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.serving.TransformFeaturesResponse.displayName = 'proto.feast.serving.TransformFeaturesResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.serving.ValueType.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.feast.serving.ValueType.ValueCase = {
  VALUE_NOT_SET: 0,
  ARROW_VALUE: 1
};

/**
 * @return {proto.feast.serving.ValueType.ValueCase}
 */
proto.feast.serving.ValueType.prototype.getValueCase = function() {
  return /** @type {proto.feast.serving.ValueType.ValueCase} */(jspb.Message.computeOneofCase(this, proto.feast.serving.ValueType.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.ValueType.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.ValueType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.ValueType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.ValueType.toObject = function(includeInstance, msg) {
  var f, obj = {
    arrowValue: msg.getArrowValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.ValueType}
 */
proto.feast.serving.ValueType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.ValueType;
  return proto.feast.serving.ValueType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.ValueType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.ValueType}
 */
proto.feast.serving.ValueType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setArrowValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.ValueType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.ValueType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.ValueType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.ValueType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes arrow_value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.feast.serving.ValueType.prototype.getArrowValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes arrow_value = 1;
 * This is a type-conversion wrapper around `getArrowValue()`
 * @return {string}
 */
proto.feast.serving.ValueType.prototype.getArrowValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getArrowValue()));
};


/**
 * optional bytes arrow_value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArrowValue()`
 * @return {!Uint8Array}
 */
proto.feast.serving.ValueType.prototype.getArrowValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getArrowValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.serving.ValueType} returns this
 */
proto.feast.serving.ValueType.prototype.setArrowValue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.feast.serving.ValueType.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.serving.ValueType} returns this
 */
proto.feast.serving.ValueType.prototype.clearArrowValue = function() {
  return jspb.Message.setOneofField(this, 1, proto.feast.serving.ValueType.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.serving.ValueType.prototype.hasArrowValue = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.GetTransformationServiceInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.GetTransformationServiceInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.GetTransformationServiceInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetTransformationServiceInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.GetTransformationServiceInfoRequest}
 */
proto.feast.serving.GetTransformationServiceInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.GetTransformationServiceInfoRequest;
  return proto.feast.serving.GetTransformationServiceInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.GetTransformationServiceInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.GetTransformationServiceInfoRequest}
 */
proto.feast.serving.GetTransformationServiceInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.GetTransformationServiceInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.GetTransformationServiceInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.GetTransformationServiceInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetTransformationServiceInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.GetTransformationServiceInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.GetTransformationServiceInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.GetTransformationServiceInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetTransformationServiceInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    transformationServiceTypeDetails: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.GetTransformationServiceInfoResponse}
 */
proto.feast.serving.GetTransformationServiceInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.GetTransformationServiceInfoResponse;
  return proto.feast.serving.GetTransformationServiceInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.GetTransformationServiceInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.GetTransformationServiceInfoResponse}
 */
proto.feast.serving.GetTransformationServiceInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!proto.feast.serving.TransformationServiceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransformationServiceTypeDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.GetTransformationServiceInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.GetTransformationServiceInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.GetTransformationServiceInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.GetTransformationServiceInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTransformationServiceTypeDetails();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.feast.serving.GetTransformationServiceInfoResponse.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.serving.GetTransformationServiceInfoResponse} returns this
 */
proto.feast.serving.GetTransformationServiceInfoResponse.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TransformationServiceType type = 2;
 * @return {!proto.feast.serving.TransformationServiceType}
 */
proto.feast.serving.GetTransformationServiceInfoResponse.prototype.getType = function() {
  return /** @type {!proto.feast.serving.TransformationServiceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.feast.serving.TransformationServiceType} value
 * @return {!proto.feast.serving.GetTransformationServiceInfoResponse} returns this
 */
proto.feast.serving.GetTransformationServiceInfoResponse.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string transformation_service_type_details = 3;
 * @return {string}
 */
proto.feast.serving.GetTransformationServiceInfoResponse.prototype.getTransformationServiceTypeDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.serving.GetTransformationServiceInfoResponse} returns this
 */
proto.feast.serving.GetTransformationServiceInfoResponse.prototype.setTransformationServiceTypeDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.TransformFeaturesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.TransformFeaturesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.TransformFeaturesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.TransformFeaturesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    onDemandFeatureViewName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transformationInput: (f = msg.getTransformationInput()) && proto.feast.serving.ValueType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.TransformFeaturesRequest}
 */
proto.feast.serving.TransformFeaturesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.TransformFeaturesRequest;
  return proto.feast.serving.TransformFeaturesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.TransformFeaturesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.TransformFeaturesRequest}
 */
proto.feast.serving.TransformFeaturesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnDemandFeatureViewName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = new proto.feast.serving.ValueType;
      reader.readMessage(value,proto.feast.serving.ValueType.deserializeBinaryFromReader);
      msg.setTransformationInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.TransformFeaturesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.TransformFeaturesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.TransformFeaturesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.TransformFeaturesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnDemandFeatureViewName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransformationInput();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feast.serving.ValueType.serializeBinaryToWriter
    );
  }
};


/**
 * optional string on_demand_feature_view_name = 1;
 * @return {string}
 */
proto.feast.serving.TransformFeaturesRequest.prototype.getOnDemandFeatureViewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.serving.TransformFeaturesRequest} returns this
 */
proto.feast.serving.TransformFeaturesRequest.prototype.setOnDemandFeatureViewName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.serving.TransformFeaturesRequest.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.serving.TransformFeaturesRequest} returns this
 */
proto.feast.serving.TransformFeaturesRequest.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ValueType transformation_input = 3;
 * @return {?proto.feast.serving.ValueType}
 */
proto.feast.serving.TransformFeaturesRequest.prototype.getTransformationInput = function() {
  return /** @type{?proto.feast.serving.ValueType} */ (
    jspb.Message.getWrapperField(this, proto.feast.serving.ValueType, 3));
};


/**
 * @param {?proto.feast.serving.ValueType|undefined} value
 * @return {!proto.feast.serving.TransformFeaturesRequest} returns this
*/
proto.feast.serving.TransformFeaturesRequest.prototype.setTransformationInput = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.serving.TransformFeaturesRequest} returns this
 */
proto.feast.serving.TransformFeaturesRequest.prototype.clearTransformationInput = function() {
  return this.setTransformationInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.serving.TransformFeaturesRequest.prototype.hasTransformationInput = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.serving.TransformFeaturesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.serving.TransformFeaturesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.serving.TransformFeaturesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.TransformFeaturesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transformationOutput: (f = msg.getTransformationOutput()) && proto.feast.serving.ValueType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.serving.TransformFeaturesResponse}
 */
proto.feast.serving.TransformFeaturesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.serving.TransformFeaturesResponse;
  return proto.feast.serving.TransformFeaturesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.serving.TransformFeaturesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.serving.TransformFeaturesResponse}
 */
proto.feast.serving.TransformFeaturesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.feast.serving.ValueType;
      reader.readMessage(value,proto.feast.serving.ValueType.deserializeBinaryFromReader);
      msg.setTransformationOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.serving.TransformFeaturesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.serving.TransformFeaturesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.serving.TransformFeaturesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.serving.TransformFeaturesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransformationOutput();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feast.serving.ValueType.serializeBinaryToWriter
    );
  }
};


/**
 * optional ValueType transformation_output = 3;
 * @return {?proto.feast.serving.ValueType}
 */
proto.feast.serving.TransformFeaturesResponse.prototype.getTransformationOutput = function() {
  return /** @type{?proto.feast.serving.ValueType} */ (
    jspb.Message.getWrapperField(this, proto.feast.serving.ValueType, 3));
};


/**
 * @param {?proto.feast.serving.ValueType|undefined} value
 * @return {!proto.feast.serving.TransformFeaturesResponse} returns this
*/
proto.feast.serving.TransformFeaturesResponse.prototype.setTransformationOutput = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.serving.TransformFeaturesResponse} returns this
 */
proto.feast.serving.TransformFeaturesResponse.prototype.clearTransformationOutput = function() {
  return this.setTransformationOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.serving.TransformFeaturesResponse.prototype.hasTransformationOutput = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.feast.serving.TransformationServiceType = {
  TRANSFORMATION_SERVICE_TYPE_INVALID: 0,
  TRANSFORMATION_SERVICE_TYPE_PYTHON: 1,
  TRANSFORMATION_SERVICE_TYPE_CUSTOM: 100
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.storage.RedisKeyV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.storage.RedisKeyV2.repeatedFields_, null);
};
goog.inherits(proto.feast.storage.RedisKeyV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.storage.RedisKeyV2.displayName = 'proto.feast.storage.RedisKeyV2';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.storage.RedisKeyV2.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.storage.RedisKeyV2.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.storage.RedisKeyV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.storage.RedisKeyV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.storage.RedisKeyV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    entityNamesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    entityValuesList: jspb.Message.toObjectList(msg.getEntityValuesList(),
    proto.feast.types.Value.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.storage.RedisKeyV2}
 */
proto.feast.storage.RedisKeyV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.storage.RedisKeyV2;
  return proto.feast.storage.RedisKeyV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.storage.RedisKeyV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.storage.RedisKeyV2}
 */
proto.feast.storage.RedisKeyV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addEntityNames(value);
      break;
    case 3:
      var value = new proto.feast.types.Value;
      reader.readMessage(value,proto.feast.types.Value.deserializeBinaryFromReader);
      msg.addEntityValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.storage.RedisKeyV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.storage.RedisKeyV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.storage.RedisKeyV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.storage.RedisKeyV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEntityNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getEntityValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.feast.types.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.feast.storage.RedisKeyV2.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.storage.RedisKeyV2} returns this
 */
proto.feast.storage.RedisKeyV2.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string entity_names = 2;
 * @return {!Array<string>}
 */
proto.feast.storage.RedisKeyV2.prototype.getEntityNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.feast.storage.RedisKeyV2} returns this
 */
proto.feast.storage.RedisKeyV2.prototype.setEntityNamesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.feast.storage.RedisKeyV2} returns this
 */
proto.feast.storage.RedisKeyV2.prototype.addEntityNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.storage.RedisKeyV2} returns this
 */
proto.feast.storage.RedisKeyV2.prototype.clearEntityNamesList = function() {
  return this.setEntityNamesList([]);
};


/**
 * repeated feast.types.Value entity_values = 3;
 * @return {!Array<!proto.feast.types.Value>}
 */
proto.feast.storage.RedisKeyV2.prototype.getEntityValuesList = function() {
  return /** @type{!Array<!proto.feast.types.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.types.Value, 3));
};


/**
 * @param {!Array<!proto.feast.types.Value>} value
 * @return {!proto.feast.storage.RedisKeyV2} returns this
*/
proto.feast.storage.RedisKeyV2.prototype.setEntityValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.feast.types.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.types.Value}
 */
proto.feast.storage.RedisKeyV2.prototype.addEntityValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.feast.types.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.storage.RedisKeyV2} returns this
 */
proto.feast.storage.RedisKeyV2.prototype.clearEntityValuesList = function() {
  return this.setEntityValuesList([]);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.health.v1.HealthCheckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.health.v1.HealthCheckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.health.v1.HealthCheckRequest.displayName = 'proto.grpc.health.v1.HealthCheckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.health.v1.HealthCheckResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.health.v1.HealthCheckResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.health.v1.HealthCheckResponse.displayName = 'proto.grpc.health.v1.HealthCheckResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.health.v1.HealthCheckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.health.v1.HealthCheckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.health.v1.HealthCheckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.health.v1.HealthCheckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    service: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.health.v1.HealthCheckRequest}
 */
proto.grpc.health.v1.HealthCheckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.health.v1.HealthCheckRequest;
  return proto.grpc.health.v1.HealthCheckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.health.v1.HealthCheckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.health.v1.HealthCheckRequest}
 */
proto.grpc.health.v1.HealthCheckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.health.v1.HealthCheckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.health.v1.HealthCheckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.health.v1.HealthCheckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.health.v1.HealthCheckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getService();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string service = 1;
 * @return {string}
 */
proto.grpc.health.v1.HealthCheckRequest.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.health.v1.HealthCheckRequest} returns this
 */
proto.grpc.health.v1.HealthCheckRequest.prototype.setService = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.health.v1.HealthCheckResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.health.v1.HealthCheckResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.health.v1.HealthCheckResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.health.v1.HealthCheckResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.health.v1.HealthCheckResponse}
 */
proto.grpc.health.v1.HealthCheckResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.health.v1.HealthCheckResponse;
  return proto.grpc.health.v1.HealthCheckResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.health.v1.HealthCheckResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.health.v1.HealthCheckResponse}
 */
proto.grpc.health.v1.HealthCheckResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.grpc.health.v1.ServingStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.health.v1.HealthCheckResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.health.v1.HealthCheckResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.health.v1.HealthCheckResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.health.v1.HealthCheckResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ServingStatus status = 1;
 * @return {!proto.grpc.health.v1.ServingStatus}
 */
proto.grpc.health.v1.HealthCheckResponse.prototype.getStatus = function() {
  return /** @type {!proto.grpc.health.v1.ServingStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.grpc.health.v1.ServingStatus} value
 * @return {!proto.grpc.health.v1.HealthCheckResponse} returns this
 */
proto.grpc.health.v1.HealthCheckResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.grpc.health.v1.ServingStatus = {
  UNKNOWN: 0,
  SERVING: 1,
  NOT_SERVING: 2
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.Field = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.types.Field, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.Field.displayName = 'proto.feast.types.Field';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.Field.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.Field.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.Field} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Field.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    description: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.Field}
 */
proto.feast.types.Field.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.Field;
  return proto.feast.types.Field.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.Field} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.Field}
 */
proto.feast.types.Field.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.feast.types.ValueType.Enum} */ (reader.readEnum());
      msg.setValue(value);
      break;
    case 3:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.Field.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.Field.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.Field} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Field.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.types.Field.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.types.Field} returns this
 */
proto.feast.types.Field.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ValueType.Enum value = 2;
 * @return {!proto.feast.types.ValueType.Enum}
 */
proto.feast.types.Field.prototype.getValue = function() {
  return /** @type {!proto.feast.types.ValueType.Enum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.feast.types.ValueType.Enum} value
 * @return {!proto.feast.types.Field} returns this
 */
proto.feast.types.Field.prototype.setValue = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * map<string, string> tags = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.types.Field.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.types.Field} returns this
 */
proto.feast.types.Field.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.feast.types.Field.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.types.Field} returns this
 */
proto.feast.types.Field.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


