// source: feast/core/OnDemandFeatureView.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var feast_core_FeatureView_pb = require('../../feast/core/FeatureView_pb.js');
goog.object.extend(proto, feast_core_FeatureView_pb);
var feast_core_FeatureViewProjection_pb = require('../../feast/core/FeatureViewProjection_pb.js');
goog.object.extend(proto, feast_core_FeatureViewProjection_pb);
var feast_core_Feature_pb = require('../../feast/core/Feature_pb.js');
goog.object.extend(proto, feast_core_Feature_pb);
var feast_core_DataSource_pb = require('../../feast/core/DataSource_pb.js');
goog.object.extend(proto, feast_core_DataSource_pb);
var feast_core_Transformation_pb = require('../../feast/core/Transformation_pb.js');
goog.object.extend(proto, feast_core_Transformation_pb);
goog.exportSymbol('proto.feast.core.OnDemandFeatureView', null, global);
goog.exportSymbol('proto.feast.core.OnDemandFeatureViewMeta', null, global);
goog.exportSymbol('proto.feast.core.OnDemandFeatureViewSpec', null, global);
goog.exportSymbol('proto.feast.core.OnDemandSource', null, global);
goog.exportSymbol('proto.feast.core.OnDemandSource.SourceCase', null, global);
goog.exportSymbol('proto.feast.core.UserDefinedFunction', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.OnDemandFeatureView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.OnDemandFeatureView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.OnDemandFeatureView.displayName = 'proto.feast.core.OnDemandFeatureView';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.OnDemandFeatureViewSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.OnDemandFeatureViewSpec.repeatedFields_, null);
};
goog.inherits(proto.feast.core.OnDemandFeatureViewSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.OnDemandFeatureViewSpec.displayName = 'proto.feast.core.OnDemandFeatureViewSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.OnDemandFeatureViewMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.OnDemandFeatureViewMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.OnDemandFeatureViewMeta.displayName = 'proto.feast.core.OnDemandFeatureViewMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.OnDemandSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.OnDemandSource.oneofGroups_);
};
goog.inherits(proto.feast.core.OnDemandSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.OnDemandSource.displayName = 'proto.feast.core.OnDemandSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.UserDefinedFunction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.UserDefinedFunction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.UserDefinedFunction.displayName = 'proto.feast.core.UserDefinedFunction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.OnDemandFeatureView.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.OnDemandFeatureView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.OnDemandFeatureView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandFeatureView.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.feast.core.OnDemandFeatureViewSpec.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.feast.core.OnDemandFeatureViewMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.OnDemandFeatureView}
 */
proto.feast.core.OnDemandFeatureView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.OnDemandFeatureView;
  return proto.feast.core.OnDemandFeatureView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.OnDemandFeatureView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.OnDemandFeatureView}
 */
proto.feast.core.OnDemandFeatureView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.OnDemandFeatureViewSpec;
      reader.readMessage(value,proto.feast.core.OnDemandFeatureViewSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.feast.core.OnDemandFeatureViewMeta;
      reader.readMessage(value,proto.feast.core.OnDemandFeatureViewMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.OnDemandFeatureView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.OnDemandFeatureView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.OnDemandFeatureView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandFeatureView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.OnDemandFeatureViewSpec.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.OnDemandFeatureViewMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional OnDemandFeatureViewSpec spec = 1;
 * @return {?proto.feast.core.OnDemandFeatureViewSpec}
 */
proto.feast.core.OnDemandFeatureView.prototype.getSpec = function() {
  return /** @type{?proto.feast.core.OnDemandFeatureViewSpec} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.OnDemandFeatureViewSpec, 1));
};


/**
 * @param {?proto.feast.core.OnDemandFeatureViewSpec|undefined} value
 * @return {!proto.feast.core.OnDemandFeatureView} returns this
*/
proto.feast.core.OnDemandFeatureView.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandFeatureView} returns this
 */
proto.feast.core.OnDemandFeatureView.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandFeatureView.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OnDemandFeatureViewMeta meta = 2;
 * @return {?proto.feast.core.OnDemandFeatureViewMeta}
 */
proto.feast.core.OnDemandFeatureView.prototype.getMeta = function() {
  return /** @type{?proto.feast.core.OnDemandFeatureViewMeta} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.OnDemandFeatureViewMeta, 2));
};


/**
 * @param {?proto.feast.core.OnDemandFeatureViewMeta|undefined} value
 * @return {!proto.feast.core.OnDemandFeatureView} returns this
*/
proto.feast.core.OnDemandFeatureView.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandFeatureView} returns this
 */
proto.feast.core.OnDemandFeatureView.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandFeatureView.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.OnDemandFeatureViewSpec.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.OnDemandFeatureViewSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.OnDemandFeatureViewSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandFeatureViewSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    feast_core_Feature_pb.FeatureSpecV2.toObject, includeInstance),
    sourcesMap: (f = msg.getSourcesMap()) ? f.toObject(includeInstance, proto.feast.core.OnDemandSource.toObject) : [],
    userDefinedFunction: (f = msg.getUserDefinedFunction()) && proto.feast.core.UserDefinedFunction.toObject(includeInstance, f),
    featureTransformation: (f = msg.getFeatureTransformation()) && feast_core_Transformation_pb.FeatureTransformationV2.toObject(includeInstance, f),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    owner: jspb.Message.getFieldWithDefault(msg, 8, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec}
 */
proto.feast.core.OnDemandFeatureViewSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.OnDemandFeatureViewSpec;
  return proto.feast.core.OnDemandFeatureViewSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.OnDemandFeatureViewSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec}
 */
proto.feast.core.OnDemandFeatureViewSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = new feast_core_Feature_pb.FeatureSpecV2;
      reader.readMessage(value,feast_core_Feature_pb.FeatureSpecV2.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 4:
      var value = msg.getSourcesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.feast.core.OnDemandSource.deserializeBinaryFromReader, "", new proto.feast.core.OnDemandSource());
         });
      break;
    case 5:
      var value = new proto.feast.core.UserDefinedFunction;
      reader.readMessage(value,proto.feast.core.UserDefinedFunction.deserializeBinaryFromReader);
      msg.setUserDefinedFunction(value);
      break;
    case 10:
      var value = new feast_core_Transformation_pb.FeatureTransformationV2;
      reader.readMessage(value,feast_core_Transformation_pb.FeatureTransformationV2.deserializeBinaryFromReader);
      msg.setFeatureTransformation(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.OnDemandFeatureViewSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.OnDemandFeatureViewSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandFeatureViewSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      feast_core_Feature_pb.FeatureSpecV2.serializeBinaryToWriter
    );
  }
  f = message.getSourcesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.feast.core.OnDemandSource.serializeBinaryToWriter);
  }
  f = message.getUserDefinedFunction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.feast.core.UserDefinedFunction.serializeBinaryToWriter
    );
  }
  f = message.getFeatureTransformation();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      feast_core_Transformation_pb.FeatureTransformationV2.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMode();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated FeatureSpecV2 features = 3;
 * @return {!Array<!proto.feast.core.FeatureSpecV2>}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureSpecV2>} */ (
    jspb.Message.getRepeatedWrapperField(this, feast_core_Feature_pb.FeatureSpecV2, 3));
};


/**
 * @param {!Array<!proto.feast.core.FeatureSpecV2>} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
*/
proto.feast.core.OnDemandFeatureViewSpec.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.feast.core.FeatureSpecV2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureSpecV2}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.feast.core.FeatureSpecV2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * map<string, OnDemandSource> sources = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.feast.core.OnDemandSource>}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getSourcesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.feast.core.OnDemandSource>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.feast.core.OnDemandSource));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.clearSourcesMap = function() {
  this.getSourcesMap().clear();
  return this;
};


/**
 * optional UserDefinedFunction user_defined_function = 5;
 * @return {?proto.feast.core.UserDefinedFunction}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getUserDefinedFunction = function() {
  return /** @type{?proto.feast.core.UserDefinedFunction} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.UserDefinedFunction, 5));
};


/**
 * @param {?proto.feast.core.UserDefinedFunction|undefined} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
*/
proto.feast.core.OnDemandFeatureViewSpec.prototype.setUserDefinedFunction = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.clearUserDefinedFunction = function() {
  return this.setUserDefinedFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.hasUserDefinedFunction = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FeatureTransformationV2 feature_transformation = 10;
 * @return {?proto.feast.core.FeatureTransformationV2}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getFeatureTransformation = function() {
  return /** @type{?proto.feast.core.FeatureTransformationV2} */ (
    jspb.Message.getWrapperField(this, feast_core_Transformation_pb.FeatureTransformationV2, 10));
};


/**
 * @param {?proto.feast.core.FeatureTransformationV2|undefined} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
*/
proto.feast.core.OnDemandFeatureViewSpec.prototype.setFeatureTransformation = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.clearFeatureTransformation = function() {
  return this.setFeatureTransformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.hasFeatureTransformation = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * map<string, string> tags = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};


/**
 * optional string owner = 8;
 * @return {string}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string mode = 11;
 * @return {string}
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.getMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.OnDemandFeatureViewSpec} returns this
 */
proto.feast.core.OnDemandFeatureViewSpec.prototype.setMode = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.OnDemandFeatureViewMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.OnDemandFeatureViewMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandFeatureViewMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdTimestamp: (f = msg.getCreatedTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lastUpdatedTimestamp: (f = msg.getLastUpdatedTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.OnDemandFeatureViewMeta}
 */
proto.feast.core.OnDemandFeatureViewMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.OnDemandFeatureViewMeta;
  return proto.feast.core.OnDemandFeatureViewMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.OnDemandFeatureViewMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.OnDemandFeatureViewMeta}
 */
proto.feast.core.OnDemandFeatureViewMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedTimestamp(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdatedTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.OnDemandFeatureViewMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.OnDemandFeatureViewMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandFeatureViewMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp created_timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.getCreatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.OnDemandFeatureViewMeta} returns this
*/
proto.feast.core.OnDemandFeatureViewMeta.prototype.setCreatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandFeatureViewMeta} returns this
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.clearCreatedTimestamp = function() {
  return this.setCreatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.hasCreatedTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp last_updated_timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.getLastUpdatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.OnDemandFeatureViewMeta} returns this
*/
proto.feast.core.OnDemandFeatureViewMeta.prototype.setLastUpdatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandFeatureViewMeta} returns this
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.clearLastUpdatedTimestamp = function() {
  return this.setLastUpdatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandFeatureViewMeta.prototype.hasLastUpdatedTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.OnDemandSource.oneofGroups_ = [[1,3,2]];

/**
 * @enum {number}
 */
proto.feast.core.OnDemandSource.SourceCase = {
  SOURCE_NOT_SET: 0,
  FEATURE_VIEW: 1,
  FEATURE_VIEW_PROJECTION: 3,
  REQUEST_DATA_SOURCE: 2
};

/**
 * @return {proto.feast.core.OnDemandSource.SourceCase}
 */
proto.feast.core.OnDemandSource.prototype.getSourceCase = function() {
  return /** @type {proto.feast.core.OnDemandSource.SourceCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.OnDemandSource.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.OnDemandSource.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.OnDemandSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.OnDemandSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureView: (f = msg.getFeatureView()) && feast_core_FeatureView_pb.FeatureView.toObject(includeInstance, f),
    featureViewProjection: (f = msg.getFeatureViewProjection()) && feast_core_FeatureViewProjection_pb.FeatureViewProjection.toObject(includeInstance, f),
    requestDataSource: (f = msg.getRequestDataSource()) && feast_core_DataSource_pb.DataSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.OnDemandSource}
 */
proto.feast.core.OnDemandSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.OnDemandSource;
  return proto.feast.core.OnDemandSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.OnDemandSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.OnDemandSource}
 */
proto.feast.core.OnDemandSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new feast_core_FeatureView_pb.FeatureView;
      reader.readMessage(value,feast_core_FeatureView_pb.FeatureView.deserializeBinaryFromReader);
      msg.setFeatureView(value);
      break;
    case 3:
      var value = new feast_core_FeatureViewProjection_pb.FeatureViewProjection;
      reader.readMessage(value,feast_core_FeatureViewProjection_pb.FeatureViewProjection.deserializeBinaryFromReader);
      msg.setFeatureViewProjection(value);
      break;
    case 2:
      var value = new feast_core_DataSource_pb.DataSource;
      reader.readMessage(value,feast_core_DataSource_pb.DataSource.deserializeBinaryFromReader);
      msg.setRequestDataSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.OnDemandSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.OnDemandSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.OnDemandSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.OnDemandSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureView();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      feast_core_FeatureView_pb.FeatureView.serializeBinaryToWriter
    );
  }
  f = message.getFeatureViewProjection();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      feast_core_FeatureViewProjection_pb.FeatureViewProjection.serializeBinaryToWriter
    );
  }
  f = message.getRequestDataSource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      feast_core_DataSource_pb.DataSource.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeatureView feature_view = 1;
 * @return {?proto.feast.core.FeatureView}
 */
proto.feast.core.OnDemandSource.prototype.getFeatureView = function() {
  return /** @type{?proto.feast.core.FeatureView} */ (
    jspb.Message.getWrapperField(this, feast_core_FeatureView_pb.FeatureView, 1));
};


/**
 * @param {?proto.feast.core.FeatureView|undefined} value
 * @return {!proto.feast.core.OnDemandSource} returns this
*/
proto.feast.core.OnDemandSource.prototype.setFeatureView = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.feast.core.OnDemandSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandSource} returns this
 */
proto.feast.core.OnDemandSource.prototype.clearFeatureView = function() {
  return this.setFeatureView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandSource.prototype.hasFeatureView = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FeatureViewProjection feature_view_projection = 3;
 * @return {?proto.feast.core.FeatureViewProjection}
 */
proto.feast.core.OnDemandSource.prototype.getFeatureViewProjection = function() {
  return /** @type{?proto.feast.core.FeatureViewProjection} */ (
    jspb.Message.getWrapperField(this, feast_core_FeatureViewProjection_pb.FeatureViewProjection, 3));
};


/**
 * @param {?proto.feast.core.FeatureViewProjection|undefined} value
 * @return {!proto.feast.core.OnDemandSource} returns this
*/
proto.feast.core.OnDemandSource.prototype.setFeatureViewProjection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.feast.core.OnDemandSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandSource} returns this
 */
proto.feast.core.OnDemandSource.prototype.clearFeatureViewProjection = function() {
  return this.setFeatureViewProjection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandSource.prototype.hasFeatureViewProjection = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataSource request_data_source = 2;
 * @return {?proto.feast.core.DataSource}
 */
proto.feast.core.OnDemandSource.prototype.getRequestDataSource = function() {
  return /** @type{?proto.feast.core.DataSource} */ (
    jspb.Message.getWrapperField(this, feast_core_DataSource_pb.DataSource, 2));
};


/**
 * @param {?proto.feast.core.DataSource|undefined} value
 * @return {!proto.feast.core.OnDemandSource} returns this
*/
proto.feast.core.OnDemandSource.prototype.setRequestDataSource = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.feast.core.OnDemandSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.OnDemandSource} returns this
 */
proto.feast.core.OnDemandSource.prototype.clearRequestDataSource = function() {
  return this.setRequestDataSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.OnDemandSource.prototype.hasRequestDataSource = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.UserDefinedFunction.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.UserDefinedFunction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.UserDefinedFunction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.UserDefinedFunction.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: msg.getBody_asB64(),
    bodyText: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.UserDefinedFunction}
 */
proto.feast.core.UserDefinedFunction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.UserDefinedFunction;
  return proto.feast.core.UserDefinedFunction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.UserDefinedFunction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.UserDefinedFunction}
 */
proto.feast.core.UserDefinedFunction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBodyText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.UserDefinedFunction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.UserDefinedFunction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.UserDefinedFunction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.UserDefinedFunction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBodyText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.UserDefinedFunction.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.UserDefinedFunction} returns this
 */
proto.feast.core.UserDefinedFunction.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {string}
 */
proto.feast.core.UserDefinedFunction.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.feast.core.UserDefinedFunction.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.feast.core.UserDefinedFunction.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.core.UserDefinedFunction} returns this
 */
proto.feast.core.UserDefinedFunction.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string body_text = 3;
 * @return {string}
 */
proto.feast.core.UserDefinedFunction.prototype.getBodyText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.UserDefinedFunction} returns this
 */
proto.feast.core.UserDefinedFunction.prototype.setBodyText = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.feast.core);
