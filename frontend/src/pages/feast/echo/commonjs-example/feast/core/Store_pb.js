// source: feast/core/Store.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.feast.core.Store', null, global);
goog.exportSymbol('proto.feast.core.Store.ConfigCase', null, global);
goog.exportSymbol('proto.feast.core.Store.RedisClusterConfig', null, global);
goog.exportSymbol('proto.feast.core.Store.RedisClusterConfig.ReadFrom', null, global);
goog.exportSymbol('proto.feast.core.Store.RedisConfig', null, global);
goog.exportSymbol('proto.feast.core.Store.StoreType', null, global);
goog.exportSymbol('proto.feast.core.Store.Subscription', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.Store = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.Store.repeatedFields_, proto.feast.core.Store.oneofGroups_);
};
goog.inherits(proto.feast.core.Store, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.Store.displayName = 'proto.feast.core.Store';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.Store.RedisConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.Store.RedisConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.Store.RedisConfig.displayName = 'proto.feast.core.Store.RedisConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.Store.RedisClusterConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.Store.RedisClusterConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.Store.RedisClusterConfig.displayName = 'proto.feast.core.Store.RedisClusterConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.Store.Subscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.Store.Subscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.Store.Subscription.displayName = 'proto.feast.core.Store.Subscription';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.Store.repeatedFields_ = [4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.Store.oneofGroups_ = [[11,14]];

/**
 * @enum {number}
 */
proto.feast.core.Store.ConfigCase = {
  CONFIG_NOT_SET: 0,
  REDIS_CONFIG: 11,
  REDIS_CLUSTER_CONFIG: 14
};

/**
 * @return {proto.feast.core.Store.ConfigCase}
 */
proto.feast.core.Store.prototype.getConfigCase = function() {
  return /** @type {proto.feast.core.Store.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.Store.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.Store.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.Store.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.Store} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    subscriptionsList: jspb.Message.toObjectList(msg.getSubscriptionsList(),
    proto.feast.core.Store.Subscription.toObject, includeInstance),
    redisConfig: (f = msg.getRedisConfig()) && proto.feast.core.Store.RedisConfig.toObject(includeInstance, f),
    redisClusterConfig: (f = msg.getRedisClusterConfig()) && proto.feast.core.Store.RedisClusterConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.Store}
 */
proto.feast.core.Store.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.Store;
  return proto.feast.core.Store.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.Store} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.Store}
 */
proto.feast.core.Store.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.feast.core.Store.StoreType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.feast.core.Store.Subscription;
      reader.readMessage(value,proto.feast.core.Store.Subscription.deserializeBinaryFromReader);
      msg.addSubscriptions(value);
      break;
    case 11:
      var value = new proto.feast.core.Store.RedisConfig;
      reader.readMessage(value,proto.feast.core.Store.RedisConfig.deserializeBinaryFromReader);
      msg.setRedisConfig(value);
      break;
    case 14:
      var value = new proto.feast.core.Store.RedisClusterConfig;
      reader.readMessage(value,proto.feast.core.Store.RedisClusterConfig.deserializeBinaryFromReader);
      msg.setRedisClusterConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.Store.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.Store.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.Store} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSubscriptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.feast.core.Store.Subscription.serializeBinaryToWriter
    );
  }
  f = message.getRedisConfig();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.feast.core.Store.RedisConfig.serializeBinaryToWriter
    );
  }
  f = message.getRedisClusterConfig();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.feast.core.Store.RedisClusterConfig.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.feast.core.Store.StoreType = {
  INVALID: 0,
  REDIS: 1,
  REDIS_CLUSTER: 4
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.Store.RedisConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.Store.RedisConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.Store.RedisConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.RedisConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    initialBackoffMs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxRetries: jspb.Message.getFieldWithDefault(msg, 4, 0),
    flushFrequencySeconds: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ssl: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.Store.RedisConfig}
 */
proto.feast.core.Store.RedisConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.Store.RedisConfig;
  return proto.feast.core.Store.RedisConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.Store.RedisConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.Store.RedisConfig}
 */
proto.feast.core.Store.RedisConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInitialBackoffMs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxRetries(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlushFrequencySeconds(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSsl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.Store.RedisConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.Store.RedisConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.Store.RedisConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.RedisConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getInitialBackoffMs();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMaxRetries();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFlushFrequencySeconds();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSsl();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.feast.core.Store.RedisConfig.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store.RedisConfig} returns this
 */
proto.feast.core.Store.RedisConfig.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.feast.core.Store.RedisConfig.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisConfig} returns this
 */
proto.feast.core.Store.RedisConfig.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 initial_backoff_ms = 3;
 * @return {number}
 */
proto.feast.core.Store.RedisConfig.prototype.getInitialBackoffMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisConfig} returns this
 */
proto.feast.core.Store.RedisConfig.prototype.setInitialBackoffMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 max_retries = 4;
 * @return {number}
 */
proto.feast.core.Store.RedisConfig.prototype.getMaxRetries = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisConfig} returns this
 */
proto.feast.core.Store.RedisConfig.prototype.setMaxRetries = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 flush_frequency_seconds = 5;
 * @return {number}
 */
proto.feast.core.Store.RedisConfig.prototype.getFlushFrequencySeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisConfig} returns this
 */
proto.feast.core.Store.RedisConfig.prototype.setFlushFrequencySeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool ssl = 6;
 * @return {boolean}
 */
proto.feast.core.Store.RedisConfig.prototype.getSsl = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.core.Store.RedisConfig} returns this
 */
proto.feast.core.Store.RedisConfig.prototype.setSsl = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.Store.RedisClusterConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.Store.RedisClusterConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.RedisClusterConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionString: jspb.Message.getFieldWithDefault(msg, 1, ""),
    initialBackoffMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxRetries: jspb.Message.getFieldWithDefault(msg, 3, 0),
    flushFrequencySeconds: jspb.Message.getFieldWithDefault(msg, 4, 0),
    keyPrefix: jspb.Message.getFieldWithDefault(msg, 5, ""),
    enableFallback: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    fallbackPrefix: jspb.Message.getFieldWithDefault(msg, 7, ""),
    readFrom: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.Store.RedisClusterConfig}
 */
proto.feast.core.Store.RedisClusterConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.Store.RedisClusterConfig;
  return proto.feast.core.Store.RedisClusterConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.Store.RedisClusterConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.Store.RedisClusterConfig}
 */
proto.feast.core.Store.RedisClusterConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionString(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInitialBackoffMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxRetries(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlushFrequencySeconds(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyPrefix(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableFallback(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFallbackPrefix(value);
      break;
    case 8:
      var value = /** @type {!proto.feast.core.Store.RedisClusterConfig.ReadFrom} */ (reader.readEnum());
      msg.setReadFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.Store.RedisClusterConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.Store.RedisClusterConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.RedisClusterConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionString();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInitialBackoffMs();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMaxRetries();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFlushFrequencySeconds();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getKeyPrefix();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEnableFallback();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getFallbackPrefix();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getReadFrom();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.feast.core.Store.RedisClusterConfig.ReadFrom = {
  MASTER: 0,
  MASTER_PREFERRED: 1,
  REPLICA: 2,
  REPLICA_PREFERRED: 3
};

/**
 * optional string connection_string = 1;
 * @return {string}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getConnectionString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setConnectionString = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 initial_backoff_ms = 2;
 * @return {number}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getInitialBackoffMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setInitialBackoffMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 max_retries = 3;
 * @return {number}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getMaxRetries = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setMaxRetries = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 flush_frequency_seconds = 4;
 * @return {number}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getFlushFrequencySeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setFlushFrequencySeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string key_prefix = 5;
 * @return {string}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getKeyPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setKeyPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool enable_fallback = 6;
 * @return {boolean}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getEnableFallback = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setEnableFallback = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string fallback_prefix = 7;
 * @return {string}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getFallbackPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setFallbackPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional ReadFrom read_from = 8;
 * @return {!proto.feast.core.Store.RedisClusterConfig.ReadFrom}
 */
proto.feast.core.Store.RedisClusterConfig.prototype.getReadFrom = function() {
  return /** @type {!proto.feast.core.Store.RedisClusterConfig.ReadFrom} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.feast.core.Store.RedisClusterConfig.ReadFrom} value
 * @return {!proto.feast.core.Store.RedisClusterConfig} returns this
 */
proto.feast.core.Store.RedisClusterConfig.prototype.setReadFrom = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.Store.Subscription.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.Store.Subscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.Store.Subscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.Subscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    exclude: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.Store.Subscription}
 */
proto.feast.core.Store.Subscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.Store.Subscription;
  return proto.feast.core.Store.Subscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.Store.Subscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.Store.Subscription}
 */
proto.feast.core.Store.Subscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExclude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.Store.Subscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.Store.Subscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.Store.Subscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.Store.Subscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExclude();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string project = 3;
 * @return {string}
 */
proto.feast.core.Store.Subscription.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store.Subscription} returns this
 */
proto.feast.core.Store.Subscription.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.Store.Subscription.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store.Subscription} returns this
 */
proto.feast.core.Store.Subscription.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool exclude = 4;
 * @return {boolean}
 */
proto.feast.core.Store.Subscription.prototype.getExclude = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.core.Store.Subscription} returns this
 */
proto.feast.core.Store.Subscription.prototype.setExclude = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.Store.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.Store} returns this
 */
proto.feast.core.Store.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StoreType type = 2;
 * @return {!proto.feast.core.Store.StoreType}
 */
proto.feast.core.Store.prototype.getType = function() {
  return /** @type {!proto.feast.core.Store.StoreType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.feast.core.Store.StoreType} value
 * @return {!proto.feast.core.Store} returns this
 */
proto.feast.core.Store.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated Subscription subscriptions = 4;
 * @return {!Array<!proto.feast.core.Store.Subscription>}
 */
proto.feast.core.Store.prototype.getSubscriptionsList = function() {
  return /** @type{!Array<!proto.feast.core.Store.Subscription>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.core.Store.Subscription, 4));
};


/**
 * @param {!Array<!proto.feast.core.Store.Subscription>} value
 * @return {!proto.feast.core.Store} returns this
*/
proto.feast.core.Store.prototype.setSubscriptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.feast.core.Store.Subscription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.Store.Subscription}
 */
proto.feast.core.Store.prototype.addSubscriptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.feast.core.Store.Subscription, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.Store} returns this
 */
proto.feast.core.Store.prototype.clearSubscriptionsList = function() {
  return this.setSubscriptionsList([]);
};


/**
 * optional RedisConfig redis_config = 11;
 * @return {?proto.feast.core.Store.RedisConfig}
 */
proto.feast.core.Store.prototype.getRedisConfig = function() {
  return /** @type{?proto.feast.core.Store.RedisConfig} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.Store.RedisConfig, 11));
};


/**
 * @param {?proto.feast.core.Store.RedisConfig|undefined} value
 * @return {!proto.feast.core.Store} returns this
*/
proto.feast.core.Store.prototype.setRedisConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.feast.core.Store.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.Store} returns this
 */
proto.feast.core.Store.prototype.clearRedisConfig = function() {
  return this.setRedisConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.Store.prototype.hasRedisConfig = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RedisClusterConfig redis_cluster_config = 14;
 * @return {?proto.feast.core.Store.RedisClusterConfig}
 */
proto.feast.core.Store.prototype.getRedisClusterConfig = function() {
  return /** @type{?proto.feast.core.Store.RedisClusterConfig} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.Store.RedisClusterConfig, 14));
};


/**
 * @param {?proto.feast.core.Store.RedisClusterConfig|undefined} value
 * @return {!proto.feast.core.Store} returns this
*/
proto.feast.core.Store.prototype.setRedisClusterConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.feast.core.Store.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.Store} returns this
 */
proto.feast.core.Store.prototype.clearRedisClusterConfig = function() {
  return this.setRedisClusterConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.Store.prototype.hasRedisClusterConfig = function() {
  return jspb.Message.getField(this, 14) != null;
};


goog.object.extend(exports, proto.feast.core);
