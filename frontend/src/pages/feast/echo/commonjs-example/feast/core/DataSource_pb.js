// source: feast/core/DataSource.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var feast_core_DataFormat_pb = require('../../feast/core/DataFormat_pb.js');
goog.object.extend(proto, feast_core_DataFormat_pb);
var feast_types_Value_pb = require('../../feast/types/Value_pb.js');
goog.object.extend(proto, feast_types_Value_pb);
var feast_core_Feature_pb = require('../../feast/core/Feature_pb.js');
goog.object.extend(proto, feast_core_Feature_pb);
goog.exportSymbol('proto.feast.core.DataSource', null, global);
goog.exportSymbol('proto.feast.core.DataSource.AthenaOptions', null, global);
goog.exportSymbol('proto.feast.core.DataSource.BigQueryOptions', null, global);
goog.exportSymbol('proto.feast.core.DataSource.CustomSourceOptions', null, global);
goog.exportSymbol('proto.feast.core.DataSource.FileOptions', null, global);
goog.exportSymbol('proto.feast.core.DataSource.KafkaOptions', null, global);
goog.exportSymbol('proto.feast.core.DataSource.KinesisOptions', null, global);
goog.exportSymbol('proto.feast.core.DataSource.OptionsCase', null, global);
goog.exportSymbol('proto.feast.core.DataSource.PushOptions', null, global);
goog.exportSymbol('proto.feast.core.DataSource.RedshiftOptions', null, global);
goog.exportSymbol('proto.feast.core.DataSource.RequestDataOptions', null, global);
goog.exportSymbol('proto.feast.core.DataSource.SnowflakeOptions', null, global);
goog.exportSymbol('proto.feast.core.DataSource.SourceMeta', null, global);
goog.exportSymbol('proto.feast.core.DataSource.SourceType', null, global);
goog.exportSymbol('proto.feast.core.DataSource.SparkOptions', null, global);
goog.exportSymbol('proto.feast.core.DataSource.TrinoOptions', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.DataSource.oneofGroups_);
};
goog.inherits(proto.feast.core.DataSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.displayName = 'proto.feast.core.DataSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.SourceMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.SourceMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.SourceMeta.displayName = 'proto.feast.core.DataSource.SourceMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.FileOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.FileOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.FileOptions.displayName = 'proto.feast.core.DataSource.FileOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.BigQueryOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.BigQueryOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.BigQueryOptions.displayName = 'proto.feast.core.DataSource.BigQueryOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.TrinoOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.TrinoOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.TrinoOptions.displayName = 'proto.feast.core.DataSource.TrinoOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.KafkaOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.KafkaOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.KafkaOptions.displayName = 'proto.feast.core.DataSource.KafkaOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.KinesisOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.KinesisOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.KinesisOptions.displayName = 'proto.feast.core.DataSource.KinesisOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.RedshiftOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.RedshiftOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.RedshiftOptions.displayName = 'proto.feast.core.DataSource.RedshiftOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.AthenaOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.AthenaOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.AthenaOptions.displayName = 'proto.feast.core.DataSource.AthenaOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.SnowflakeOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.SnowflakeOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.SnowflakeOptions.displayName = 'proto.feast.core.DataSource.SnowflakeOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.SparkOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.SparkOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.SparkOptions.displayName = 'proto.feast.core.DataSource.SparkOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.CustomSourceOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.CustomSourceOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.CustomSourceOptions.displayName = 'proto.feast.core.DataSource.CustomSourceOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.RequestDataOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.DataSource.RequestDataOptions.repeatedFields_, null);
};
goog.inherits(proto.feast.core.DataSource.RequestDataOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.RequestDataOptions.displayName = 'proto.feast.core.DataSource.RequestDataOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.DataSource.PushOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.DataSource.PushOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.DataSource.PushOptions.displayName = 'proto.feast.core.DataSource.PushOptions';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.DataSource.oneofGroups_ = [[11,12,13,14,15,18,16,19,22,27,30,35]];

/**
 * @enum {number}
 */
proto.feast.core.DataSource.OptionsCase = {
  OPTIONS_NOT_SET: 0,
  FILE_OPTIONS: 11,
  BIGQUERY_OPTIONS: 12,
  KAFKA_OPTIONS: 13,
  KINESIS_OPTIONS: 14,
  REDSHIFT_OPTIONS: 15,
  REQUEST_DATA_OPTIONS: 18,
  CUSTOM_OPTIONS: 16,
  SNOWFLAKE_OPTIONS: 19,
  PUSH_OPTIONS: 22,
  SPARK_OPTIONS: 27,
  TRINO_OPTIONS: 30,
  ATHENA_OPTIONS: 35
};

/**
 * @return {proto.feast.core.DataSource.OptionsCase}
 */
proto.feast.core.DataSource.prototype.getOptionsCase = function() {
  return /** @type {proto.feast.core.DataSource.OptionsCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.DataSource.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 20, ""),
    project: jspb.Message.getFieldWithDefault(msg, 21, ""),
    description: jspb.Message.getFieldWithDefault(msg, 23, ""),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    owner: jspb.Message.getFieldWithDefault(msg, 25, ""),
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fieldMappingMap: (f = msg.getFieldMappingMap()) ? f.toObject(includeInstance, undefined) : [],
    timestampField: jspb.Message.getFieldWithDefault(msg, 3, ""),
    datePartitionColumn: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdTimestampColumn: jspb.Message.getFieldWithDefault(msg, 5, ""),
    dataSourceClassType: jspb.Message.getFieldWithDefault(msg, 17, ""),
    batchSource: (f = msg.getBatchSource()) && proto.feast.core.DataSource.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.feast.core.DataSource.SourceMeta.toObject(includeInstance, f),
    fileOptions: (f = msg.getFileOptions()) && proto.feast.core.DataSource.FileOptions.toObject(includeInstance, f),
    bigqueryOptions: (f = msg.getBigqueryOptions()) && proto.feast.core.DataSource.BigQueryOptions.toObject(includeInstance, f),
    kafkaOptions: (f = msg.getKafkaOptions()) && proto.feast.core.DataSource.KafkaOptions.toObject(includeInstance, f),
    kinesisOptions: (f = msg.getKinesisOptions()) && proto.feast.core.DataSource.KinesisOptions.toObject(includeInstance, f),
    redshiftOptions: (f = msg.getRedshiftOptions()) && proto.feast.core.DataSource.RedshiftOptions.toObject(includeInstance, f),
    requestDataOptions: (f = msg.getRequestDataOptions()) && proto.feast.core.DataSource.RequestDataOptions.toObject(includeInstance, f),
    customOptions: (f = msg.getCustomOptions()) && proto.feast.core.DataSource.CustomSourceOptions.toObject(includeInstance, f),
    snowflakeOptions: (f = msg.getSnowflakeOptions()) && proto.feast.core.DataSource.SnowflakeOptions.toObject(includeInstance, f),
    pushOptions: (f = msg.getPushOptions()) && proto.feast.core.DataSource.PushOptions.toObject(includeInstance, f),
    sparkOptions: (f = msg.getSparkOptions()) && proto.feast.core.DataSource.SparkOptions.toObject(includeInstance, f),
    trinoOptions: (f = msg.getTrinoOptions()) && proto.feast.core.DataSource.TrinoOptions.toObject(includeInstance, f),
    athenaOptions: (f = msg.getAthenaOptions()) && proto.feast.core.DataSource.AthenaOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource}
 */
proto.feast.core.DataSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource;
  return proto.feast.core.DataSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource}
 */
proto.feast.core.DataSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 24:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 1:
      var value = /** @type {!proto.feast.core.DataSource.SourceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = msg.getFieldMappingMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestampField(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatePartitionColumn(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedTimestampColumn(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataSourceClassType(value);
      break;
    case 26:
      var value = new proto.feast.core.DataSource;
      reader.readMessage(value,proto.feast.core.DataSource.deserializeBinaryFromReader);
      msg.setBatchSource(value);
      break;
    case 50:
      var value = new proto.feast.core.DataSource.SourceMeta;
      reader.readMessage(value,proto.feast.core.DataSource.SourceMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 11:
      var value = new proto.feast.core.DataSource.FileOptions;
      reader.readMessage(value,proto.feast.core.DataSource.FileOptions.deserializeBinaryFromReader);
      msg.setFileOptions(value);
      break;
    case 12:
      var value = new proto.feast.core.DataSource.BigQueryOptions;
      reader.readMessage(value,proto.feast.core.DataSource.BigQueryOptions.deserializeBinaryFromReader);
      msg.setBigqueryOptions(value);
      break;
    case 13:
      var value = new proto.feast.core.DataSource.KafkaOptions;
      reader.readMessage(value,proto.feast.core.DataSource.KafkaOptions.deserializeBinaryFromReader);
      msg.setKafkaOptions(value);
      break;
    case 14:
      var value = new proto.feast.core.DataSource.KinesisOptions;
      reader.readMessage(value,proto.feast.core.DataSource.KinesisOptions.deserializeBinaryFromReader);
      msg.setKinesisOptions(value);
      break;
    case 15:
      var value = new proto.feast.core.DataSource.RedshiftOptions;
      reader.readMessage(value,proto.feast.core.DataSource.RedshiftOptions.deserializeBinaryFromReader);
      msg.setRedshiftOptions(value);
      break;
    case 18:
      var value = new proto.feast.core.DataSource.RequestDataOptions;
      reader.readMessage(value,proto.feast.core.DataSource.RequestDataOptions.deserializeBinaryFromReader);
      msg.setRequestDataOptions(value);
      break;
    case 16:
      var value = new proto.feast.core.DataSource.CustomSourceOptions;
      reader.readMessage(value,proto.feast.core.DataSource.CustomSourceOptions.deserializeBinaryFromReader);
      msg.setCustomOptions(value);
      break;
    case 19:
      var value = new proto.feast.core.DataSource.SnowflakeOptions;
      reader.readMessage(value,proto.feast.core.DataSource.SnowflakeOptions.deserializeBinaryFromReader);
      msg.setSnowflakeOptions(value);
      break;
    case 22:
      var value = new proto.feast.core.DataSource.PushOptions;
      reader.readMessage(value,proto.feast.core.DataSource.PushOptions.deserializeBinaryFromReader);
      msg.setPushOptions(value);
      break;
    case 27:
      var value = new proto.feast.core.DataSource.SparkOptions;
      reader.readMessage(value,proto.feast.core.DataSource.SparkOptions.deserializeBinaryFromReader);
      msg.setSparkOptions(value);
      break;
    case 30:
      var value = new proto.feast.core.DataSource.TrinoOptions;
      reader.readMessage(value,proto.feast.core.DataSource.TrinoOptions.deserializeBinaryFromReader);
      msg.setTrinoOptions(value);
      break;
    case 35:
      var value = new proto.feast.core.DataSource.AthenaOptions;
      reader.readMessage(value,proto.feast.core.DataSource.AthenaOptions.deserializeBinaryFromReader);
      msg.setAthenaOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(24, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFieldMappingMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getTimestampField();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDatePartitionColumn();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedTimestampColumn();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDataSourceClassType();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getBatchSource();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.feast.core.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      50,
      f,
      proto.feast.core.DataSource.SourceMeta.serializeBinaryToWriter
    );
  }
  f = message.getFileOptions();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.feast.core.DataSource.FileOptions.serializeBinaryToWriter
    );
  }
  f = message.getBigqueryOptions();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.feast.core.DataSource.BigQueryOptions.serializeBinaryToWriter
    );
  }
  f = message.getKafkaOptions();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.feast.core.DataSource.KafkaOptions.serializeBinaryToWriter
    );
  }
  f = message.getKinesisOptions();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.feast.core.DataSource.KinesisOptions.serializeBinaryToWriter
    );
  }
  f = message.getRedshiftOptions();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.feast.core.DataSource.RedshiftOptions.serializeBinaryToWriter
    );
  }
  f = message.getRequestDataOptions();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.feast.core.DataSource.RequestDataOptions.serializeBinaryToWriter
    );
  }
  f = message.getCustomOptions();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.feast.core.DataSource.CustomSourceOptions.serializeBinaryToWriter
    );
  }
  f = message.getSnowflakeOptions();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.feast.core.DataSource.SnowflakeOptions.serializeBinaryToWriter
    );
  }
  f = message.getPushOptions();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.feast.core.DataSource.PushOptions.serializeBinaryToWriter
    );
  }
  f = message.getSparkOptions();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.feast.core.DataSource.SparkOptions.serializeBinaryToWriter
    );
  }
  f = message.getTrinoOptions();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.feast.core.DataSource.TrinoOptions.serializeBinaryToWriter
    );
  }
  f = message.getAthenaOptions();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      proto.feast.core.DataSource.AthenaOptions.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.feast.core.DataSource.SourceType = {
  INVALID: 0,
  BATCH_FILE: 1,
  BATCH_SNOWFLAKE: 8,
  BATCH_BIGQUERY: 2,
  BATCH_REDSHIFT: 5,
  STREAM_KAFKA: 3,
  STREAM_KINESIS: 4,
  CUSTOM_SOURCE: 6,
  REQUEST_SOURCE: 7,
  PUSH_SOURCE: 9,
  BATCH_TRINO: 10,
  BATCH_SPARK: 11,
  BATCH_ATHENA: 12
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.SourceMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.SourceMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.SourceMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.SourceMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    earliesteventtimestamp: (f = msg.getEarliesteventtimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    latesteventtimestamp: (f = msg.getLatesteventtimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.SourceMeta}
 */
proto.feast.core.DataSource.SourceMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.SourceMeta;
  return proto.feast.core.DataSource.SourceMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.SourceMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.SourceMeta}
 */
proto.feast.core.DataSource.SourceMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEarliesteventtimestamp(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLatesteventtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.SourceMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.SourceMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.SourceMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.SourceMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEarliesteventtimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLatesteventtimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp earliestEventTimestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.DataSource.SourceMeta.prototype.getEarliesteventtimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.DataSource.SourceMeta} returns this
*/
proto.feast.core.DataSource.SourceMeta.prototype.setEarliesteventtimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource.SourceMeta} returns this
 */
proto.feast.core.DataSource.SourceMeta.prototype.clearEarliesteventtimestamp = function() {
  return this.setEarliesteventtimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.SourceMeta.prototype.hasEarliesteventtimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp latestEventTimestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.DataSource.SourceMeta.prototype.getLatesteventtimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.DataSource.SourceMeta} returns this
*/
proto.feast.core.DataSource.SourceMeta.prototype.setLatesteventtimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource.SourceMeta} returns this
 */
proto.feast.core.DataSource.SourceMeta.prototype.clearLatesteventtimestamp = function() {
  return this.setLatesteventtimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.SourceMeta.prototype.hasLatesteventtimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.FileOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.FileOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.FileOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.FileOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileFormat: (f = msg.getFileFormat()) && feast_core_DataFormat_pb.FileFormat.toObject(includeInstance, f),
    uri: jspb.Message.getFieldWithDefault(msg, 2, ""),
    s3EndpointOverride: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.FileOptions}
 */
proto.feast.core.DataSource.FileOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.FileOptions;
  return proto.feast.core.DataSource.FileOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.FileOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.FileOptions}
 */
proto.feast.core.DataSource.FileOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new feast_core_DataFormat_pb.FileFormat;
      reader.readMessage(value,feast_core_DataFormat_pb.FileFormat.deserializeBinaryFromReader);
      msg.setFileFormat(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3EndpointOverride(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.FileOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.FileOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.FileOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.FileOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileFormat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      feast_core_DataFormat_pb.FileFormat.serializeBinaryToWriter
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getS3EndpointOverride();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional FileFormat file_format = 1;
 * @return {?proto.feast.core.FileFormat}
 */
proto.feast.core.DataSource.FileOptions.prototype.getFileFormat = function() {
  return /** @type{?proto.feast.core.FileFormat} */ (
    jspb.Message.getWrapperField(this, feast_core_DataFormat_pb.FileFormat, 1));
};


/**
 * @param {?proto.feast.core.FileFormat|undefined} value
 * @return {!proto.feast.core.DataSource.FileOptions} returns this
*/
proto.feast.core.DataSource.FileOptions.prototype.setFileFormat = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource.FileOptions} returns this
 */
proto.feast.core.DataSource.FileOptions.prototype.clearFileFormat = function() {
  return this.setFileFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.FileOptions.prototype.hasFileFormat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string uri = 2;
 * @return {string}
 */
proto.feast.core.DataSource.FileOptions.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.FileOptions} returns this
 */
proto.feast.core.DataSource.FileOptions.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string s3_endpoint_override = 3;
 * @return {string}
 */
proto.feast.core.DataSource.FileOptions.prototype.getS3EndpointOverride = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.FileOptions} returns this
 */
proto.feast.core.DataSource.FileOptions.prototype.setS3EndpointOverride = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.BigQueryOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.BigQueryOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.BigQueryOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.BigQueryOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.BigQueryOptions}
 */
proto.feast.core.DataSource.BigQueryOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.BigQueryOptions;
  return proto.feast.core.DataSource.BigQueryOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.BigQueryOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.BigQueryOptions}
 */
proto.feast.core.DataSource.BigQueryOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.BigQueryOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.BigQueryOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.BigQueryOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.BigQueryOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string table = 1;
 * @return {string}
 */
proto.feast.core.DataSource.BigQueryOptions.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.BigQueryOptions} returns this
 */
proto.feast.core.DataSource.BigQueryOptions.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.feast.core.DataSource.BigQueryOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.BigQueryOptions} returns this
 */
proto.feast.core.DataSource.BigQueryOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.TrinoOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.TrinoOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.TrinoOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.TrinoOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.TrinoOptions}
 */
proto.feast.core.DataSource.TrinoOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.TrinoOptions;
  return proto.feast.core.DataSource.TrinoOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.TrinoOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.TrinoOptions}
 */
proto.feast.core.DataSource.TrinoOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.TrinoOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.TrinoOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.TrinoOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.TrinoOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string table = 1;
 * @return {string}
 */
proto.feast.core.DataSource.TrinoOptions.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.TrinoOptions} returns this
 */
proto.feast.core.DataSource.TrinoOptions.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.feast.core.DataSource.TrinoOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.TrinoOptions} returns this
 */
proto.feast.core.DataSource.TrinoOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.KafkaOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.KafkaOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.KafkaOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    kafkaBootstrapServers: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 2, ""),
    messageFormat: (f = msg.getMessageFormat()) && feast_core_DataFormat_pb.StreamFormat.toObject(includeInstance, f),
    watermarkDelayThreshold: (f = msg.getWatermarkDelayThreshold()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.KafkaOptions}
 */
proto.feast.core.DataSource.KafkaOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.KafkaOptions;
  return proto.feast.core.DataSource.KafkaOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.KafkaOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.KafkaOptions}
 */
proto.feast.core.DataSource.KafkaOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKafkaBootstrapServers(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 3:
      var value = new feast_core_DataFormat_pb.StreamFormat;
      reader.readMessage(value,feast_core_DataFormat_pb.StreamFormat.deserializeBinaryFromReader);
      msg.setMessageFormat(value);
      break;
    case 4:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setWatermarkDelayThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.KafkaOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.KafkaOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.KafkaOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKafkaBootstrapServers();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessageFormat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      feast_core_DataFormat_pb.StreamFormat.serializeBinaryToWriter
    );
  }
  f = message.getWatermarkDelayThreshold();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string kafka_bootstrap_servers = 1;
 * @return {string}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.getKafkaBootstrapServers = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.KafkaOptions} returns this
 */
proto.feast.core.DataSource.KafkaOptions.prototype.setKafkaBootstrapServers = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string topic = 2;
 * @return {string}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.KafkaOptions} returns this
 */
proto.feast.core.DataSource.KafkaOptions.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional StreamFormat message_format = 3;
 * @return {?proto.feast.core.StreamFormat}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.getMessageFormat = function() {
  return /** @type{?proto.feast.core.StreamFormat} */ (
    jspb.Message.getWrapperField(this, feast_core_DataFormat_pb.StreamFormat, 3));
};


/**
 * @param {?proto.feast.core.StreamFormat|undefined} value
 * @return {!proto.feast.core.DataSource.KafkaOptions} returns this
*/
proto.feast.core.DataSource.KafkaOptions.prototype.setMessageFormat = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource.KafkaOptions} returns this
 */
proto.feast.core.DataSource.KafkaOptions.prototype.clearMessageFormat = function() {
  return this.setMessageFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.hasMessageFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Duration watermark_delay_threshold = 4;
 * @return {?proto.google.protobuf.Duration}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.getWatermarkDelayThreshold = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 4));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.feast.core.DataSource.KafkaOptions} returns this
*/
proto.feast.core.DataSource.KafkaOptions.prototype.setWatermarkDelayThreshold = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource.KafkaOptions} returns this
 */
proto.feast.core.DataSource.KafkaOptions.prototype.clearWatermarkDelayThreshold = function() {
  return this.setWatermarkDelayThreshold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.KafkaOptions.prototype.hasWatermarkDelayThreshold = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.KinesisOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.KinesisOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.KinesisOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.KinesisOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    region: jspb.Message.getFieldWithDefault(msg, 1, ""),
    streamName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    recordFormat: (f = msg.getRecordFormat()) && feast_core_DataFormat_pb.StreamFormat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.KinesisOptions}
 */
proto.feast.core.DataSource.KinesisOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.KinesisOptions;
  return proto.feast.core.DataSource.KinesisOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.KinesisOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.KinesisOptions}
 */
proto.feast.core.DataSource.KinesisOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamName(value);
      break;
    case 3:
      var value = new feast_core_DataFormat_pb.StreamFormat;
      reader.readMessage(value,feast_core_DataFormat_pb.StreamFormat.deserializeBinaryFromReader);
      msg.setRecordFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.KinesisOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.KinesisOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.KinesisOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.KinesisOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStreamName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRecordFormat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      feast_core_DataFormat_pb.StreamFormat.serializeBinaryToWriter
    );
  }
};


/**
 * optional string region = 1;
 * @return {string}
 */
proto.feast.core.DataSource.KinesisOptions.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.KinesisOptions} returns this
 */
proto.feast.core.DataSource.KinesisOptions.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string stream_name = 2;
 * @return {string}
 */
proto.feast.core.DataSource.KinesisOptions.prototype.getStreamName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.KinesisOptions} returns this
 */
proto.feast.core.DataSource.KinesisOptions.prototype.setStreamName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional StreamFormat record_format = 3;
 * @return {?proto.feast.core.StreamFormat}
 */
proto.feast.core.DataSource.KinesisOptions.prototype.getRecordFormat = function() {
  return /** @type{?proto.feast.core.StreamFormat} */ (
    jspb.Message.getWrapperField(this, feast_core_DataFormat_pb.StreamFormat, 3));
};


/**
 * @param {?proto.feast.core.StreamFormat|undefined} value
 * @return {!proto.feast.core.DataSource.KinesisOptions} returns this
*/
proto.feast.core.DataSource.KinesisOptions.prototype.setRecordFormat = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource.KinesisOptions} returns this
 */
proto.feast.core.DataSource.KinesisOptions.prototype.clearRecordFormat = function() {
  return this.setRecordFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.KinesisOptions.prototype.hasRecordFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.RedshiftOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.RedshiftOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.RedshiftOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, ""),
    schema: jspb.Message.getFieldWithDefault(msg, 3, ""),
    database: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.RedshiftOptions}
 */
proto.feast.core.DataSource.RedshiftOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.RedshiftOptions;
  return proto.feast.core.DataSource.RedshiftOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.RedshiftOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.RedshiftOptions}
 */
proto.feast.core.DataSource.RedshiftOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchema(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.RedshiftOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.RedshiftOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.RedshiftOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSchema();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDatabase();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string table = 1;
 * @return {string}
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.RedshiftOptions} returns this
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.RedshiftOptions} returns this
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string schema = 3;
 * @return {string}
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.getSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.RedshiftOptions} returns this
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.setSchema = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string database = 4;
 * @return {string}
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.getDatabase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.RedshiftOptions} returns this
 */
proto.feast.core.DataSource.RedshiftOptions.prototype.setDatabase = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.AthenaOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.AthenaOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.AthenaOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.AthenaOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, ""),
    database: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dataSource: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.AthenaOptions}
 */
proto.feast.core.DataSource.AthenaOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.AthenaOptions;
  return proto.feast.core.DataSource.AthenaOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.AthenaOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.AthenaOptions}
 */
proto.feast.core.DataSource.AthenaOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabase(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.AthenaOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.AthenaOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.AthenaOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.AthenaOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDatabase();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDataSource();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string table = 1;
 * @return {string}
 */
proto.feast.core.DataSource.AthenaOptions.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.AthenaOptions} returns this
 */
proto.feast.core.DataSource.AthenaOptions.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.feast.core.DataSource.AthenaOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.AthenaOptions} returns this
 */
proto.feast.core.DataSource.AthenaOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string database = 3;
 * @return {string}
 */
proto.feast.core.DataSource.AthenaOptions.prototype.getDatabase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.AthenaOptions} returns this
 */
proto.feast.core.DataSource.AthenaOptions.prototype.setDatabase = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string data_source = 4;
 * @return {string}
 */
proto.feast.core.DataSource.AthenaOptions.prototype.getDataSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.AthenaOptions} returns this
 */
proto.feast.core.DataSource.AthenaOptions.prototype.setDataSource = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.SnowflakeOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.SnowflakeOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.SnowflakeOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, ""),
    schema: jspb.Message.getFieldWithDefault(msg, 3, ""),
    database: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.SnowflakeOptions}
 */
proto.feast.core.DataSource.SnowflakeOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.SnowflakeOptions;
  return proto.feast.core.DataSource.SnowflakeOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.SnowflakeOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.SnowflakeOptions}
 */
proto.feast.core.DataSource.SnowflakeOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchema(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.SnowflakeOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.SnowflakeOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.SnowflakeOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSchema();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDatabase();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string table = 1;
 * @return {string}
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SnowflakeOptions} returns this
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SnowflakeOptions} returns this
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string schema = 3;
 * @return {string}
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.getSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SnowflakeOptions} returns this
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.setSchema = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string database = 4;
 * @return {string}
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.getDatabase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SnowflakeOptions} returns this
 */
proto.feast.core.DataSource.SnowflakeOptions.prototype.setDatabase = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.SparkOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.SparkOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.SparkOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.SparkOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, ""),
    path: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fileFormat: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.SparkOptions}
 */
proto.feast.core.DataSource.SparkOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.SparkOptions;
  return proto.feast.core.DataSource.SparkOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.SparkOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.SparkOptions}
 */
proto.feast.core.DataSource.SparkOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.SparkOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.SparkOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.SparkOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.SparkOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFileFormat();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string table = 1;
 * @return {string}
 */
proto.feast.core.DataSource.SparkOptions.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SparkOptions} returns this
 */
proto.feast.core.DataSource.SparkOptions.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.feast.core.DataSource.SparkOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SparkOptions} returns this
 */
proto.feast.core.DataSource.SparkOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string path = 3;
 * @return {string}
 */
proto.feast.core.DataSource.SparkOptions.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SparkOptions} returns this
 */
proto.feast.core.DataSource.SparkOptions.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string file_format = 4;
 * @return {string}
 */
proto.feast.core.DataSource.SparkOptions.prototype.getFileFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource.SparkOptions} returns this
 */
proto.feast.core.DataSource.SparkOptions.prototype.setFileFormat = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.CustomSourceOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.CustomSourceOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.CustomSourceOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.CustomSourceOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    configuration: msg.getConfiguration_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.CustomSourceOptions}
 */
proto.feast.core.DataSource.CustomSourceOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.CustomSourceOptions;
  return proto.feast.core.DataSource.CustomSourceOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.CustomSourceOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.CustomSourceOptions}
 */
proto.feast.core.DataSource.CustomSourceOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.CustomSourceOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.CustomSourceOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.CustomSourceOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.CustomSourceOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfiguration_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes configuration = 1;
 * @return {string}
 */
proto.feast.core.DataSource.CustomSourceOptions.prototype.getConfiguration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes configuration = 1;
 * This is a type-conversion wrapper around `getConfiguration()`
 * @return {string}
 */
proto.feast.core.DataSource.CustomSourceOptions.prototype.getConfiguration_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfiguration()));
};


/**
 * optional bytes configuration = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConfiguration()`
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.CustomSourceOptions.prototype.getConfiguration_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfiguration()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.core.DataSource.CustomSourceOptions} returns this
 */
proto.feast.core.DataSource.CustomSourceOptions.prototype.setConfiguration = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.DataSource.RequestDataOptions.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.RequestDataOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.RequestDataOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.RequestDataOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    deprecatedSchemaMap: (f = msg.getDeprecatedSchemaMap()) ? f.toObject(includeInstance, undefined) : [],
    schemaList: jspb.Message.toObjectList(msg.getSchemaList(),
    feast_core_Feature_pb.FeatureSpecV2.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.RequestDataOptions}
 */
proto.feast.core.DataSource.RequestDataOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.RequestDataOptions;
  return proto.feast.core.DataSource.RequestDataOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.RequestDataOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.RequestDataOptions}
 */
proto.feast.core.DataSource.RequestDataOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = msg.getDeprecatedSchemaMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readEnum, null, "", 0);
         });
      break;
    case 3:
      var value = new feast_core_Feature_pb.FeatureSpecV2;
      reader.readMessage(value,feast_core_Feature_pb.FeatureSpecV2.deserializeBinaryFromReader);
      msg.addSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.RequestDataOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.RequestDataOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.RequestDataOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeprecatedSchemaMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getSchemaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      feast_core_Feature_pb.FeatureSpecV2.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, feast.types.ValueType.Enum> deprecated_schema = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.feast.types.ValueType.Enum>}
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.getDeprecatedSchemaMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.feast.types.ValueType.Enum>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.DataSource.RequestDataOptions} returns this
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.clearDeprecatedSchemaMap = function() {
  this.getDeprecatedSchemaMap().clear();
  return this;
};


/**
 * repeated FeatureSpecV2 schema = 3;
 * @return {!Array<!proto.feast.core.FeatureSpecV2>}
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.getSchemaList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureSpecV2>} */ (
    jspb.Message.getRepeatedWrapperField(this, feast_core_Feature_pb.FeatureSpecV2, 3));
};


/**
 * @param {!Array<!proto.feast.core.FeatureSpecV2>} value
 * @return {!proto.feast.core.DataSource.RequestDataOptions} returns this
*/
proto.feast.core.DataSource.RequestDataOptions.prototype.setSchemaList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.feast.core.FeatureSpecV2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureSpecV2}
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.addSchema = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.feast.core.FeatureSpecV2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.DataSource.RequestDataOptions} returns this
 */
proto.feast.core.DataSource.RequestDataOptions.prototype.clearSchemaList = function() {
  return this.setSchemaList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.DataSource.PushOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.DataSource.PushOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.DataSource.PushOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.PushOptions.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.DataSource.PushOptions}
 */
proto.feast.core.DataSource.PushOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.DataSource.PushOptions;
  return proto.feast.core.DataSource.PushOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.DataSource.PushOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.DataSource.PushOptions}
 */
proto.feast.core.DataSource.PushOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.DataSource.PushOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.DataSource.PushOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.DataSource.PushOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.DataSource.PushOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional string name = 20;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string project = 21;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string description = 23;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * map<string, string> tags = 24;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.DataSource.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 24, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};


/**
 * optional string owner = 25;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * optional SourceType type = 1;
 * @return {!proto.feast.core.DataSource.SourceType}
 */
proto.feast.core.DataSource.prototype.getType = function() {
  return /** @type {!proto.feast.core.DataSource.SourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.feast.core.DataSource.SourceType} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * map<string, string> field_mapping = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.DataSource.prototype.getFieldMappingMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearFieldMappingMap = function() {
  this.getFieldMappingMap().clear();
  return this;
};


/**
 * optional string timestamp_field = 3;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getTimestampField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setTimestampField = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string date_partition_column = 4;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getDatePartitionColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setDatePartitionColumn = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string created_timestamp_column = 5;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getCreatedTimestampColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setCreatedTimestampColumn = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string data_source_class_type = 17;
 * @return {string}
 */
proto.feast.core.DataSource.prototype.getDataSourceClassType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.setDataSourceClassType = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional DataSource batch_source = 26;
 * @return {?proto.feast.core.DataSource}
 */
proto.feast.core.DataSource.prototype.getBatchSource = function() {
  return /** @type{?proto.feast.core.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource, 26));
};


/**
 * @param {?proto.feast.core.DataSource|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setBatchSource = function(value) {
  return jspb.Message.setWrapperField(this, 26, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearBatchSource = function() {
  return this.setBatchSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasBatchSource = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional SourceMeta meta = 50;
 * @return {?proto.feast.core.DataSource.SourceMeta}
 */
proto.feast.core.DataSource.prototype.getMeta = function() {
  return /** @type{?proto.feast.core.DataSource.SourceMeta} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.SourceMeta, 50));
};


/**
 * @param {?proto.feast.core.DataSource.SourceMeta|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 50, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 50) != null;
};


/**
 * optional FileOptions file_options = 11;
 * @return {?proto.feast.core.DataSource.FileOptions}
 */
proto.feast.core.DataSource.prototype.getFileOptions = function() {
  return /** @type{?proto.feast.core.DataSource.FileOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.FileOptions, 11));
};


/**
 * @param {?proto.feast.core.DataSource.FileOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setFileOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearFileOptions = function() {
  return this.setFileOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasFileOptions = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional BigQueryOptions bigquery_options = 12;
 * @return {?proto.feast.core.DataSource.BigQueryOptions}
 */
proto.feast.core.DataSource.prototype.getBigqueryOptions = function() {
  return /** @type{?proto.feast.core.DataSource.BigQueryOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.BigQueryOptions, 12));
};


/**
 * @param {?proto.feast.core.DataSource.BigQueryOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setBigqueryOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearBigqueryOptions = function() {
  return this.setBigqueryOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasBigqueryOptions = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional KafkaOptions kafka_options = 13;
 * @return {?proto.feast.core.DataSource.KafkaOptions}
 */
proto.feast.core.DataSource.prototype.getKafkaOptions = function() {
  return /** @type{?proto.feast.core.DataSource.KafkaOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.KafkaOptions, 13));
};


/**
 * @param {?proto.feast.core.DataSource.KafkaOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setKafkaOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearKafkaOptions = function() {
  return this.setKafkaOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasKafkaOptions = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional KinesisOptions kinesis_options = 14;
 * @return {?proto.feast.core.DataSource.KinesisOptions}
 */
proto.feast.core.DataSource.prototype.getKinesisOptions = function() {
  return /** @type{?proto.feast.core.DataSource.KinesisOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.KinesisOptions, 14));
};


/**
 * @param {?proto.feast.core.DataSource.KinesisOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setKinesisOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearKinesisOptions = function() {
  return this.setKinesisOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasKinesisOptions = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional RedshiftOptions redshift_options = 15;
 * @return {?proto.feast.core.DataSource.RedshiftOptions}
 */
proto.feast.core.DataSource.prototype.getRedshiftOptions = function() {
  return /** @type{?proto.feast.core.DataSource.RedshiftOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.RedshiftOptions, 15));
};


/**
 * @param {?proto.feast.core.DataSource.RedshiftOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setRedshiftOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearRedshiftOptions = function() {
  return this.setRedshiftOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasRedshiftOptions = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional RequestDataOptions request_data_options = 18;
 * @return {?proto.feast.core.DataSource.RequestDataOptions}
 */
proto.feast.core.DataSource.prototype.getRequestDataOptions = function() {
  return /** @type{?proto.feast.core.DataSource.RequestDataOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.RequestDataOptions, 18));
};


/**
 * @param {?proto.feast.core.DataSource.RequestDataOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setRequestDataOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearRequestDataOptions = function() {
  return this.setRequestDataOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasRequestDataOptions = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional CustomSourceOptions custom_options = 16;
 * @return {?proto.feast.core.DataSource.CustomSourceOptions}
 */
proto.feast.core.DataSource.prototype.getCustomOptions = function() {
  return /** @type{?proto.feast.core.DataSource.CustomSourceOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.CustomSourceOptions, 16));
};


/**
 * @param {?proto.feast.core.DataSource.CustomSourceOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setCustomOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearCustomOptions = function() {
  return this.setCustomOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasCustomOptions = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional SnowflakeOptions snowflake_options = 19;
 * @return {?proto.feast.core.DataSource.SnowflakeOptions}
 */
proto.feast.core.DataSource.prototype.getSnowflakeOptions = function() {
  return /** @type{?proto.feast.core.DataSource.SnowflakeOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.SnowflakeOptions, 19));
};


/**
 * @param {?proto.feast.core.DataSource.SnowflakeOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setSnowflakeOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearSnowflakeOptions = function() {
  return this.setSnowflakeOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasSnowflakeOptions = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional PushOptions push_options = 22;
 * @return {?proto.feast.core.DataSource.PushOptions}
 */
proto.feast.core.DataSource.prototype.getPushOptions = function() {
  return /** @type{?proto.feast.core.DataSource.PushOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.PushOptions, 22));
};


/**
 * @param {?proto.feast.core.DataSource.PushOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setPushOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearPushOptions = function() {
  return this.setPushOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasPushOptions = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional SparkOptions spark_options = 27;
 * @return {?proto.feast.core.DataSource.SparkOptions}
 */
proto.feast.core.DataSource.prototype.getSparkOptions = function() {
  return /** @type{?proto.feast.core.DataSource.SparkOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.SparkOptions, 27));
};


/**
 * @param {?proto.feast.core.DataSource.SparkOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setSparkOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 27, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearSparkOptions = function() {
  return this.setSparkOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasSparkOptions = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional TrinoOptions trino_options = 30;
 * @return {?proto.feast.core.DataSource.TrinoOptions}
 */
proto.feast.core.DataSource.prototype.getTrinoOptions = function() {
  return /** @type{?proto.feast.core.DataSource.TrinoOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.TrinoOptions, 30));
};


/**
 * @param {?proto.feast.core.DataSource.TrinoOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setTrinoOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 30, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearTrinoOptions = function() {
  return this.setTrinoOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasTrinoOptions = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional AthenaOptions athena_options = 35;
 * @return {?proto.feast.core.DataSource.AthenaOptions}
 */
proto.feast.core.DataSource.prototype.getAthenaOptions = function() {
  return /** @type{?proto.feast.core.DataSource.AthenaOptions} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.DataSource.AthenaOptions, 35));
};


/**
 * @param {?proto.feast.core.DataSource.AthenaOptions|undefined} value
 * @return {!proto.feast.core.DataSource} returns this
*/
proto.feast.core.DataSource.prototype.setAthenaOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 35, proto.feast.core.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.DataSource} returns this
 */
proto.feast.core.DataSource.prototype.clearAthenaOptions = function() {
  return this.setAthenaOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.DataSource.prototype.hasAthenaOptions = function() {
  return jspb.Message.getField(this, 35) != null;
};


goog.object.extend(exports, proto.feast.core);
