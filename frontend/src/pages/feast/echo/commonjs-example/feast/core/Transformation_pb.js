// source: feast/core/Transformation.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.feast.core.FeatureTransformationV2', null, global);
goog.exportSymbol('proto.feast.core.FeatureTransformationV2.TransformationCase', null, global);
goog.exportSymbol('proto.feast.core.SubstraitTransformationV2', null, global);
goog.exportSymbol('proto.feast.core.UserDefinedFunctionV2', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.UserDefinedFunctionV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.UserDefinedFunctionV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.UserDefinedFunctionV2.displayName = 'proto.feast.core.UserDefinedFunctionV2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureTransformationV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.FeatureTransformationV2.oneofGroups_);
};
goog.inherits(proto.feast.core.FeatureTransformationV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureTransformationV2.displayName = 'proto.feast.core.FeatureTransformationV2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.SubstraitTransformationV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.SubstraitTransformationV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.SubstraitTransformationV2.displayName = 'proto.feast.core.SubstraitTransformationV2';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.UserDefinedFunctionV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.UserDefinedFunctionV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.UserDefinedFunctionV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: msg.getBody_asB64(),
    bodyText: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.UserDefinedFunctionV2}
 */
proto.feast.core.UserDefinedFunctionV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.UserDefinedFunctionV2;
  return proto.feast.core.UserDefinedFunctionV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.UserDefinedFunctionV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.UserDefinedFunctionV2}
 */
proto.feast.core.UserDefinedFunctionV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBodyText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.UserDefinedFunctionV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.UserDefinedFunctionV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.UserDefinedFunctionV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBodyText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.UserDefinedFunctionV2} returns this
 */
proto.feast.core.UserDefinedFunctionV2.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {string}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.core.UserDefinedFunctionV2} returns this
 */
proto.feast.core.UserDefinedFunctionV2.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string body_text = 3;
 * @return {string}
 */
proto.feast.core.UserDefinedFunctionV2.prototype.getBodyText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.UserDefinedFunctionV2} returns this
 */
proto.feast.core.UserDefinedFunctionV2.prototype.setBodyText = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.FeatureTransformationV2.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.feast.core.FeatureTransformationV2.TransformationCase = {
  TRANSFORMATION_NOT_SET: 0,
  USER_DEFINED_FUNCTION: 1,
  SUBSTRAIT_TRANSFORMATION: 2
};

/**
 * @return {proto.feast.core.FeatureTransformationV2.TransformationCase}
 */
proto.feast.core.FeatureTransformationV2.prototype.getTransformationCase = function() {
  return /** @type {proto.feast.core.FeatureTransformationV2.TransformationCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.FeatureTransformationV2.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureTransformationV2.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureTransformationV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureTransformationV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureTransformationV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    userDefinedFunction: (f = msg.getUserDefinedFunction()) && proto.feast.core.UserDefinedFunctionV2.toObject(includeInstance, f),
    substraitTransformation: (f = msg.getSubstraitTransformation()) && proto.feast.core.SubstraitTransformationV2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureTransformationV2}
 */
proto.feast.core.FeatureTransformationV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureTransformationV2;
  return proto.feast.core.FeatureTransformationV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureTransformationV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureTransformationV2}
 */
proto.feast.core.FeatureTransformationV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.UserDefinedFunctionV2;
      reader.readMessage(value,proto.feast.core.UserDefinedFunctionV2.deserializeBinaryFromReader);
      msg.setUserDefinedFunction(value);
      break;
    case 2:
      var value = new proto.feast.core.SubstraitTransformationV2;
      reader.readMessage(value,proto.feast.core.SubstraitTransformationV2.deserializeBinaryFromReader);
      msg.setSubstraitTransformation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureTransformationV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureTransformationV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureTransformationV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureTransformationV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserDefinedFunction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.UserDefinedFunctionV2.serializeBinaryToWriter
    );
  }
  f = message.getSubstraitTransformation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.SubstraitTransformationV2.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserDefinedFunctionV2 user_defined_function = 1;
 * @return {?proto.feast.core.UserDefinedFunctionV2}
 */
proto.feast.core.FeatureTransformationV2.prototype.getUserDefinedFunction = function() {
  return /** @type{?proto.feast.core.UserDefinedFunctionV2} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.UserDefinedFunctionV2, 1));
};


/**
 * @param {?proto.feast.core.UserDefinedFunctionV2|undefined} value
 * @return {!proto.feast.core.FeatureTransformationV2} returns this
*/
proto.feast.core.FeatureTransformationV2.prototype.setUserDefinedFunction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.feast.core.FeatureTransformationV2.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureTransformationV2} returns this
 */
proto.feast.core.FeatureTransformationV2.prototype.clearUserDefinedFunction = function() {
  return this.setUserDefinedFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureTransformationV2.prototype.hasUserDefinedFunction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SubstraitTransformationV2 substrait_transformation = 2;
 * @return {?proto.feast.core.SubstraitTransformationV2}
 */
proto.feast.core.FeatureTransformationV2.prototype.getSubstraitTransformation = function() {
  return /** @type{?proto.feast.core.SubstraitTransformationV2} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.SubstraitTransformationV2, 2));
};


/**
 * @param {?proto.feast.core.SubstraitTransformationV2|undefined} value
 * @return {!proto.feast.core.FeatureTransformationV2} returns this
*/
proto.feast.core.FeatureTransformationV2.prototype.setSubstraitTransformation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.feast.core.FeatureTransformationV2.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureTransformationV2} returns this
 */
proto.feast.core.FeatureTransformationV2.prototype.clearSubstraitTransformation = function() {
  return this.setSubstraitTransformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureTransformationV2.prototype.hasSubstraitTransformation = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.SubstraitTransformationV2.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.SubstraitTransformationV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.SubstraitTransformationV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SubstraitTransformationV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    substraitPlan: msg.getSubstraitPlan_asB64(),
    ibisFunction: msg.getIbisFunction_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.SubstraitTransformationV2}
 */
proto.feast.core.SubstraitTransformationV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.SubstraitTransformationV2;
  return proto.feast.core.SubstraitTransformationV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.SubstraitTransformationV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.SubstraitTransformationV2}
 */
proto.feast.core.SubstraitTransformationV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubstraitPlan(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIbisFunction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.SubstraitTransformationV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.SubstraitTransformationV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.SubstraitTransformationV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.SubstraitTransformationV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubstraitPlan_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIbisFunction_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes substrait_plan = 1;
 * @return {string}
 */
proto.feast.core.SubstraitTransformationV2.prototype.getSubstraitPlan = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes substrait_plan = 1;
 * This is a type-conversion wrapper around `getSubstraitPlan()`
 * @return {string}
 */
proto.feast.core.SubstraitTransformationV2.prototype.getSubstraitPlan_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubstraitPlan()));
};


/**
 * optional bytes substrait_plan = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubstraitPlan()`
 * @return {!Uint8Array}
 */
proto.feast.core.SubstraitTransformationV2.prototype.getSubstraitPlan_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubstraitPlan()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.core.SubstraitTransformationV2} returns this
 */
proto.feast.core.SubstraitTransformationV2.prototype.setSubstraitPlan = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes ibis_function = 2;
 * @return {string}
 */
proto.feast.core.SubstraitTransformationV2.prototype.getIbisFunction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ibis_function = 2;
 * This is a type-conversion wrapper around `getIbisFunction()`
 * @return {string}
 */
proto.feast.core.SubstraitTransformationV2.prototype.getIbisFunction_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIbisFunction()));
};


/**
 * optional bytes ibis_function = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIbisFunction()`
 * @return {!Uint8Array}
 */
proto.feast.core.SubstraitTransformationV2.prototype.getIbisFunction_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIbisFunction()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.core.SubstraitTransformationV2} returns this
 */
proto.feast.core.SubstraitTransformationV2.prototype.setIbisFunction = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


goog.object.extend(exports, proto.feast.core);
