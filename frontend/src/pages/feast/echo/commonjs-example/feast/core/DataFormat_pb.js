// source: feast/core/DataFormat.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.feast.core.FileFormat', null, global);
goog.exportSymbol('proto.feast.core.FileFormat.DeltaFormat', null, global);
goog.exportSymbol('proto.feast.core.FileFormat.FormatCase', null, global);
goog.exportSymbol('proto.feast.core.FileFormat.ParquetFormat', null, global);
goog.exportSymbol('proto.feast.core.StreamFormat', null, global);
goog.exportSymbol('proto.feast.core.StreamFormat.AvroFormat', null, global);
goog.exportSymbol('proto.feast.core.StreamFormat.FormatCase', null, global);
goog.exportSymbol('proto.feast.core.StreamFormat.JsonFormat', null, global);
goog.exportSymbol('proto.feast.core.StreamFormat.ProtoFormat', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FileFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.FileFormat.oneofGroups_);
};
goog.inherits(proto.feast.core.FileFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FileFormat.displayName = 'proto.feast.core.FileFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FileFormat.ParquetFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.FileFormat.ParquetFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FileFormat.ParquetFormat.displayName = 'proto.feast.core.FileFormat.ParquetFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FileFormat.DeltaFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.FileFormat.DeltaFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FileFormat.DeltaFormat.displayName = 'proto.feast.core.FileFormat.DeltaFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.StreamFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.StreamFormat.oneofGroups_);
};
goog.inherits(proto.feast.core.StreamFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.StreamFormat.displayName = 'proto.feast.core.StreamFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.StreamFormat.ProtoFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.StreamFormat.ProtoFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.StreamFormat.ProtoFormat.displayName = 'proto.feast.core.StreamFormat.ProtoFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.StreamFormat.AvroFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.StreamFormat.AvroFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.StreamFormat.AvroFormat.displayName = 'proto.feast.core.StreamFormat.AvroFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.StreamFormat.JsonFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.StreamFormat.JsonFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.StreamFormat.JsonFormat.displayName = 'proto.feast.core.StreamFormat.JsonFormat';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.FileFormat.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.feast.core.FileFormat.FormatCase = {
  FORMAT_NOT_SET: 0,
  PARQUET_FORMAT: 1,
  DELTA_FORMAT: 2
};

/**
 * @return {proto.feast.core.FileFormat.FormatCase}
 */
proto.feast.core.FileFormat.prototype.getFormatCase = function() {
  return /** @type {proto.feast.core.FileFormat.FormatCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.FileFormat.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FileFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FileFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FileFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FileFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    parquetFormat: (f = msg.getParquetFormat()) && proto.feast.core.FileFormat.ParquetFormat.toObject(includeInstance, f),
    deltaFormat: (f = msg.getDeltaFormat()) && proto.feast.core.FileFormat.DeltaFormat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FileFormat}
 */
proto.feast.core.FileFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FileFormat;
  return proto.feast.core.FileFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FileFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FileFormat}
 */
proto.feast.core.FileFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.FileFormat.ParquetFormat;
      reader.readMessage(value,proto.feast.core.FileFormat.ParquetFormat.deserializeBinaryFromReader);
      msg.setParquetFormat(value);
      break;
    case 2:
      var value = new proto.feast.core.FileFormat.DeltaFormat;
      reader.readMessage(value,proto.feast.core.FileFormat.DeltaFormat.deserializeBinaryFromReader);
      msg.setDeltaFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FileFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FileFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FileFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FileFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParquetFormat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.FileFormat.ParquetFormat.serializeBinaryToWriter
    );
  }
  f = message.getDeltaFormat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.FileFormat.DeltaFormat.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FileFormat.ParquetFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FileFormat.ParquetFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FileFormat.ParquetFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FileFormat.ParquetFormat.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FileFormat.ParquetFormat}
 */
proto.feast.core.FileFormat.ParquetFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FileFormat.ParquetFormat;
  return proto.feast.core.FileFormat.ParquetFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FileFormat.ParquetFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FileFormat.ParquetFormat}
 */
proto.feast.core.FileFormat.ParquetFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FileFormat.ParquetFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FileFormat.ParquetFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FileFormat.ParquetFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FileFormat.ParquetFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FileFormat.DeltaFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FileFormat.DeltaFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FileFormat.DeltaFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FileFormat.DeltaFormat.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FileFormat.DeltaFormat}
 */
proto.feast.core.FileFormat.DeltaFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FileFormat.DeltaFormat;
  return proto.feast.core.FileFormat.DeltaFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FileFormat.DeltaFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FileFormat.DeltaFormat}
 */
proto.feast.core.FileFormat.DeltaFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FileFormat.DeltaFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FileFormat.DeltaFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FileFormat.DeltaFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FileFormat.DeltaFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional ParquetFormat parquet_format = 1;
 * @return {?proto.feast.core.FileFormat.ParquetFormat}
 */
proto.feast.core.FileFormat.prototype.getParquetFormat = function() {
  return /** @type{?proto.feast.core.FileFormat.ParquetFormat} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FileFormat.ParquetFormat, 1));
};


/**
 * @param {?proto.feast.core.FileFormat.ParquetFormat|undefined} value
 * @return {!proto.feast.core.FileFormat} returns this
*/
proto.feast.core.FileFormat.prototype.setParquetFormat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.feast.core.FileFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FileFormat} returns this
 */
proto.feast.core.FileFormat.prototype.clearParquetFormat = function() {
  return this.setParquetFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FileFormat.prototype.hasParquetFormat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeltaFormat delta_format = 2;
 * @return {?proto.feast.core.FileFormat.DeltaFormat}
 */
proto.feast.core.FileFormat.prototype.getDeltaFormat = function() {
  return /** @type{?proto.feast.core.FileFormat.DeltaFormat} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FileFormat.DeltaFormat, 2));
};


/**
 * @param {?proto.feast.core.FileFormat.DeltaFormat|undefined} value
 * @return {!proto.feast.core.FileFormat} returns this
*/
proto.feast.core.FileFormat.prototype.setDeltaFormat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.feast.core.FileFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FileFormat} returns this
 */
proto.feast.core.FileFormat.prototype.clearDeltaFormat = function() {
  return this.setDeltaFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FileFormat.prototype.hasDeltaFormat = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.StreamFormat.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.feast.core.StreamFormat.FormatCase = {
  FORMAT_NOT_SET: 0,
  AVRO_FORMAT: 1,
  PROTO_FORMAT: 2,
  JSON_FORMAT: 3
};

/**
 * @return {proto.feast.core.StreamFormat.FormatCase}
 */
proto.feast.core.StreamFormat.prototype.getFormatCase = function() {
  return /** @type {proto.feast.core.StreamFormat.FormatCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.StreamFormat.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.StreamFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.StreamFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.StreamFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    avroFormat: (f = msg.getAvroFormat()) && proto.feast.core.StreamFormat.AvroFormat.toObject(includeInstance, f),
    protoFormat: (f = msg.getProtoFormat()) && proto.feast.core.StreamFormat.ProtoFormat.toObject(includeInstance, f),
    jsonFormat: (f = msg.getJsonFormat()) && proto.feast.core.StreamFormat.JsonFormat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.StreamFormat}
 */
proto.feast.core.StreamFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.StreamFormat;
  return proto.feast.core.StreamFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.StreamFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.StreamFormat}
 */
proto.feast.core.StreamFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.StreamFormat.AvroFormat;
      reader.readMessage(value,proto.feast.core.StreamFormat.AvroFormat.deserializeBinaryFromReader);
      msg.setAvroFormat(value);
      break;
    case 2:
      var value = new proto.feast.core.StreamFormat.ProtoFormat;
      reader.readMessage(value,proto.feast.core.StreamFormat.ProtoFormat.deserializeBinaryFromReader);
      msg.setProtoFormat(value);
      break;
    case 3:
      var value = new proto.feast.core.StreamFormat.JsonFormat;
      reader.readMessage(value,proto.feast.core.StreamFormat.JsonFormat.deserializeBinaryFromReader);
      msg.setJsonFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.StreamFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.StreamFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.StreamFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAvroFormat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.StreamFormat.AvroFormat.serializeBinaryToWriter
    );
  }
  f = message.getProtoFormat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.StreamFormat.ProtoFormat.serializeBinaryToWriter
    );
  }
  f = message.getJsonFormat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feast.core.StreamFormat.JsonFormat.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.StreamFormat.ProtoFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.StreamFormat.ProtoFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.StreamFormat.ProtoFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.ProtoFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    classPath: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.StreamFormat.ProtoFormat}
 */
proto.feast.core.StreamFormat.ProtoFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.StreamFormat.ProtoFormat;
  return proto.feast.core.StreamFormat.ProtoFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.StreamFormat.ProtoFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.StreamFormat.ProtoFormat}
 */
proto.feast.core.StreamFormat.ProtoFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.StreamFormat.ProtoFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.StreamFormat.ProtoFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.StreamFormat.ProtoFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.ProtoFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string class_path = 1;
 * @return {string}
 */
proto.feast.core.StreamFormat.ProtoFormat.prototype.getClassPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.StreamFormat.ProtoFormat} returns this
 */
proto.feast.core.StreamFormat.ProtoFormat.prototype.setClassPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.StreamFormat.AvroFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.StreamFormat.AvroFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.StreamFormat.AvroFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.AvroFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    schemaJson: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.StreamFormat.AvroFormat}
 */
proto.feast.core.StreamFormat.AvroFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.StreamFormat.AvroFormat;
  return proto.feast.core.StreamFormat.AvroFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.StreamFormat.AvroFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.StreamFormat.AvroFormat}
 */
proto.feast.core.StreamFormat.AvroFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.StreamFormat.AvroFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.StreamFormat.AvroFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.StreamFormat.AvroFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.AvroFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchemaJson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string schema_json = 1;
 * @return {string}
 */
proto.feast.core.StreamFormat.AvroFormat.prototype.getSchemaJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.StreamFormat.AvroFormat} returns this
 */
proto.feast.core.StreamFormat.AvroFormat.prototype.setSchemaJson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.StreamFormat.JsonFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.StreamFormat.JsonFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.StreamFormat.JsonFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.JsonFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    schemaJson: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.StreamFormat.JsonFormat}
 */
proto.feast.core.StreamFormat.JsonFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.StreamFormat.JsonFormat;
  return proto.feast.core.StreamFormat.JsonFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.StreamFormat.JsonFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.StreamFormat.JsonFormat}
 */
proto.feast.core.StreamFormat.JsonFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.StreamFormat.JsonFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.StreamFormat.JsonFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.StreamFormat.JsonFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.StreamFormat.JsonFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchemaJson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string schema_json = 1;
 * @return {string}
 */
proto.feast.core.StreamFormat.JsonFormat.prototype.getSchemaJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.StreamFormat.JsonFormat} returns this
 */
proto.feast.core.StreamFormat.JsonFormat.prototype.setSchemaJson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AvroFormat avro_format = 1;
 * @return {?proto.feast.core.StreamFormat.AvroFormat}
 */
proto.feast.core.StreamFormat.prototype.getAvroFormat = function() {
  return /** @type{?proto.feast.core.StreamFormat.AvroFormat} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.StreamFormat.AvroFormat, 1));
};


/**
 * @param {?proto.feast.core.StreamFormat.AvroFormat|undefined} value
 * @return {!proto.feast.core.StreamFormat} returns this
*/
proto.feast.core.StreamFormat.prototype.setAvroFormat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.feast.core.StreamFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.StreamFormat} returns this
 */
proto.feast.core.StreamFormat.prototype.clearAvroFormat = function() {
  return this.setAvroFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.StreamFormat.prototype.hasAvroFormat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProtoFormat proto_format = 2;
 * @return {?proto.feast.core.StreamFormat.ProtoFormat}
 */
proto.feast.core.StreamFormat.prototype.getProtoFormat = function() {
  return /** @type{?proto.feast.core.StreamFormat.ProtoFormat} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.StreamFormat.ProtoFormat, 2));
};


/**
 * @param {?proto.feast.core.StreamFormat.ProtoFormat|undefined} value
 * @return {!proto.feast.core.StreamFormat} returns this
*/
proto.feast.core.StreamFormat.prototype.setProtoFormat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.feast.core.StreamFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.StreamFormat} returns this
 */
proto.feast.core.StreamFormat.prototype.clearProtoFormat = function() {
  return this.setProtoFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.StreamFormat.prototype.hasProtoFormat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional JsonFormat json_format = 3;
 * @return {?proto.feast.core.StreamFormat.JsonFormat}
 */
proto.feast.core.StreamFormat.prototype.getJsonFormat = function() {
  return /** @type{?proto.feast.core.StreamFormat.JsonFormat} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.StreamFormat.JsonFormat, 3));
};


/**
 * @param {?proto.feast.core.StreamFormat.JsonFormat|undefined} value
 * @return {!proto.feast.core.StreamFormat} returns this
*/
proto.feast.core.StreamFormat.prototype.setJsonFormat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.feast.core.StreamFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.StreamFormat} returns this
 */
proto.feast.core.StreamFormat.prototype.clearJsonFormat = function() {
  return this.setJsonFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.StreamFormat.prototype.hasJsonFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.feast.core);
