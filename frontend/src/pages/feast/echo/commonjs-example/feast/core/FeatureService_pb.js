// source: feast/core/FeatureService.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var feast_core_FeatureViewProjection_pb = require('../../feast/core/FeatureViewProjection_pb.js');
goog.object.extend(proto, feast_core_FeatureViewProjection_pb);
goog.exportSymbol('proto.feast.core.FeatureService', null, global);
goog.exportSymbol('proto.feast.core.FeatureServiceMeta', null, global);
goog.exportSymbol('proto.feast.core.FeatureServiceSpec', null, global);
goog.exportSymbol('proto.feast.core.LoggingConfig', null, global);
goog.exportSymbol('proto.feast.core.LoggingConfig.AthenaDestination', null, global);
goog.exportSymbol('proto.feast.core.LoggingConfig.BigQueryDestination', null, global);
goog.exportSymbol('proto.feast.core.LoggingConfig.CustomDestination', null, global);
goog.exportSymbol('proto.feast.core.LoggingConfig.DestinationCase', null, global);
goog.exportSymbol('proto.feast.core.LoggingConfig.FileDestination', null, global);
goog.exportSymbol('proto.feast.core.LoggingConfig.RedshiftDestination', null, global);
goog.exportSymbol('proto.feast.core.LoggingConfig.SnowflakeDestination', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.FeatureService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureService.displayName = 'proto.feast.core.FeatureService';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureServiceSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.FeatureServiceSpec.repeatedFields_, null);
};
goog.inherits(proto.feast.core.FeatureServiceSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureServiceSpec.displayName = 'proto.feast.core.FeatureServiceSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.FeatureServiceMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.FeatureServiceMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.FeatureServiceMeta.displayName = 'proto.feast.core.FeatureServiceMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.core.LoggingConfig.oneofGroups_);
};
goog.inherits(proto.feast.core.LoggingConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.displayName = 'proto.feast.core.LoggingConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig.FileDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.core.LoggingConfig.FileDestination.repeatedFields_, null);
};
goog.inherits(proto.feast.core.LoggingConfig.FileDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.FileDestination.displayName = 'proto.feast.core.LoggingConfig.FileDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig.BigQueryDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.LoggingConfig.BigQueryDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.BigQueryDestination.displayName = 'proto.feast.core.LoggingConfig.BigQueryDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig.RedshiftDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.LoggingConfig.RedshiftDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.RedshiftDestination.displayName = 'proto.feast.core.LoggingConfig.RedshiftDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig.AthenaDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.LoggingConfig.AthenaDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.AthenaDestination.displayName = 'proto.feast.core.LoggingConfig.AthenaDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig.SnowflakeDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.LoggingConfig.SnowflakeDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.SnowflakeDestination.displayName = 'proto.feast.core.LoggingConfig.SnowflakeDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.core.LoggingConfig.CustomDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.core.LoggingConfig.CustomDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.core.LoggingConfig.CustomDestination.displayName = 'proto.feast.core.LoggingConfig.CustomDestination';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureService.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureService.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.feast.core.FeatureServiceSpec.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.feast.core.FeatureServiceMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureService}
 */
proto.feast.core.FeatureService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureService;
  return proto.feast.core.FeatureService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureService}
 */
proto.feast.core.FeatureService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.core.FeatureServiceSpec;
      reader.readMessage(value,proto.feast.core.FeatureServiceSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.feast.core.FeatureServiceMeta;
      reader.readMessage(value,proto.feast.core.FeatureServiceMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feast.core.FeatureServiceSpec.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feast.core.FeatureServiceMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeatureServiceSpec spec = 1;
 * @return {?proto.feast.core.FeatureServiceSpec}
 */
proto.feast.core.FeatureService.prototype.getSpec = function() {
  return /** @type{?proto.feast.core.FeatureServiceSpec} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureServiceSpec, 1));
};


/**
 * @param {?proto.feast.core.FeatureServiceSpec|undefined} value
 * @return {!proto.feast.core.FeatureService} returns this
*/
proto.feast.core.FeatureService.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureService} returns this
 */
proto.feast.core.FeatureService.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureService.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FeatureServiceMeta meta = 2;
 * @return {?proto.feast.core.FeatureServiceMeta}
 */
proto.feast.core.FeatureService.prototype.getMeta = function() {
  return /** @type{?proto.feast.core.FeatureServiceMeta} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.FeatureServiceMeta, 2));
};


/**
 * @param {?proto.feast.core.FeatureServiceMeta|undefined} value
 * @return {!proto.feast.core.FeatureService} returns this
*/
proto.feast.core.FeatureService.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureService} returns this
 */
proto.feast.core.FeatureService.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureService.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.FeatureServiceSpec.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureServiceSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureServiceSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureServiceSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureServiceSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    feast_core_FeatureViewProjection_pb.FeatureViewProjection.toObject, includeInstance),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 6, ""),
    loggingConfig: (f = msg.getLoggingConfig()) && proto.feast.core.LoggingConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureServiceSpec}
 */
proto.feast.core.FeatureServiceSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureServiceSpec;
  return proto.feast.core.FeatureServiceSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureServiceSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureServiceSpec}
 */
proto.feast.core.FeatureServiceSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = new feast_core_FeatureViewProjection_pb.FeatureViewProjection;
      reader.readMessage(value,feast_core_FeatureViewProjection_pb.FeatureViewProjection.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 4:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 7:
      var value = new proto.feast.core.LoggingConfig;
      reader.readMessage(value,proto.feast.core.LoggingConfig.deserializeBinaryFromReader);
      msg.setLoggingConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureServiceSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureServiceSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureServiceSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureServiceSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      feast_core_FeatureViewProjection_pb.FeatureViewProjection.serializeBinaryToWriter
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLoggingConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.feast.core.LoggingConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.feast.core.FeatureServiceSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.feast.core.FeatureServiceSpec.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated FeatureViewProjection features = 3;
 * @return {!Array<!proto.feast.core.FeatureViewProjection>}
 */
proto.feast.core.FeatureServiceSpec.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.feast.core.FeatureViewProjection>} */ (
    jspb.Message.getRepeatedWrapperField(this, feast_core_FeatureViewProjection_pb.FeatureViewProjection, 3));
};


/**
 * @param {!Array<!proto.feast.core.FeatureViewProjection>} value
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
*/
proto.feast.core.FeatureServiceSpec.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.feast.core.FeatureViewProjection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.core.FeatureViewProjection}
 */
proto.feast.core.FeatureServiceSpec.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.feast.core.FeatureViewProjection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * map<string, string> tags = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.FeatureServiceSpec.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.feast.core.FeatureServiceSpec.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string owner = 6;
 * @return {string}
 */
proto.feast.core.FeatureServiceSpec.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional LoggingConfig logging_config = 7;
 * @return {?proto.feast.core.LoggingConfig}
 */
proto.feast.core.FeatureServiceSpec.prototype.getLoggingConfig = function() {
  return /** @type{?proto.feast.core.LoggingConfig} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig, 7));
};


/**
 * @param {?proto.feast.core.LoggingConfig|undefined} value
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
*/
proto.feast.core.FeatureServiceSpec.prototype.setLoggingConfig = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureServiceSpec} returns this
 */
proto.feast.core.FeatureServiceSpec.prototype.clearLoggingConfig = function() {
  return this.setLoggingConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureServiceSpec.prototype.hasLoggingConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.FeatureServiceMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.FeatureServiceMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.FeatureServiceMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureServiceMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdTimestamp: (f = msg.getCreatedTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lastUpdatedTimestamp: (f = msg.getLastUpdatedTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.FeatureServiceMeta}
 */
proto.feast.core.FeatureServiceMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.FeatureServiceMeta;
  return proto.feast.core.FeatureServiceMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.FeatureServiceMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.FeatureServiceMeta}
 */
proto.feast.core.FeatureServiceMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedTimestamp(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdatedTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.FeatureServiceMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.FeatureServiceMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.FeatureServiceMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.FeatureServiceMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp created_timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.FeatureServiceMeta.prototype.getCreatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.FeatureServiceMeta} returns this
*/
proto.feast.core.FeatureServiceMeta.prototype.setCreatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureServiceMeta} returns this
 */
proto.feast.core.FeatureServiceMeta.prototype.clearCreatedTimestamp = function() {
  return this.setCreatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureServiceMeta.prototype.hasCreatedTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp last_updated_timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.feast.core.FeatureServiceMeta.prototype.getLastUpdatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.feast.core.FeatureServiceMeta} returns this
*/
proto.feast.core.FeatureServiceMeta.prototype.setLastUpdatedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.FeatureServiceMeta} returns this
 */
proto.feast.core.FeatureServiceMeta.prototype.clearLastUpdatedTimestamp = function() {
  return this.setLastUpdatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.FeatureServiceMeta.prototype.hasLastUpdatedTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.core.LoggingConfig.oneofGroups_ = [[3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.feast.core.LoggingConfig.DestinationCase = {
  DESTINATION_NOT_SET: 0,
  FILE_DESTINATION: 3,
  BIGQUERY_DESTINATION: 4,
  REDSHIFT_DESTINATION: 5,
  SNOWFLAKE_DESTINATION: 6,
  CUSTOM_DESTINATION: 7,
  ATHENA_DESTINATION: 8
};

/**
 * @return {proto.feast.core.LoggingConfig.DestinationCase}
 */
proto.feast.core.LoggingConfig.prototype.getDestinationCase = function() {
  return /** @type {proto.feast.core.LoggingConfig.DestinationCase} */(jspb.Message.computeOneofCase(this, proto.feast.core.LoggingConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    sampleRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    fileDestination: (f = msg.getFileDestination()) && proto.feast.core.LoggingConfig.FileDestination.toObject(includeInstance, f),
    bigqueryDestination: (f = msg.getBigqueryDestination()) && proto.feast.core.LoggingConfig.BigQueryDestination.toObject(includeInstance, f),
    redshiftDestination: (f = msg.getRedshiftDestination()) && proto.feast.core.LoggingConfig.RedshiftDestination.toObject(includeInstance, f),
    snowflakeDestination: (f = msg.getSnowflakeDestination()) && proto.feast.core.LoggingConfig.SnowflakeDestination.toObject(includeInstance, f),
    customDestination: (f = msg.getCustomDestination()) && proto.feast.core.LoggingConfig.CustomDestination.toObject(includeInstance, f),
    athenaDestination: (f = msg.getAthenaDestination()) && proto.feast.core.LoggingConfig.AthenaDestination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig}
 */
proto.feast.core.LoggingConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig;
  return proto.feast.core.LoggingConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig}
 */
proto.feast.core.LoggingConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSampleRate(value);
      break;
    case 3:
      var value = new proto.feast.core.LoggingConfig.FileDestination;
      reader.readMessage(value,proto.feast.core.LoggingConfig.FileDestination.deserializeBinaryFromReader);
      msg.setFileDestination(value);
      break;
    case 4:
      var value = new proto.feast.core.LoggingConfig.BigQueryDestination;
      reader.readMessage(value,proto.feast.core.LoggingConfig.BigQueryDestination.deserializeBinaryFromReader);
      msg.setBigqueryDestination(value);
      break;
    case 5:
      var value = new proto.feast.core.LoggingConfig.RedshiftDestination;
      reader.readMessage(value,proto.feast.core.LoggingConfig.RedshiftDestination.deserializeBinaryFromReader);
      msg.setRedshiftDestination(value);
      break;
    case 6:
      var value = new proto.feast.core.LoggingConfig.SnowflakeDestination;
      reader.readMessage(value,proto.feast.core.LoggingConfig.SnowflakeDestination.deserializeBinaryFromReader);
      msg.setSnowflakeDestination(value);
      break;
    case 7:
      var value = new proto.feast.core.LoggingConfig.CustomDestination;
      reader.readMessage(value,proto.feast.core.LoggingConfig.CustomDestination.deserializeBinaryFromReader);
      msg.setCustomDestination(value);
      break;
    case 8:
      var value = new proto.feast.core.LoggingConfig.AthenaDestination;
      reader.readMessage(value,proto.feast.core.LoggingConfig.AthenaDestination.deserializeBinaryFromReader);
      msg.setAthenaDestination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSampleRate();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getFileDestination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feast.core.LoggingConfig.FileDestination.serializeBinaryToWriter
    );
  }
  f = message.getBigqueryDestination();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.feast.core.LoggingConfig.BigQueryDestination.serializeBinaryToWriter
    );
  }
  f = message.getRedshiftDestination();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.feast.core.LoggingConfig.RedshiftDestination.serializeBinaryToWriter
    );
  }
  f = message.getSnowflakeDestination();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.feast.core.LoggingConfig.SnowflakeDestination.serializeBinaryToWriter
    );
  }
  f = message.getCustomDestination();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.feast.core.LoggingConfig.CustomDestination.serializeBinaryToWriter
    );
  }
  f = message.getAthenaDestination();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.feast.core.LoggingConfig.AthenaDestination.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.core.LoggingConfig.FileDestination.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.FileDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig.FileDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.FileDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    s3EndpointOverride: jspb.Message.getFieldWithDefault(msg, 2, ""),
    partitionByList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig.FileDestination}
 */
proto.feast.core.LoggingConfig.FileDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig.FileDestination;
  return proto.feast.core.LoggingConfig.FileDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig.FileDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig.FileDestination}
 */
proto.feast.core.LoggingConfig.FileDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3EndpointOverride(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPartitionBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.FileDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig.FileDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.FileDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getS3EndpointOverride();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPartitionByList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.FileDestination} returns this
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string s3_endpoint_override = 2;
 * @return {string}
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.getS3EndpointOverride = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.FileDestination} returns this
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.setS3EndpointOverride = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string partition_by = 3;
 * @return {!Array<string>}
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.getPartitionByList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.feast.core.LoggingConfig.FileDestination} returns this
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.setPartitionByList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.feast.core.LoggingConfig.FileDestination} returns this
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.addPartitionBy = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.core.LoggingConfig.FileDestination} returns this
 */
proto.feast.core.LoggingConfig.FileDestination.prototype.clearPartitionByList = function() {
  return this.setPartitionByList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.BigQueryDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.BigQueryDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig.BigQueryDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.BigQueryDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableRef: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig.BigQueryDestination}
 */
proto.feast.core.LoggingConfig.BigQueryDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig.BigQueryDestination;
  return proto.feast.core.LoggingConfig.BigQueryDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig.BigQueryDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig.BigQueryDestination}
 */
proto.feast.core.LoggingConfig.BigQueryDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.BigQueryDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.BigQueryDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig.BigQueryDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.BigQueryDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_ref = 1;
 * @return {string}
 */
proto.feast.core.LoggingConfig.BigQueryDestination.prototype.getTableRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.BigQueryDestination} returns this
 */
proto.feast.core.LoggingConfig.BigQueryDestination.prototype.setTableRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.RedshiftDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.RedshiftDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig.RedshiftDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.RedshiftDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig.RedshiftDestination}
 */
proto.feast.core.LoggingConfig.RedshiftDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig.RedshiftDestination;
  return proto.feast.core.LoggingConfig.RedshiftDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig.RedshiftDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig.RedshiftDestination}
 */
proto.feast.core.LoggingConfig.RedshiftDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.RedshiftDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.RedshiftDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig.RedshiftDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.RedshiftDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.feast.core.LoggingConfig.RedshiftDestination.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.RedshiftDestination} returns this
 */
proto.feast.core.LoggingConfig.RedshiftDestination.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.AthenaDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.AthenaDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig.AthenaDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.AthenaDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig.AthenaDestination}
 */
proto.feast.core.LoggingConfig.AthenaDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig.AthenaDestination;
  return proto.feast.core.LoggingConfig.AthenaDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig.AthenaDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig.AthenaDestination}
 */
proto.feast.core.LoggingConfig.AthenaDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.AthenaDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.AthenaDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig.AthenaDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.AthenaDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.feast.core.LoggingConfig.AthenaDestination.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.AthenaDestination} returns this
 */
proto.feast.core.LoggingConfig.AthenaDestination.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.SnowflakeDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig.SnowflakeDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig.SnowflakeDestination}
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig.SnowflakeDestination;
  return proto.feast.core.LoggingConfig.SnowflakeDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig.SnowflakeDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig.SnowflakeDestination}
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.SnowflakeDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig.SnowflakeDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.SnowflakeDestination} returns this
 */
proto.feast.core.LoggingConfig.SnowflakeDestination.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.core.LoggingConfig.CustomDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.core.LoggingConfig.CustomDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.core.LoggingConfig.CustomDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.CustomDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, ""),
    configMap: (f = msg.getConfigMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.core.LoggingConfig.CustomDestination}
 */
proto.feast.core.LoggingConfig.CustomDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.core.LoggingConfig.CustomDestination;
  return proto.feast.core.LoggingConfig.CustomDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.core.LoggingConfig.CustomDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.core.LoggingConfig.CustomDestination}
 */
proto.feast.core.LoggingConfig.CustomDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 2:
      var value = msg.getConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.core.LoggingConfig.CustomDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.core.LoggingConfig.CustomDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.core.LoggingConfig.CustomDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.core.LoggingConfig.CustomDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string kind = 1;
 * @return {string}
 */
proto.feast.core.LoggingConfig.CustomDestination.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.core.LoggingConfig.CustomDestination} returns this
 */
proto.feast.core.LoggingConfig.CustomDestination.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> config = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.feast.core.LoggingConfig.CustomDestination.prototype.getConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.feast.core.LoggingConfig.CustomDestination} returns this
 */
proto.feast.core.LoggingConfig.CustomDestination.prototype.clearConfigMap = function() {
  this.getConfigMap().clear();
  return this;
};


/**
 * optional float sample_rate = 1;
 * @return {number}
 */
proto.feast.core.LoggingConfig.prototype.getSampleRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.setSampleRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional FileDestination file_destination = 3;
 * @return {?proto.feast.core.LoggingConfig.FileDestination}
 */
proto.feast.core.LoggingConfig.prototype.getFileDestination = function() {
  return /** @type{?proto.feast.core.LoggingConfig.FileDestination} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig.FileDestination, 3));
};


/**
 * @param {?proto.feast.core.LoggingConfig.FileDestination|undefined} value
 * @return {!proto.feast.core.LoggingConfig} returns this
*/
proto.feast.core.LoggingConfig.prototype.setFileDestination = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.feast.core.LoggingConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.clearFileDestination = function() {
  return this.setFileDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.LoggingConfig.prototype.hasFileDestination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BigQueryDestination bigquery_destination = 4;
 * @return {?proto.feast.core.LoggingConfig.BigQueryDestination}
 */
proto.feast.core.LoggingConfig.prototype.getBigqueryDestination = function() {
  return /** @type{?proto.feast.core.LoggingConfig.BigQueryDestination} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig.BigQueryDestination, 4));
};


/**
 * @param {?proto.feast.core.LoggingConfig.BigQueryDestination|undefined} value
 * @return {!proto.feast.core.LoggingConfig} returns this
*/
proto.feast.core.LoggingConfig.prototype.setBigqueryDestination = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.feast.core.LoggingConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.clearBigqueryDestination = function() {
  return this.setBigqueryDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.LoggingConfig.prototype.hasBigqueryDestination = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RedshiftDestination redshift_destination = 5;
 * @return {?proto.feast.core.LoggingConfig.RedshiftDestination}
 */
proto.feast.core.LoggingConfig.prototype.getRedshiftDestination = function() {
  return /** @type{?proto.feast.core.LoggingConfig.RedshiftDestination} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig.RedshiftDestination, 5));
};


/**
 * @param {?proto.feast.core.LoggingConfig.RedshiftDestination|undefined} value
 * @return {!proto.feast.core.LoggingConfig} returns this
*/
proto.feast.core.LoggingConfig.prototype.setRedshiftDestination = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.feast.core.LoggingConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.clearRedshiftDestination = function() {
  return this.setRedshiftDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.LoggingConfig.prototype.hasRedshiftDestination = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SnowflakeDestination snowflake_destination = 6;
 * @return {?proto.feast.core.LoggingConfig.SnowflakeDestination}
 */
proto.feast.core.LoggingConfig.prototype.getSnowflakeDestination = function() {
  return /** @type{?proto.feast.core.LoggingConfig.SnowflakeDestination} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig.SnowflakeDestination, 6));
};


/**
 * @param {?proto.feast.core.LoggingConfig.SnowflakeDestination|undefined} value
 * @return {!proto.feast.core.LoggingConfig} returns this
*/
proto.feast.core.LoggingConfig.prototype.setSnowflakeDestination = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.feast.core.LoggingConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.clearSnowflakeDestination = function() {
  return this.setSnowflakeDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.LoggingConfig.prototype.hasSnowflakeDestination = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CustomDestination custom_destination = 7;
 * @return {?proto.feast.core.LoggingConfig.CustomDestination}
 */
proto.feast.core.LoggingConfig.prototype.getCustomDestination = function() {
  return /** @type{?proto.feast.core.LoggingConfig.CustomDestination} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig.CustomDestination, 7));
};


/**
 * @param {?proto.feast.core.LoggingConfig.CustomDestination|undefined} value
 * @return {!proto.feast.core.LoggingConfig} returns this
*/
proto.feast.core.LoggingConfig.prototype.setCustomDestination = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.feast.core.LoggingConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.clearCustomDestination = function() {
  return this.setCustomDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.LoggingConfig.prototype.hasCustomDestination = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional AthenaDestination athena_destination = 8;
 * @return {?proto.feast.core.LoggingConfig.AthenaDestination}
 */
proto.feast.core.LoggingConfig.prototype.getAthenaDestination = function() {
  return /** @type{?proto.feast.core.LoggingConfig.AthenaDestination} */ (
    jspb.Message.getWrapperField(this, proto.feast.core.LoggingConfig.AthenaDestination, 8));
};


/**
 * @param {?proto.feast.core.LoggingConfig.AthenaDestination|undefined} value
 * @return {!proto.feast.core.LoggingConfig} returns this
*/
proto.feast.core.LoggingConfig.prototype.setAthenaDestination = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.feast.core.LoggingConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.core.LoggingConfig} returns this
 */
proto.feast.core.LoggingConfig.prototype.clearAthenaDestination = function() {
  return this.setAthenaDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.core.LoggingConfig.prototype.hasAthenaDestination = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.feast.core);
