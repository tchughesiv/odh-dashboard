// source: feast/types/Value.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.feast.types.BoolList', null, global);
goog.exportSymbol('proto.feast.types.BytesList', null, global);
goog.exportSymbol('proto.feast.types.DoubleList', null, global);
goog.exportSymbol('proto.feast.types.FloatList', null, global);
goog.exportSymbol('proto.feast.types.Int32List', null, global);
goog.exportSymbol('proto.feast.types.Int64List', null, global);
goog.exportSymbol('proto.feast.types.Null', null, global);
goog.exportSymbol('proto.feast.types.RepeatedValue', null, global);
goog.exportSymbol('proto.feast.types.StringList', null, global);
goog.exportSymbol('proto.feast.types.Value', null, global);
goog.exportSymbol('proto.feast.types.Value.ValCase', null, global);
goog.exportSymbol('proto.feast.types.ValueType', null, global);
goog.exportSymbol('proto.feast.types.ValueType.Enum', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.ValueType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feast.types.ValueType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.ValueType.displayName = 'proto.feast.types.ValueType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feast.types.Value.oneofGroups_);
};
goog.inherits(proto.feast.types.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.Value.displayName = 'proto.feast.types.Value';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.BytesList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.BytesList.repeatedFields_, null);
};
goog.inherits(proto.feast.types.BytesList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.BytesList.displayName = 'proto.feast.types.BytesList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.StringList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.StringList.repeatedFields_, null);
};
goog.inherits(proto.feast.types.StringList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.StringList.displayName = 'proto.feast.types.StringList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.Int32List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.Int32List.repeatedFields_, null);
};
goog.inherits(proto.feast.types.Int32List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.Int32List.displayName = 'proto.feast.types.Int32List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.Int64List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.Int64List.repeatedFields_, null);
};
goog.inherits(proto.feast.types.Int64List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.Int64List.displayName = 'proto.feast.types.Int64List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.DoubleList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.DoubleList.repeatedFields_, null);
};
goog.inherits(proto.feast.types.DoubleList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.DoubleList.displayName = 'proto.feast.types.DoubleList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.FloatList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.FloatList.repeatedFields_, null);
};
goog.inherits(proto.feast.types.FloatList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.FloatList.displayName = 'proto.feast.types.FloatList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.BoolList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.BoolList.repeatedFields_, null);
};
goog.inherits(proto.feast.types.BoolList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.BoolList.displayName = 'proto.feast.types.BoolList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feast.types.RepeatedValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feast.types.RepeatedValue.repeatedFields_, null);
};
goog.inherits(proto.feast.types.RepeatedValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feast.types.RepeatedValue.displayName = 'proto.feast.types.RepeatedValue';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.ValueType.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.ValueType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.ValueType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.ValueType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.ValueType}
 */
proto.feast.types.ValueType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.ValueType;
  return proto.feast.types.ValueType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.ValueType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.ValueType}
 */
proto.feast.types.ValueType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.ValueType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.ValueType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.ValueType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.ValueType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.feast.types.ValueType.Enum = {
  INVALID: 0,
  BYTES: 1,
  STRING: 2,
  INT32: 3,
  INT64: 4,
  DOUBLE: 5,
  FLOAT: 6,
  BOOL: 7,
  UNIX_TIMESTAMP: 8,
  BYTES_LIST: 11,
  STRING_LIST: 12,
  INT32_LIST: 13,
  INT64_LIST: 14,
  DOUBLE_LIST: 15,
  FLOAT_LIST: 16,
  BOOL_LIST: 17,
  UNIX_TIMESTAMP_LIST: 18,
  NULL: 19
};


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feast.types.Value.oneofGroups_ = [[1,2,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19]];

/**
 * @enum {number}
 */
proto.feast.types.Value.ValCase = {
  VAL_NOT_SET: 0,
  BYTES_VAL: 1,
  STRING_VAL: 2,
  INT32_VAL: 3,
  INT64_VAL: 4,
  DOUBLE_VAL: 5,
  FLOAT_VAL: 6,
  BOOL_VAL: 7,
  UNIX_TIMESTAMP_VAL: 8,
  BYTES_LIST_VAL: 11,
  STRING_LIST_VAL: 12,
  INT32_LIST_VAL: 13,
  INT64_LIST_VAL: 14,
  DOUBLE_LIST_VAL: 15,
  FLOAT_LIST_VAL: 16,
  BOOL_LIST_VAL: 17,
  UNIX_TIMESTAMP_LIST_VAL: 18,
  NULL_VAL: 19
};

/**
 * @return {proto.feast.types.Value.ValCase}
 */
proto.feast.types.Value.prototype.getValCase = function() {
  return /** @type {proto.feast.types.Value.ValCase} */(jspb.Message.computeOneofCase(this, proto.feast.types.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytesVal: msg.getBytesVal_asB64(),
    stringVal: jspb.Message.getFieldWithDefault(msg, 2, ""),
    int32Val: jspb.Message.getFieldWithDefault(msg, 3, 0),
    int64Val: jspb.Message.getFieldWithDefault(msg, 4, 0),
    doubleVal: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    floatVal: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    boolVal: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    unixTimestampVal: jspb.Message.getFieldWithDefault(msg, 8, 0),
    bytesListVal: (f = msg.getBytesListVal()) && proto.feast.types.BytesList.toObject(includeInstance, f),
    stringListVal: (f = msg.getStringListVal()) && proto.feast.types.StringList.toObject(includeInstance, f),
    int32ListVal: (f = msg.getInt32ListVal()) && proto.feast.types.Int32List.toObject(includeInstance, f),
    int64ListVal: (f = msg.getInt64ListVal()) && proto.feast.types.Int64List.toObject(includeInstance, f),
    doubleListVal: (f = msg.getDoubleListVal()) && proto.feast.types.DoubleList.toObject(includeInstance, f),
    floatListVal: (f = msg.getFloatListVal()) && proto.feast.types.FloatList.toObject(includeInstance, f),
    boolListVal: (f = msg.getBoolListVal()) && proto.feast.types.BoolList.toObject(includeInstance, f),
    unixTimestampListVal: (f = msg.getUnixTimestampListVal()) && proto.feast.types.Int64List.toObject(includeInstance, f),
    nullVal: jspb.Message.getFieldWithDefault(msg, 19, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.Value}
 */
proto.feast.types.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.Value;
  return proto.feast.types.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.Value}
 */
proto.feast.types.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesVal(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringVal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt32Val(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64Val(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleVal(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatVal(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolVal(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnixTimestampVal(value);
      break;
    case 11:
      var value = new proto.feast.types.BytesList;
      reader.readMessage(value,proto.feast.types.BytesList.deserializeBinaryFromReader);
      msg.setBytesListVal(value);
      break;
    case 12:
      var value = new proto.feast.types.StringList;
      reader.readMessage(value,proto.feast.types.StringList.deserializeBinaryFromReader);
      msg.setStringListVal(value);
      break;
    case 13:
      var value = new proto.feast.types.Int32List;
      reader.readMessage(value,proto.feast.types.Int32List.deserializeBinaryFromReader);
      msg.setInt32ListVal(value);
      break;
    case 14:
      var value = new proto.feast.types.Int64List;
      reader.readMessage(value,proto.feast.types.Int64List.deserializeBinaryFromReader);
      msg.setInt64ListVal(value);
      break;
    case 15:
      var value = new proto.feast.types.DoubleList;
      reader.readMessage(value,proto.feast.types.DoubleList.deserializeBinaryFromReader);
      msg.setDoubleListVal(value);
      break;
    case 16:
      var value = new proto.feast.types.FloatList;
      reader.readMessage(value,proto.feast.types.FloatList.deserializeBinaryFromReader);
      msg.setFloatListVal(value);
      break;
    case 17:
      var value = new proto.feast.types.BoolList;
      reader.readMessage(value,proto.feast.types.BoolList.deserializeBinaryFromReader);
      msg.setBoolListVal(value);
      break;
    case 18:
      var value = new proto.feast.types.Int64List;
      reader.readMessage(value,proto.feast.types.Int64List.deserializeBinaryFromReader);
      msg.setUnixTimestampListVal(value);
      break;
    case 19:
      var value = /** @type {!proto.feast.types.Null} */ (reader.readEnum());
      msg.setNullVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getBytesListVal();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.feast.types.BytesList.serializeBinaryToWriter
    );
  }
  f = message.getStringListVal();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.feast.types.StringList.serializeBinaryToWriter
    );
  }
  f = message.getInt32ListVal();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.feast.types.Int32List.serializeBinaryToWriter
    );
  }
  f = message.getInt64ListVal();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.feast.types.Int64List.serializeBinaryToWriter
    );
  }
  f = message.getDoubleListVal();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.feast.types.DoubleList.serializeBinaryToWriter
    );
  }
  f = message.getFloatListVal();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.feast.types.FloatList.serializeBinaryToWriter
    );
  }
  f = message.getBoolListVal();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.feast.types.BoolList.serializeBinaryToWriter
    );
  }
  f = message.getUnixTimestampListVal();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.feast.types.Int64List.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.feast.types.Null} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeEnum(
      19,
      f
    );
  }
};


/**
 * optional bytes bytes_val = 1;
 * @return {string}
 */
proto.feast.types.Value.prototype.getBytesVal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytes_val = 1;
 * This is a type-conversion wrapper around `getBytesVal()`
 * @return {string}
 */
proto.feast.types.Value.prototype.getBytesVal_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesVal()));
};


/**
 * optional bytes bytes_val = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesVal()`
 * @return {!Uint8Array}
 */
proto.feast.types.Value.prototype.getBytesVal_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesVal()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setBytesVal = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearBytesVal = function() {
  return jspb.Message.setOneofField(this, 1, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasBytesVal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string string_val = 2;
 * @return {string}
 */
proto.feast.types.Value.prototype.getStringVal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setStringVal = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearStringVal = function() {
  return jspb.Message.setOneofField(this, 2, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasStringVal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 int32_val = 3;
 * @return {number}
 */
proto.feast.types.Value.prototype.getInt32Val = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setInt32Val = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearInt32Val = function() {
  return jspb.Message.setOneofField(this, 3, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasInt32Val = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 int64_val = 4;
 * @return {number}
 */
proto.feast.types.Value.prototype.getInt64Val = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setInt64Val = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearInt64Val = function() {
  return jspb.Message.setOneofField(this, 4, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasInt64Val = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double double_val = 5;
 * @return {number}
 */
proto.feast.types.Value.prototype.getDoubleVal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setDoubleVal = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearDoubleVal = function() {
  return jspb.Message.setOneofField(this, 5, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasDoubleVal = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float float_val = 6;
 * @return {number}
 */
proto.feast.types.Value.prototype.getFloatVal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setFloatVal = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearFloatVal = function() {
  return jspb.Message.setOneofField(this, 6, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasFloatVal = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool bool_val = 7;
 * @return {boolean}
 */
proto.feast.types.Value.prototype.getBoolVal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setBoolVal = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearBoolVal = function() {
  return jspb.Message.setOneofField(this, 7, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasBoolVal = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 unix_timestamp_val = 8;
 * @return {number}
 */
proto.feast.types.Value.prototype.getUnixTimestampVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setUnixTimestampVal = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearUnixTimestampVal = function() {
  return jspb.Message.setOneofField(this, 8, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasUnixTimestampVal = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional BytesList bytes_list_val = 11;
 * @return {?proto.feast.types.BytesList}
 */
proto.feast.types.Value.prototype.getBytesListVal = function() {
  return /** @type{?proto.feast.types.BytesList} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.BytesList, 11));
};


/**
 * @param {?proto.feast.types.BytesList|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setBytesListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearBytesListVal = function() {
  return this.setBytesListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasBytesListVal = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional StringList string_list_val = 12;
 * @return {?proto.feast.types.StringList}
 */
proto.feast.types.Value.prototype.getStringListVal = function() {
  return /** @type{?proto.feast.types.StringList} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.StringList, 12));
};


/**
 * @param {?proto.feast.types.StringList|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setStringListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearStringListVal = function() {
  return this.setStringListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasStringListVal = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Int32List int32_list_val = 13;
 * @return {?proto.feast.types.Int32List}
 */
proto.feast.types.Value.prototype.getInt32ListVal = function() {
  return /** @type{?proto.feast.types.Int32List} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.Int32List, 13));
};


/**
 * @param {?proto.feast.types.Int32List|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setInt32ListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearInt32ListVal = function() {
  return this.setInt32ListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasInt32ListVal = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Int64List int64_list_val = 14;
 * @return {?proto.feast.types.Int64List}
 */
proto.feast.types.Value.prototype.getInt64ListVal = function() {
  return /** @type{?proto.feast.types.Int64List} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.Int64List, 14));
};


/**
 * @param {?proto.feast.types.Int64List|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setInt64ListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearInt64ListVal = function() {
  return this.setInt64ListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasInt64ListVal = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional DoubleList double_list_val = 15;
 * @return {?proto.feast.types.DoubleList}
 */
proto.feast.types.Value.prototype.getDoubleListVal = function() {
  return /** @type{?proto.feast.types.DoubleList} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.DoubleList, 15));
};


/**
 * @param {?proto.feast.types.DoubleList|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setDoubleListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearDoubleListVal = function() {
  return this.setDoubleListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasDoubleListVal = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional FloatList float_list_val = 16;
 * @return {?proto.feast.types.FloatList}
 */
proto.feast.types.Value.prototype.getFloatListVal = function() {
  return /** @type{?proto.feast.types.FloatList} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.FloatList, 16));
};


/**
 * @param {?proto.feast.types.FloatList|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setFloatListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearFloatListVal = function() {
  return this.setFloatListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasFloatListVal = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional BoolList bool_list_val = 17;
 * @return {?proto.feast.types.BoolList}
 */
proto.feast.types.Value.prototype.getBoolListVal = function() {
  return /** @type{?proto.feast.types.BoolList} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.BoolList, 17));
};


/**
 * @param {?proto.feast.types.BoolList|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setBoolListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearBoolListVal = function() {
  return this.setBoolListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasBoolListVal = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Int64List unix_timestamp_list_val = 18;
 * @return {?proto.feast.types.Int64List}
 */
proto.feast.types.Value.prototype.getUnixTimestampListVal = function() {
  return /** @type{?proto.feast.types.Int64List} */ (
    jspb.Message.getWrapperField(this, proto.feast.types.Int64List, 18));
};


/**
 * @param {?proto.feast.types.Int64List|undefined} value
 * @return {!proto.feast.types.Value} returns this
*/
proto.feast.types.Value.prototype.setUnixTimestampListVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearUnixTimestampListVal = function() {
  return this.setUnixTimestampListVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasUnixTimestampListVal = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional Null null_val = 19;
 * @return {!proto.feast.types.Null}
 */
proto.feast.types.Value.prototype.getNullVal = function() {
  return /** @type {!proto.feast.types.Null} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {!proto.feast.types.Null} value
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.setNullVal = function(value) {
  return jspb.Message.setOneofField(this, 19, proto.feast.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feast.types.Value} returns this
 */
proto.feast.types.Value.prototype.clearNullVal = function() {
  return jspb.Message.setOneofField(this, 19, proto.feast.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feast.types.Value.prototype.hasNullVal = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.BytesList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.BytesList.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.BytesList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.BytesList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.BytesList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: msg.getValList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.BytesList}
 */
proto.feast.types.BytesList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.BytesList;
  return proto.feast.types.BytesList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.BytesList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.BytesList}
 */
proto.feast.types.BytesList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.BytesList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.BytesList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.BytesList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.BytesList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes val = 1;
 * @return {!Array<string>}
 */
proto.feast.types.BytesList.prototype.getValList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes val = 1;
 * This is a type-conversion wrapper around `getValList()`
 * @return {!Array<string>}
 */
proto.feast.types.BytesList.prototype.getValList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getValList()));
};


/**
 * repeated bytes val = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValList()`
 * @return {!Array<!Uint8Array>}
 */
proto.feast.types.BytesList.prototype.getValList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getValList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.feast.types.BytesList} returns this
 */
proto.feast.types.BytesList.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.BytesList} returns this
 */
proto.feast.types.BytesList.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.BytesList} returns this
 */
proto.feast.types.BytesList.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.StringList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.StringList.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.StringList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.StringList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.StringList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.StringList}
 */
proto.feast.types.StringList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.StringList;
  return proto.feast.types.StringList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.StringList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.StringList}
 */
proto.feast.types.StringList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.StringList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.StringList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.StringList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.StringList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string val = 1;
 * @return {!Array<string>}
 */
proto.feast.types.StringList.prototype.getValList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.feast.types.StringList} returns this
 */
proto.feast.types.StringList.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.StringList} returns this
 */
proto.feast.types.StringList.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.StringList} returns this
 */
proto.feast.types.StringList.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.Int32List.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.Int32List.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.Int32List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.Int32List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Int32List.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.Int32List}
 */
proto.feast.types.Int32List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.Int32List;
  return proto.feast.types.Int32List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.Int32List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.Int32List}
 */
proto.feast.types.Int32List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVal(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.Int32List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.Int32List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.Int32List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Int32List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 val = 1;
 * @return {!Array<number>}
 */
proto.feast.types.Int32List.prototype.getValList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.feast.types.Int32List} returns this
 */
proto.feast.types.Int32List.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.Int32List} returns this
 */
proto.feast.types.Int32List.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.Int32List} returns this
 */
proto.feast.types.Int32List.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.Int64List.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.Int64List.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.Int64List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.Int64List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Int64List.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.Int64List}
 */
proto.feast.types.Int64List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.Int64List;
  return proto.feast.types.Int64List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.Int64List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.Int64List}
 */
proto.feast.types.Int64List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVal(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.Int64List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.Int64List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.Int64List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.Int64List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 val = 1;
 * @return {!Array<number>}
 */
proto.feast.types.Int64List.prototype.getValList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.feast.types.Int64List} returns this
 */
proto.feast.types.Int64List.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.Int64List} returns this
 */
proto.feast.types.Int64List.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.Int64List} returns this
 */
proto.feast.types.Int64List.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.DoubleList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.DoubleList.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.DoubleList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.DoubleList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.DoubleList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.DoubleList}
 */
proto.feast.types.DoubleList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.DoubleList;
  return proto.feast.types.DoubleList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.DoubleList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.DoubleList}
 */
proto.feast.types.DoubleList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVal(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.DoubleList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.DoubleList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.DoubleList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.DoubleList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double val = 1;
 * @return {!Array<number>}
 */
proto.feast.types.DoubleList.prototype.getValList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.feast.types.DoubleList} returns this
 */
proto.feast.types.DoubleList.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.DoubleList} returns this
 */
proto.feast.types.DoubleList.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.DoubleList} returns this
 */
proto.feast.types.DoubleList.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.FloatList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.FloatList.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.FloatList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.FloatList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.FloatList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.FloatList}
 */
proto.feast.types.FloatList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.FloatList;
  return proto.feast.types.FloatList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.FloatList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.FloatList}
 */
proto.feast.types.FloatList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVal(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.FloatList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.FloatList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.FloatList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.FloatList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float val = 1;
 * @return {!Array<number>}
 */
proto.feast.types.FloatList.prototype.getValList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.feast.types.FloatList} returns this
 */
proto.feast.types.FloatList.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.FloatList} returns this
 */
proto.feast.types.FloatList.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.FloatList} returns this
 */
proto.feast.types.FloatList.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.BoolList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.BoolList.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.BoolList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.BoolList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.BoolList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: (f = jspb.Message.getRepeatedBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.BoolList}
 */
proto.feast.types.BoolList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.BoolList;
  return proto.feast.types.BoolList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.BoolList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.BoolList}
 */
proto.feast.types.BoolList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVal(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.BoolList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.BoolList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.BoolList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.BoolList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writePackedBool(
      1,
      f
    );
  }
};


/**
 * repeated bool val = 1;
 * @return {!Array<boolean>}
 */
proto.feast.types.BoolList.prototype.getValList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 1));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.feast.types.BoolList} returns this
 */
proto.feast.types.BoolList.prototype.setValList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.feast.types.BoolList} returns this
 */
proto.feast.types.BoolList.prototype.addVal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.BoolList} returns this
 */
proto.feast.types.BoolList.prototype.clearValList = function() {
  return this.setValList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feast.types.RepeatedValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feast.types.RepeatedValue.prototype.toObject = function(opt_includeInstance) {
  return proto.feast.types.RepeatedValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feast.types.RepeatedValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.RepeatedValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: jspb.Message.toObjectList(msg.getValList(),
    proto.feast.types.Value.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feast.types.RepeatedValue}
 */
proto.feast.types.RepeatedValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feast.types.RepeatedValue;
  return proto.feast.types.RepeatedValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feast.types.RepeatedValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feast.types.RepeatedValue}
 */
proto.feast.types.RepeatedValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feast.types.Value;
      reader.readMessage(value,proto.feast.types.Value.deserializeBinaryFromReader);
      msg.addVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feast.types.RepeatedValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feast.types.RepeatedValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feast.types.RepeatedValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feast.types.RepeatedValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feast.types.Value.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Value val = 1;
 * @return {!Array<!proto.feast.types.Value>}
 */
proto.feast.types.RepeatedValue.prototype.getValList = function() {
  return /** @type{!Array<!proto.feast.types.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feast.types.Value, 1));
};


/**
 * @param {!Array<!proto.feast.types.Value>} value
 * @return {!proto.feast.types.RepeatedValue} returns this
*/
proto.feast.types.RepeatedValue.prototype.setValList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feast.types.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feast.types.Value}
 */
proto.feast.types.RepeatedValue.prototype.addVal = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feast.types.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feast.types.RepeatedValue} returns this
 */
proto.feast.types.RepeatedValue.prototype.clearValList = function() {
  return this.setValList([]);
};


/**
 * @enum {number}
 */
proto.feast.types.Null = {
  NULL: 0
};

goog.object.extend(exports, proto.feast.types);
