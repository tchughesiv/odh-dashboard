/**
 * @fileoverview gRPC-Web generated client stub for feast.registry
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.0
// source: feast/registry/RegistryServer.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')

var feast_core_Registry_pb = require('../../feast/core/Registry_pb.js')

var feast_core_Entity_pb = require('../../feast/core/Entity_pb.js')

var feast_core_DataSource_pb = require('../../feast/core/DataSource_pb.js')

var feast_core_FeatureView_pb = require('../../feast/core/FeatureView_pb.js')

var feast_core_StreamFeatureView_pb = require('../../feast/core/StreamFeatureView_pb.js')

var feast_core_OnDemandFeatureView_pb = require('../../feast/core/OnDemandFeatureView_pb.js')

var feast_core_FeatureService_pb = require('../../feast/core/FeatureService_pb.js')

var feast_core_SavedDataset_pb = require('../../feast/core/SavedDataset_pb.js')

var feast_core_ValidationProfile_pb = require('../../feast/core/ValidationProfile_pb.js')

var feast_core_InfraObject_pb = require('../../feast/core/InfraObject_pb.js')
const proto = {};
proto.feast = {};
proto.feast.registry = require('./RegistryServer_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.feast.registry.RegistryServerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.feast.registry.RegistryServerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ApplyEntityRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_ApplyEntity = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ApplyEntity',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ApplyEntityRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.ApplyEntityRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ApplyEntityRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.applyEntity =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplyEntity',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplyEntity,
      callback);
};


/**
 * @param {!proto.feast.registry.ApplyEntityRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.applyEntity =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplyEntity',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplyEntity);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.GetEntityRequest,
 *   !proto.feast.core.Entity>}
 */
const methodDescriptor_RegistryServer_GetEntity = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/GetEntity',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.GetEntityRequest,
  feast_core_Entity_pb.Entity,
  /**
   * @param {!proto.feast.registry.GetEntityRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  feast_core_Entity_pb.Entity.deserializeBinary
);


/**
 * @param {!proto.feast.registry.GetEntityRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.core.Entity)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.core.Entity>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.getEntity =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetEntity',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetEntity,
      callback);
};


/**
 * @param {!proto.feast.registry.GetEntityRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.core.Entity>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.getEntity =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetEntity',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetEntity);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ListEntitiesRequest,
 *   !proto.feast.registry.ListEntitiesResponse>}
 */
const methodDescriptor_RegistryServer_ListEntities = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ListEntities',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ListEntitiesRequest,
  proto.feast.registry.ListEntitiesResponse,
  /**
   * @param {!proto.feast.registry.ListEntitiesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.feast.registry.ListEntitiesResponse.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ListEntitiesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.registry.ListEntitiesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.registry.ListEntitiesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.listEntities =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListEntities',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListEntities,
      callback);
};


/**
 * @param {!proto.feast.registry.ListEntitiesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.registry.ListEntitiesResponse>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.listEntities =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListEntities',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListEntities);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.DeleteEntityRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_DeleteEntity = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/DeleteEntity',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.DeleteEntityRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.DeleteEntityRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.DeleteEntityRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.deleteEntity =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/DeleteEntity',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_DeleteEntity,
      callback);
};


/**
 * @param {!proto.feast.registry.DeleteEntityRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.deleteEntity =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/DeleteEntity',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_DeleteEntity);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ApplyDataSourceRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_ApplyDataSource = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ApplyDataSource',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ApplyDataSourceRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.ApplyDataSourceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ApplyDataSourceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.applyDataSource =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplyDataSource',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplyDataSource,
      callback);
};


/**
 * @param {!proto.feast.registry.ApplyDataSourceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.applyDataSource =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplyDataSource',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplyDataSource);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.GetDataSourceRequest,
 *   !proto.feast.core.DataSource>}
 */
const methodDescriptor_RegistryServer_GetDataSource = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/GetDataSource',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.GetDataSourceRequest,
  feast_core_DataSource_pb.DataSource,
  /**
   * @param {!proto.feast.registry.GetDataSourceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  feast_core_DataSource_pb.DataSource.deserializeBinary
);


/**
 * @param {!proto.feast.registry.GetDataSourceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.core.DataSource)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.core.DataSource>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.getDataSource =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetDataSource',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetDataSource,
      callback);
};


/**
 * @param {!proto.feast.registry.GetDataSourceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.core.DataSource>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.getDataSource =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetDataSource',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetDataSource);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ListDataSourcesRequest,
 *   !proto.feast.registry.ListDataSourcesResponse>}
 */
const methodDescriptor_RegistryServer_ListDataSources = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ListDataSources',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ListDataSourcesRequest,
  proto.feast.registry.ListDataSourcesResponse,
  /**
   * @param {!proto.feast.registry.ListDataSourcesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.feast.registry.ListDataSourcesResponse.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ListDataSourcesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.registry.ListDataSourcesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.registry.ListDataSourcesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.listDataSources =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListDataSources',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListDataSources,
      callback);
};


/**
 * @param {!proto.feast.registry.ListDataSourcesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.registry.ListDataSourcesResponse>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.listDataSources =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListDataSources',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListDataSources);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.DeleteDataSourceRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_DeleteDataSource = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/DeleteDataSource',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.DeleteDataSourceRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.DeleteDataSourceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.DeleteDataSourceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.deleteDataSource =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/DeleteDataSource',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_DeleteDataSource,
      callback);
};


/**
 * @param {!proto.feast.registry.DeleteDataSourceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.deleteDataSource =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/DeleteDataSource',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_DeleteDataSource);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ApplyFeatureViewRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_ApplyFeatureView = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ApplyFeatureView',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ApplyFeatureViewRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.ApplyFeatureViewRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ApplyFeatureViewRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.applyFeatureView =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplyFeatureView',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplyFeatureView,
      callback);
};


/**
 * @param {!proto.feast.registry.ApplyFeatureViewRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.applyFeatureView =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplyFeatureView',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplyFeatureView);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.GetFeatureViewRequest,
 *   !proto.feast.core.FeatureView>}
 */
const methodDescriptor_RegistryServer_GetFeatureView = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/GetFeatureView',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.GetFeatureViewRequest,
  feast_core_FeatureView_pb.FeatureView,
  /**
   * @param {!proto.feast.registry.GetFeatureViewRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  feast_core_FeatureView_pb.FeatureView.deserializeBinary
);


/**
 * @param {!proto.feast.registry.GetFeatureViewRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.core.FeatureView)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.core.FeatureView>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.getFeatureView =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetFeatureView',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetFeatureView,
      callback);
};


/**
 * @param {!proto.feast.registry.GetFeatureViewRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.core.FeatureView>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.getFeatureView =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetFeatureView',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetFeatureView);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ListFeatureViewsRequest,
 *   !proto.feast.registry.ListFeatureViewsResponse>}
 */
const methodDescriptor_RegistryServer_ListFeatureViews = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ListFeatureViews',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ListFeatureViewsRequest,
  proto.feast.registry.ListFeatureViewsResponse,
  /**
   * @param {!proto.feast.registry.ListFeatureViewsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.feast.registry.ListFeatureViewsResponse.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ListFeatureViewsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.registry.ListFeatureViewsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.registry.ListFeatureViewsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.listFeatureViews =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListFeatureViews',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListFeatureViews,
      callback);
};


/**
 * @param {!proto.feast.registry.ListFeatureViewsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.registry.ListFeatureViewsResponse>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.listFeatureViews =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListFeatureViews',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListFeatureViews);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.DeleteFeatureViewRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_DeleteFeatureView = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/DeleteFeatureView',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.DeleteFeatureViewRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.DeleteFeatureViewRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.DeleteFeatureViewRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.deleteFeatureView =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/DeleteFeatureView',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_DeleteFeatureView,
      callback);
};


/**
 * @param {!proto.feast.registry.DeleteFeatureViewRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.deleteFeatureView =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/DeleteFeatureView',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_DeleteFeatureView);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.GetStreamFeatureViewRequest,
 *   !proto.feast.core.StreamFeatureView>}
 */
const methodDescriptor_RegistryServer_GetStreamFeatureView = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/GetStreamFeatureView',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.GetStreamFeatureViewRequest,
  feast_core_StreamFeatureView_pb.StreamFeatureView,
  /**
   * @param {!proto.feast.registry.GetStreamFeatureViewRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  feast_core_StreamFeatureView_pb.StreamFeatureView.deserializeBinary
);


/**
 * @param {!proto.feast.registry.GetStreamFeatureViewRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.core.StreamFeatureView)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.core.StreamFeatureView>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.getStreamFeatureView =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetStreamFeatureView',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetStreamFeatureView,
      callback);
};


/**
 * @param {!proto.feast.registry.GetStreamFeatureViewRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.core.StreamFeatureView>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.getStreamFeatureView =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetStreamFeatureView',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetStreamFeatureView);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ListStreamFeatureViewsRequest,
 *   !proto.feast.registry.ListStreamFeatureViewsResponse>}
 */
const methodDescriptor_RegistryServer_ListStreamFeatureViews = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ListStreamFeatureViews',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ListStreamFeatureViewsRequest,
  proto.feast.registry.ListStreamFeatureViewsResponse,
  /**
   * @param {!proto.feast.registry.ListStreamFeatureViewsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.feast.registry.ListStreamFeatureViewsResponse.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ListStreamFeatureViewsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.registry.ListStreamFeatureViewsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.registry.ListStreamFeatureViewsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.listStreamFeatureViews =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListStreamFeatureViews',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListStreamFeatureViews,
      callback);
};


/**
 * @param {!proto.feast.registry.ListStreamFeatureViewsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.registry.ListStreamFeatureViewsResponse>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.listStreamFeatureViews =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListStreamFeatureViews',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListStreamFeatureViews);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.GetOnDemandFeatureViewRequest,
 *   !proto.feast.core.OnDemandFeatureView>}
 */
const methodDescriptor_RegistryServer_GetOnDemandFeatureView = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/GetOnDemandFeatureView',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.GetOnDemandFeatureViewRequest,
  feast_core_OnDemandFeatureView_pb.OnDemandFeatureView,
  /**
   * @param {!proto.feast.registry.GetOnDemandFeatureViewRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  feast_core_OnDemandFeatureView_pb.OnDemandFeatureView.deserializeBinary
);


/**
 * @param {!proto.feast.registry.GetOnDemandFeatureViewRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.core.OnDemandFeatureView)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.core.OnDemandFeatureView>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.getOnDemandFeatureView =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetOnDemandFeatureView',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetOnDemandFeatureView,
      callback);
};


/**
 * @param {!proto.feast.registry.GetOnDemandFeatureViewRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.core.OnDemandFeatureView>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.getOnDemandFeatureView =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetOnDemandFeatureView',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetOnDemandFeatureView);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ListOnDemandFeatureViewsRequest,
 *   !proto.feast.registry.ListOnDemandFeatureViewsResponse>}
 */
const methodDescriptor_RegistryServer_ListOnDemandFeatureViews = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ListOnDemandFeatureViews',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ListOnDemandFeatureViewsRequest,
  proto.feast.registry.ListOnDemandFeatureViewsResponse,
  /**
   * @param {!proto.feast.registry.ListOnDemandFeatureViewsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.feast.registry.ListOnDemandFeatureViewsResponse.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ListOnDemandFeatureViewsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.registry.ListOnDemandFeatureViewsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.registry.ListOnDemandFeatureViewsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.listOnDemandFeatureViews =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListOnDemandFeatureViews',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListOnDemandFeatureViews,
      callback);
};


/**
 * @param {!proto.feast.registry.ListOnDemandFeatureViewsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.registry.ListOnDemandFeatureViewsResponse>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.listOnDemandFeatureViews =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListOnDemandFeatureViews',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListOnDemandFeatureViews);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ApplyFeatureServiceRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_ApplyFeatureService = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ApplyFeatureService',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ApplyFeatureServiceRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.ApplyFeatureServiceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ApplyFeatureServiceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.applyFeatureService =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplyFeatureService',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplyFeatureService,
      callback);
};


/**
 * @param {!proto.feast.registry.ApplyFeatureServiceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.applyFeatureService =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplyFeatureService',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplyFeatureService);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.GetFeatureServiceRequest,
 *   !proto.feast.core.FeatureService>}
 */
const methodDescriptor_RegistryServer_GetFeatureService = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/GetFeatureService',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.GetFeatureServiceRequest,
  feast_core_FeatureService_pb.FeatureService,
  /**
   * @param {!proto.feast.registry.GetFeatureServiceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  feast_core_FeatureService_pb.FeatureService.deserializeBinary
);


/**
 * @param {!proto.feast.registry.GetFeatureServiceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.core.FeatureService)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.core.FeatureService>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.getFeatureService =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetFeatureService',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetFeatureService,
      callback);
};


/**
 * @param {!proto.feast.registry.GetFeatureServiceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.core.FeatureService>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.getFeatureService =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetFeatureService',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetFeatureService);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ListFeatureServicesRequest,
 *   !proto.feast.registry.ListFeatureServicesResponse>}
 */
const methodDescriptor_RegistryServer_ListFeatureServices = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ListFeatureServices',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ListFeatureServicesRequest,
  proto.feast.registry.ListFeatureServicesResponse,
  /**
   * @param {!proto.feast.registry.ListFeatureServicesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.feast.registry.ListFeatureServicesResponse.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ListFeatureServicesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.registry.ListFeatureServicesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.registry.ListFeatureServicesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.listFeatureServices =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListFeatureServices',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListFeatureServices,
      callback);
};


/**
 * @param {!proto.feast.registry.ListFeatureServicesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.registry.ListFeatureServicesResponse>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.listFeatureServices =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListFeatureServices',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListFeatureServices);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.DeleteFeatureServiceRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_DeleteFeatureService = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/DeleteFeatureService',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.DeleteFeatureServiceRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.DeleteFeatureServiceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.DeleteFeatureServiceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.deleteFeatureService =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/DeleteFeatureService',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_DeleteFeatureService,
      callback);
};


/**
 * @param {!proto.feast.registry.DeleteFeatureServiceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.deleteFeatureService =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/DeleteFeatureService',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_DeleteFeatureService);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ApplySavedDatasetRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_ApplySavedDataset = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ApplySavedDataset',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ApplySavedDatasetRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.ApplySavedDatasetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ApplySavedDatasetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.applySavedDataset =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplySavedDataset',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplySavedDataset,
      callback);
};


/**
 * @param {!proto.feast.registry.ApplySavedDatasetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.applySavedDataset =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplySavedDataset',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplySavedDataset);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.GetSavedDatasetRequest,
 *   !proto.feast.core.SavedDataset>}
 */
const methodDescriptor_RegistryServer_GetSavedDataset = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/GetSavedDataset',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.GetSavedDatasetRequest,
  feast_core_SavedDataset_pb.SavedDataset,
  /**
   * @param {!proto.feast.registry.GetSavedDatasetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  feast_core_SavedDataset_pb.SavedDataset.deserializeBinary
);


/**
 * @param {!proto.feast.registry.GetSavedDatasetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.core.SavedDataset)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.core.SavedDataset>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.getSavedDataset =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetSavedDataset',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetSavedDataset,
      callback);
};


/**
 * @param {!proto.feast.registry.GetSavedDatasetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.core.SavedDataset>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.getSavedDataset =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetSavedDataset',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetSavedDataset);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ListSavedDatasetsRequest,
 *   !proto.feast.registry.ListSavedDatasetsResponse>}
 */
const methodDescriptor_RegistryServer_ListSavedDatasets = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ListSavedDatasets',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ListSavedDatasetsRequest,
  proto.feast.registry.ListSavedDatasetsResponse,
  /**
   * @param {!proto.feast.registry.ListSavedDatasetsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.feast.registry.ListSavedDatasetsResponse.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ListSavedDatasetsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.registry.ListSavedDatasetsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.registry.ListSavedDatasetsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.listSavedDatasets =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListSavedDatasets',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListSavedDatasets,
      callback);
};


/**
 * @param {!proto.feast.registry.ListSavedDatasetsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.registry.ListSavedDatasetsResponse>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.listSavedDatasets =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListSavedDatasets',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListSavedDatasets);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.DeleteSavedDatasetRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_DeleteSavedDataset = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/DeleteSavedDataset',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.DeleteSavedDatasetRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.DeleteSavedDatasetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.DeleteSavedDatasetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.deleteSavedDataset =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/DeleteSavedDataset',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_DeleteSavedDataset,
      callback);
};


/**
 * @param {!proto.feast.registry.DeleteSavedDatasetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.deleteSavedDataset =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/DeleteSavedDataset',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_DeleteSavedDataset);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ApplyValidationReferenceRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_ApplyValidationReference = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ApplyValidationReference',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ApplyValidationReferenceRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.ApplyValidationReferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ApplyValidationReferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.applyValidationReference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplyValidationReference',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplyValidationReference,
      callback);
};


/**
 * @param {!proto.feast.registry.ApplyValidationReferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.applyValidationReference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplyValidationReference',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplyValidationReference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.GetValidationReferenceRequest,
 *   !proto.feast.core.ValidationReference>}
 */
const methodDescriptor_RegistryServer_GetValidationReference = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/GetValidationReference',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.GetValidationReferenceRequest,
  feast_core_ValidationProfile_pb.ValidationReference,
  /**
   * @param {!proto.feast.registry.GetValidationReferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  feast_core_ValidationProfile_pb.ValidationReference.deserializeBinary
);


/**
 * @param {!proto.feast.registry.GetValidationReferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.core.ValidationReference)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.core.ValidationReference>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.getValidationReference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetValidationReference',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetValidationReference,
      callback);
};


/**
 * @param {!proto.feast.registry.GetValidationReferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.core.ValidationReference>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.getValidationReference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetValidationReference',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetValidationReference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ListValidationReferencesRequest,
 *   !proto.feast.registry.ListValidationReferencesResponse>}
 */
const methodDescriptor_RegistryServer_ListValidationReferences = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ListValidationReferences',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ListValidationReferencesRequest,
  proto.feast.registry.ListValidationReferencesResponse,
  /**
   * @param {!proto.feast.registry.ListValidationReferencesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.feast.registry.ListValidationReferencesResponse.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ListValidationReferencesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.registry.ListValidationReferencesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.registry.ListValidationReferencesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.listValidationReferences =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListValidationReferences',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListValidationReferences,
      callback);
};


/**
 * @param {!proto.feast.registry.ListValidationReferencesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.registry.ListValidationReferencesResponse>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.listValidationReferences =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListValidationReferences',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListValidationReferences);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.DeleteValidationReferenceRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_DeleteValidationReference = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/DeleteValidationReference',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.DeleteValidationReferenceRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.DeleteValidationReferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.DeleteValidationReferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.deleteValidationReference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/DeleteValidationReference',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_DeleteValidationReference,
      callback);
};


/**
 * @param {!proto.feast.registry.DeleteValidationReferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.deleteValidationReference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/DeleteValidationReference',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_DeleteValidationReference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ApplyMaterializationRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_ApplyMaterialization = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ApplyMaterialization',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ApplyMaterializationRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.ApplyMaterializationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ApplyMaterializationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.applyMaterialization =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplyMaterialization',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplyMaterialization,
      callback);
};


/**
 * @param {!proto.feast.registry.ApplyMaterializationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.applyMaterialization =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ApplyMaterialization',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ApplyMaterialization);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.ListProjectMetadataRequest,
 *   !proto.feast.registry.ListProjectMetadataResponse>}
 */
const methodDescriptor_RegistryServer_ListProjectMetadata = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/ListProjectMetadata',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.ListProjectMetadataRequest,
  proto.feast.registry.ListProjectMetadataResponse,
  /**
   * @param {!proto.feast.registry.ListProjectMetadataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.feast.registry.ListProjectMetadataResponse.deserializeBinary
);


/**
 * @param {!proto.feast.registry.ListProjectMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.registry.ListProjectMetadataResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.registry.ListProjectMetadataResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.listProjectMetadata =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListProjectMetadata',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListProjectMetadata,
      callback);
};


/**
 * @param {!proto.feast.registry.ListProjectMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.registry.ListProjectMetadataResponse>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.listProjectMetadata =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/ListProjectMetadata',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_ListProjectMetadata);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.UpdateInfraRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_UpdateInfra = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/UpdateInfra',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.UpdateInfraRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.UpdateInfraRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.UpdateInfraRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.updateInfra =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/UpdateInfra',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_UpdateInfra,
      callback);
};


/**
 * @param {!proto.feast.registry.UpdateInfraRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.updateInfra =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/UpdateInfra',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_UpdateInfra);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.GetInfraRequest,
 *   !proto.feast.core.Infra>}
 */
const methodDescriptor_RegistryServer_GetInfra = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/GetInfra',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.GetInfraRequest,
  feast_core_InfraObject_pb.Infra,
  /**
   * @param {!proto.feast.registry.GetInfraRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  feast_core_InfraObject_pb.Infra.deserializeBinary
);


/**
 * @param {!proto.feast.registry.GetInfraRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.core.Infra)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.core.Infra>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.getInfra =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetInfra',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetInfra,
      callback);
};


/**
 * @param {!proto.feast.registry.GetInfraRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.core.Infra>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.getInfra =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/GetInfra',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_GetInfra);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_Commit = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/Commit',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.commit =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/Commit',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_Commit,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.commit =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/Commit',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_Commit);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.feast.registry.RefreshRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_RegistryServer_Refresh = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/Refresh',
  grpc.web.MethodType.UNARY,
  proto.feast.registry.RefreshRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.feast.registry.RefreshRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.feast.registry.RefreshRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.refresh =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/Refresh',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_Refresh,
      callback);
};


/**
 * @param {!proto.feast.registry.RefreshRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.refresh =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/Refresh',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_Refresh);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.feast.core.Registry>}
 */
const methodDescriptor_RegistryServer_Proto = new grpc.web.MethodDescriptor(
  '/feast.registry.RegistryServer/Proto',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  feast_core_Registry_pb.Registry,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  feast_core_Registry_pb.Registry.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.feast.core.Registry)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.feast.core.Registry>|undefined}
 *     The XHR Node Readable Stream
 */
proto.feast.registry.RegistryServerClient.prototype.proto =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/feast.registry.RegistryServer/Proto',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_Proto,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.feast.core.Registry>}
 *     Promise that resolves to the response
 */
proto.feast.registry.RegistryServerPromiseClient.prototype.proto =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/feast.registry.RegistryServer/Proto',
      request,
      metadata || {},
      methodDescriptor_RegistryServer_Proto);
};


module.exports = proto.feast.registry;

